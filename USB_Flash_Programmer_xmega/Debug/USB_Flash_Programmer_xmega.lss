
USB_Flash_Programmer_xmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000304a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a2  00802000  0000304a  000030de  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000038c  008021a2  008021a2  00003282  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003280  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000032dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a8  00000000  00000000  00003320  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009c7e  00000000  00000000  000037c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c1a  00000000  00000000  0000d446  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005327  00000000  00000000  00011060  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dd0  00000000  00000000  00016388  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00033114  00000000  00000000  00017158  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000039c2  00000000  00000000  0004a26c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000480  00000000  00000000  0004dc30  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000a95b  00000000  00000000  0004e0b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	27 c1       	rjmp	.+590    	; 0x254 <__bad_interrupt>
       6:	00 00       	nop
       8:	25 c1       	rjmp	.+586    	; 0x254 <__bad_interrupt>
       a:	00 00       	nop
       c:	23 c1       	rjmp	.+582    	; 0x254 <__bad_interrupt>
       e:	00 00       	nop
      10:	21 c1       	rjmp	.+578    	; 0x254 <__bad_interrupt>
      12:	00 00       	nop
      14:	1f c1       	rjmp	.+574    	; 0x254 <__bad_interrupt>
      16:	00 00       	nop
      18:	1d c1       	rjmp	.+570    	; 0x254 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1b c1       	rjmp	.+566    	; 0x254 <__bad_interrupt>
      1e:	00 00       	nop
      20:	19 c1       	rjmp	.+562    	; 0x254 <__bad_interrupt>
      22:	00 00       	nop
      24:	17 c1       	rjmp	.+558    	; 0x254 <__bad_interrupt>
      26:	00 00       	nop
      28:	15 c1       	rjmp	.+554    	; 0x254 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	13 c1       	rjmp	.+550    	; 0x254 <__bad_interrupt>
      2e:	00 00       	nop
      30:	11 c1       	rjmp	.+546    	; 0x254 <__bad_interrupt>
      32:	00 00       	nop
      34:	0f c1       	rjmp	.+542    	; 0x254 <__bad_interrupt>
      36:	00 00       	nop
      38:	0d c1       	rjmp	.+538    	; 0x254 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0b c1       	rjmp	.+534    	; 0x254 <__bad_interrupt>
      3e:	00 00       	nop
      40:	09 c1       	rjmp	.+530    	; 0x254 <__bad_interrupt>
      42:	00 00       	nop
      44:	07 c1       	rjmp	.+526    	; 0x254 <__bad_interrupt>
      46:	00 00       	nop
      48:	05 c1       	rjmp	.+522    	; 0x254 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	03 c1       	rjmp	.+518    	; 0x254 <__bad_interrupt>
      4e:	00 00       	nop
      50:	01 c1       	rjmp	.+514    	; 0x254 <__bad_interrupt>
      52:	00 00       	nop
      54:	ff c0       	rjmp	.+510    	; 0x254 <__bad_interrupt>
      56:	00 00       	nop
      58:	fd c0       	rjmp	.+506    	; 0x254 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	fb c0       	rjmp	.+502    	; 0x254 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f9 c0       	rjmp	.+498    	; 0x254 <__bad_interrupt>
      62:	00 00       	nop
      64:	f7 c0       	rjmp	.+494    	; 0x254 <__bad_interrupt>
      66:	00 00       	nop
      68:	f5 c0       	rjmp	.+490    	; 0x254 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f3 c0       	rjmp	.+486    	; 0x254 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f1 c0       	rjmp	.+482    	; 0x254 <__bad_interrupt>
      72:	00 00       	nop
      74:	ef c0       	rjmp	.+478    	; 0x254 <__bad_interrupt>
      76:	00 00       	nop
      78:	ed c0       	rjmp	.+474    	; 0x254 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	eb c0       	rjmp	.+470    	; 0x254 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e9 c0       	rjmp	.+466    	; 0x254 <__bad_interrupt>
      82:	00 00       	nop
      84:	e7 c0       	rjmp	.+462    	; 0x254 <__bad_interrupt>
      86:	00 00       	nop
      88:	e5 c0       	rjmp	.+458    	; 0x254 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e3 c0       	rjmp	.+454    	; 0x254 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e1 c0       	rjmp	.+450    	; 0x254 <__bad_interrupt>
      92:	00 00       	nop
      94:	df c0       	rjmp	.+446    	; 0x254 <__bad_interrupt>
      96:	00 00       	nop
      98:	dd c0       	rjmp	.+442    	; 0x254 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	db c0       	rjmp	.+438    	; 0x254 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d9 c0       	rjmp	.+434    	; 0x254 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d7 c0       	rjmp	.+430    	; 0x254 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d5 c0       	rjmp	.+426    	; 0x254 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d3 c0       	rjmp	.+422    	; 0x254 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d1 c0       	rjmp	.+418    	; 0x254 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cf c0       	rjmp	.+414    	; 0x254 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	cd c0       	rjmp	.+410    	; 0x254 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	cb c0       	rjmp	.+406    	; 0x254 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c9 c0       	rjmp	.+402    	; 0x254 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c7 c0       	rjmp	.+398    	; 0x254 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c5 c0       	rjmp	.+394    	; 0x254 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c3 c0       	rjmp	.+390    	; 0x254 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c1 c0       	rjmp	.+386    	; 0x254 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	bf c0       	rjmp	.+382    	; 0x254 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	bd c0       	rjmp	.+378    	; 0x254 <__bad_interrupt>
      da:	00 00       	nop
      dc:	bb c0       	rjmp	.+374    	; 0x254 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b9 c0       	rjmp	.+370    	; 0x254 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b7 c0       	rjmp	.+366    	; 0x254 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b5 c0       	rjmp	.+362    	; 0x254 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b3 c0       	rjmp	.+358    	; 0x254 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b1 c0       	rjmp	.+354    	; 0x254 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	af c0       	rjmp	.+350    	; 0x254 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ad c0       	rjmp	.+346    	; 0x254 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ab c0       	rjmp	.+342    	; 0x254 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a9 c0       	rjmp	.+338    	; 0x254 <__bad_interrupt>
     102:	00 00       	nop
     104:	a7 c0       	rjmp	.+334    	; 0x254 <__bad_interrupt>
     106:	00 00       	nop
     108:	a5 c0       	rjmp	.+330    	; 0x254 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a3 c0       	rjmp	.+326    	; 0x254 <__bad_interrupt>
     10e:	00 00       	nop
     110:	a1 c0       	rjmp	.+322    	; 0x254 <__bad_interrupt>
     112:	00 00       	nop
     114:	9f c0       	rjmp	.+318    	; 0x254 <__bad_interrupt>
     116:	00 00       	nop
     118:	9d c0       	rjmp	.+314    	; 0x254 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	9b c0       	rjmp	.+310    	; 0x254 <__bad_interrupt>
     11e:	00 00       	nop
     120:	99 c0       	rjmp	.+306    	; 0x254 <__bad_interrupt>
     122:	00 00       	nop
     124:	97 c0       	rjmp	.+302    	; 0x254 <__bad_interrupt>
     126:	00 00       	nop
     128:	95 c0       	rjmp	.+298    	; 0x254 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	93 c0       	rjmp	.+294    	; 0x254 <__bad_interrupt>
     12e:	00 00       	nop
     130:	91 c0       	rjmp	.+290    	; 0x254 <__bad_interrupt>
     132:	00 00       	nop
     134:	8f c0       	rjmp	.+286    	; 0x254 <__bad_interrupt>
     136:	00 00       	nop
     138:	8d c0       	rjmp	.+282    	; 0x254 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	8b c0       	rjmp	.+278    	; 0x254 <__bad_interrupt>
     13e:	00 00       	nop
     140:	89 c0       	rjmp	.+274    	; 0x254 <__bad_interrupt>
     142:	00 00       	nop
     144:	87 c0       	rjmp	.+270    	; 0x254 <__bad_interrupt>
     146:	00 00       	nop
     148:	85 c0       	rjmp	.+266    	; 0x254 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	83 c0       	rjmp	.+262    	; 0x254 <__bad_interrupt>
     14e:	00 00       	nop
     150:	81 c0       	rjmp	.+258    	; 0x254 <__bad_interrupt>
     152:	00 00       	nop
     154:	7f c0       	rjmp	.+254    	; 0x254 <__bad_interrupt>
     156:	00 00       	nop
     158:	7d c0       	rjmp	.+250    	; 0x254 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	7b c0       	rjmp	.+246    	; 0x254 <__bad_interrupt>
     15e:	00 00       	nop
     160:	79 c0       	rjmp	.+242    	; 0x254 <__bad_interrupt>
     162:	00 00       	nop
     164:	77 c0       	rjmp	.+238    	; 0x254 <__bad_interrupt>
     166:	00 00       	nop
     168:	75 c0       	rjmp	.+234    	; 0x254 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	73 c0       	rjmp	.+230    	; 0x254 <__bad_interrupt>
     16e:	00 00       	nop
     170:	71 c0       	rjmp	.+226    	; 0x254 <__bad_interrupt>
     172:	00 00       	nop
     174:	6f c0       	rjmp	.+222    	; 0x254 <__bad_interrupt>
     176:	00 00       	nop
     178:	6d c0       	rjmp	.+218    	; 0x254 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6b c0       	rjmp	.+214    	; 0x254 <__bad_interrupt>
     17e:	00 00       	nop
     180:	69 c0       	rjmp	.+210    	; 0x254 <__bad_interrupt>
     182:	00 00       	nop
     184:	67 c0       	rjmp	.+206    	; 0x254 <__bad_interrupt>
     186:	00 00       	nop
     188:	65 c0       	rjmp	.+202    	; 0x254 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	63 c0       	rjmp	.+198    	; 0x254 <__bad_interrupt>
     18e:	00 00       	nop
     190:	61 c0       	rjmp	.+194    	; 0x254 <__bad_interrupt>
     192:	00 00       	nop
     194:	5f c0       	rjmp	.+190    	; 0x254 <__bad_interrupt>
     196:	00 00       	nop
     198:	5d c0       	rjmp	.+186    	; 0x254 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5b c0       	rjmp	.+182    	; 0x254 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	59 c0       	rjmp	.+178    	; 0x254 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	57 c0       	rjmp	.+174    	; 0x254 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	55 c0       	rjmp	.+170    	; 0x254 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	53 c0       	rjmp	.+166    	; 0x254 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	51 c0       	rjmp	.+162    	; 0x254 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	4f c0       	rjmp	.+158    	; 0x254 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	4d c0       	rjmp	.+154    	; 0x254 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	4b c0       	rjmp	.+150    	; 0x254 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	49 c0       	rjmp	.+146    	; 0x254 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	47 c0       	rjmp	.+142    	; 0x254 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	45 c0       	rjmp	.+138    	; 0x254 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	43 c0       	rjmp	.+134    	; 0x254 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	41 c0       	rjmp	.+130    	; 0x254 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	3f c0       	rjmp	.+126    	; 0x254 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	3d c0       	rjmp	.+122    	; 0x254 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3b c0       	rjmp	.+118    	; 0x254 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	39 c0       	rjmp	.+114    	; 0x254 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	37 c0       	rjmp	.+110    	; 0x254 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	35 c0       	rjmp	.+106    	; 0x254 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	33 c0       	rjmp	.+102    	; 0x254 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	31 c0       	rjmp	.+98     	; 0x254 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 ac 12 	jmp	0x2558	; 0x2558 <__vector_125>
     1f8:	0c 94 6f 13 	jmp	0x26de	; 0x26de <__vector_126>
     1fc:	a2 0d       	add	r26, r2
     1fe:	a5 0d       	add	r26, r5
     200:	a8 0d       	add	r26, r8
     202:	ab 0d       	add	r26, r11
     204:	ae 0d       	add	r26, r14
     206:	b1 0d       	add	r27, r1
     208:	b4 0d       	add	r27, r4

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e3       	ldi	r29, 0x3F	; 63
     214:	de bf       	out	0x3e, r29	; 62
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0c bf       	out	0x3c, r16	; 60
     21a:	18 be       	out	0x38, r1	; 56
     21c:	19 be       	out	0x39, r1	; 57
     21e:	1a be       	out	0x3a, r1	; 58
     220:	1b be       	out	0x3b, r1	; 59

00000222 <__do_copy_data>:
     222:	11 e2       	ldi	r17, 0x21	; 33
     224:	a0 e0       	ldi	r26, 0x00	; 0
     226:	b0 e2       	ldi	r27, 0x20	; 32
     228:	ea e4       	ldi	r30, 0x4A	; 74
     22a:	f0 e3       	ldi	r31, 0x30	; 48
     22c:	00 e0       	ldi	r16, 0x00	; 0
     22e:	0b bf       	out	0x3b, r16	; 59
     230:	02 c0       	rjmp	.+4      	; 0x236 <__do_copy_data+0x14>
     232:	07 90       	elpm	r0, Z+
     234:	0d 92       	st	X+, r0
     236:	a2 3a       	cpi	r26, 0xA2	; 162
     238:	b1 07       	cpc	r27, r17
     23a:	d9 f7       	brne	.-10     	; 0x232 <__do_copy_data+0x10>
     23c:	1b be       	out	0x3b, r1	; 59

0000023e <__do_clear_bss>:
     23e:	25 e2       	ldi	r18, 0x25	; 37
     240:	a2 ea       	ldi	r26, 0xA2	; 162
     242:	b1 e2       	ldi	r27, 0x21	; 33
     244:	01 c0       	rjmp	.+2      	; 0x248 <.do_clear_bss_start>

00000246 <.do_clear_bss_loop>:
     246:	1d 92       	st	X+, r1

00000248 <.do_clear_bss_start>:
     248:	ae 32       	cpi	r26, 0x2E	; 46
     24a:	b2 07       	cpc	r27, r18
     24c:	e1 f7       	brne	.-8      	; 0x246 <.do_clear_bss_loop>
     24e:	da d3       	rcall	.+1972   	; 0xa04 <main>
     250:	0c 94 23 18 	jmp	0x3046	; 0x3046 <_exit>

00000254 <__bad_interrupt>:
     254:	d5 ce       	rjmp	.-598    	; 0x0 <__vectors>

00000256 <uart_putchar>:
		}
		//remaining = udi_cdc_multi_write_buf(0, buff, len);
		//printf("Remaining: %u\r\n", remaining);
		//writeUARTByte(*(ptr++));		
	} while (len--);
}
     256:	e0 ea       	ldi	r30, 0xA0	; 160
     258:	fa e0       	ldi	r31, 0x0A	; 10
     25a:	91 81       	ldd	r25, Z+1	; 0x01
     25c:	95 ff       	sbrs	r25, 5
     25e:	fd cf       	rjmp	.-6      	; 0x25a <uart_putchar+0x4>
     260:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
     264:	08 95       	ret

00000266 <initSPI>:
     266:	68 e0       	ldi	r22, 0x08	; 8
     268:	83 e0       	ldi	r24, 0x03	; 3
     26a:	0e 94 b6 14 	call	0x296c	; 0x296c <sysclk_enable_module>
     26e:	e0 e4       	ldi	r30, 0x40	; 64
     270:	f6 e0       	ldi	r31, 0x06	; 6
     272:	80 eb       	ldi	r24, 0xB0	; 176
     274:	81 83       	std	Z+1, r24	; 0x01
     276:	80 e4       	ldi	r24, 0x40	; 64
     278:	82 83       	std	Z+2, r24	; 0x02
     27a:	81 ed       	ldi	r24, 0xD1	; 209
     27c:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     280:	08 95       	ret

00000282 <initDebugUART>:
     282:	88 e0       	ldi	r24, 0x08	; 8
     284:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
     288:	e0 ea       	ldi	r30, 0xA0	; 160
     28a:	fa e0       	ldi	r31, 0x0A	; 10
     28c:	84 83       	std	Z+4, r24	; 0x04
     28e:	83 e0       	ldi	r24, 0x03	; 3
     290:	85 83       	std	Z+5, r24	; 0x05
     292:	08 95       	ret

00000294 <sendSPI>:
     294:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     298:	e0 ec       	ldi	r30, 0xC0	; 192
     29a:	f8 e0       	ldi	r31, 0x08	; 8
     29c:	82 81       	ldd	r24, Z+2	; 0x02
     29e:	88 23       	and	r24, r24
     2a0:	ec f7       	brge	.-6      	; 0x29c <sendSPI+0x8>
     2a2:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     2a6:	08 95       	ret

000002a8 <sendDummy>:
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	f4 cf       	rjmp	.-24     	; 0x294 <sendSPI>
     2ac:	08 95       	ret

000002ae <memSendAddress>:
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	c6 2f       	mov	r28, r22
     2b4:	d7 2f       	mov	r29, r23
     2b6:	ee df       	rcall	.-36     	; 0x294 <sendSPI>
     2b8:	8d 2f       	mov	r24, r29
     2ba:	ec df       	rcall	.-40     	; 0x294 <sendSPI>
     2bc:	8c 2f       	mov	r24, r28
     2be:	ea df       	rcall	.-44     	; 0x294 <sendSPI>
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <getMemStatus>:
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	c0 e4       	ldi	r28, 0x40	; 64
     2ce:	d6 e0       	ldi	r29, 0x06	; 6
     2d0:	10 e1       	ldi	r17, 0x10	; 16
     2d2:	1d 83       	std	Y+5, r17	; 0x05
     2d4:	1e 83       	std	Y+6, r17	; 0x06
     2d6:	85 e0       	ldi	r24, 0x05	; 5
     2d8:	dd df       	rcall	.-70     	; 0x294 <sendSPI>
     2da:	e6 df       	rcall	.-52     	; 0x2a8 <sendDummy>
     2dc:	1d 83       	std	Y+5, r17	; 0x05
     2de:	df 91       	pop	r29
     2e0:	cf 91       	pop	r28
     2e2:	1f 91       	pop	r17
     2e4:	08 95       	ret

000002e6 <waitForNotBusy>:
     2e6:	ef df       	rcall	.-34     	; 0x2c6 <getMemStatus>
     2e8:	80 fd       	sbrc	r24, 0
     2ea:	fd cf       	rjmp	.-6      	; 0x2e6 <waitForNotBusy>
     2ec:	08 95       	ret

000002ee <memEnableWrite>:
     2ee:	e0 e4       	ldi	r30, 0x40	; 64
     2f0:	f6 e0       	ldi	r31, 0x06	; 6
     2f2:	80 e1       	ldi	r24, 0x10	; 16
     2f4:	85 83       	std	Z+5, r24	; 0x05
     2f6:	86 83       	std	Z+6, r24	; 0x06
     2f8:	86 e0       	ldi	r24, 0x06	; 6
     2fa:	cc df       	rcall	.-104    	; 0x294 <sendSPI>
     2fc:	e4 df       	rcall	.-56     	; 0x2c6 <getMemStatus>
     2fe:	81 ff       	sbrs	r24, 1
     300:	fd cf       	rjmp	.-6      	; 0x2fc <memEnableWrite+0xe>
     302:	80 e1       	ldi	r24, 0x10	; 16
     304:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     308:	08 95       	ret

0000030a <memEraseSector>:
     30a:	cf 92       	push	r12
     30c:	df 92       	push	r13
     30e:	ef 92       	push	r14
     310:	ff 92       	push	r15
     312:	1f 93       	push	r17
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	6b 01       	movw	r12, r22
     31a:	7c 01       	movw	r14, r24
     31c:	e4 df       	rcall	.-56     	; 0x2e6 <waitForNotBusy>
     31e:	e7 df       	rcall	.-50     	; 0x2ee <memEnableWrite>
     320:	c0 e4       	ldi	r28, 0x40	; 64
     322:	d6 e0       	ldi	r29, 0x06	; 6
     324:	10 e1       	ldi	r17, 0x10	; 16
     326:	1d 83       	std	Y+5, r17	; 0x05
     328:	1e 83       	std	Y+6, r17	; 0x06
     32a:	80 e2       	ldi	r24, 0x20	; 32
     32c:	b3 df       	rcall	.-154    	; 0x294 <sendSPI>
     32e:	c7 01       	movw	r24, r14
     330:	b6 01       	movw	r22, r12
     332:	bd df       	rcall	.-134    	; 0x2ae <memSendAddress>
     334:	1d 83       	std	Y+5, r17	; 0x05
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	1f 91       	pop	r17
     33c:	ff 90       	pop	r15
     33e:	ef 90       	pop	r14
     340:	df 90       	pop	r13
     342:	cf 90       	pop	r12
     344:	08 95       	ret

00000346 <memRead256ToStdOut>:
     346:	5f 92       	push	r5
     348:	6f 92       	push	r6
     34a:	7f 92       	push	r7
     34c:	8f 92       	push	r8
     34e:	9f 92       	push	r9
     350:	af 92       	push	r10
     352:	bf 92       	push	r11
     354:	cf 92       	push	r12
     356:	df 92       	push	r13
     358:	ef 92       	push	r14
     35a:	ff 92       	push	r15
     35c:	0f 93       	push	r16
     35e:	1f 93       	push	r17
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
     368:	60 97       	sbiw	r28, 0x10	; 16
     36a:	cd bf       	out	0x3d, r28	; 61
     36c:	de bf       	out	0x3e, r29	; 62
     36e:	6b 01       	movw	r12, r22
     370:	7c 01       	movw	r14, r24
     372:	b9 df       	rcall	.-142    	; 0x2e6 <waitForNotBusy>
     374:	e0 e4       	ldi	r30, 0x40	; 64
     376:	f6 e0       	ldi	r31, 0x06	; 6
     378:	80 e1       	ldi	r24, 0x10	; 16
     37a:	85 83       	std	Z+5, r24	; 0x05
     37c:	86 83       	std	Z+6, r24	; 0x06
     37e:	83 e0       	ldi	r24, 0x03	; 3
     380:	89 df       	rcall	.-238    	; 0x294 <sendSPI>
     382:	c7 01       	movw	r24, r14
     384:	b6 01       	movw	r22, r12
     386:	93 df       	rcall	.-218    	; 0x2ae <memSendAddress>
     388:	68 94       	set
     38a:	77 24       	eor	r7, r7
     38c:	75 f8       	bld	r7, 5
     38e:	ce 01       	movw	r24, r28
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	4c 01       	movw	r8, r24
     394:	5e 01       	movw	r10, r28
     396:	91 e1       	ldi	r25, 0x11	; 17
     398:	a9 0e       	add	r10, r25
     39a:	b1 1c       	adc	r11, r1
     39c:	58 2c       	mov	r5, r8
     39e:	69 2c       	mov	r6, r9
     3a0:	0f 2e       	mov	r0, r31
     3a2:	f6 ed       	ldi	r31, 0xD6	; 214
     3a4:	cf 2e       	mov	r12, r31
     3a6:	f0 e2       	ldi	r31, 0x20	; 32
     3a8:	df 2e       	mov	r13, r31
     3aa:	f0 2d       	mov	r31, r0
     3ac:	25 c0       	rjmp	.+74     	; 0x3f8 <memRead256ToStdOut+0xb2>
     3ae:	7c df       	rcall	.-264    	; 0x2a8 <sendDummy>
     3b0:	f8 01       	movw	r30, r16
     3b2:	81 93       	st	Z+, r24
     3b4:	8f 01       	movw	r16, r30
     3b6:	1f 92       	push	r1
     3b8:	8f 93       	push	r24
     3ba:	df 92       	push	r13
     3bc:	cf 92       	push	r12
     3be:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <printf>
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	0a 15       	cp	r16, r10
     3cc:	1b 05       	cpc	r17, r11
     3ce:	79 f7       	brne	.-34     	; 0x3ae <memRead256ToStdOut+0x68>
     3d0:	89 e0       	ldi	r24, 0x09	; 9
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <putchar>
     3d8:	f7 01       	movw	r30, r14
     3da:	81 91       	ld	r24, Z+
     3dc:	7f 01       	movw	r14, r30
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <putchar>
     3e4:	ea 14       	cp	r14, r10
     3e6:	fb 04       	cpc	r15, r11
     3e8:	b9 f7       	brne	.-18     	; 0x3d8 <memRead256ToStdOut+0x92>
     3ea:	8c e2       	ldi	r24, 0x2C	; 44
     3ec:	91 e2       	ldi	r25, 0x21	; 33
     3ee:	0e 94 5f 15 	call	0x2abe	; 0x2abe <puts>
     3f2:	7a 94       	dec	r7
     3f4:	77 20       	and	r7, r7
     3f6:	21 f0       	breq	.+8      	; 0x400 <__LOCK_REGION_LENGTH__>
     3f8:	74 01       	movw	r14, r8
     3fa:	05 2d       	mov	r16, r5
     3fc:	16 2d       	mov	r17, r6
     3fe:	d7 cf       	rjmp	.-82     	; 0x3ae <memRead256ToStdOut+0x68>
     400:	80 e1       	ldi	r24, 0x10	; 16
     402:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     406:	60 96       	adiw	r28, 0x10	; 16
     408:	cd bf       	out	0x3d, r28	; 61
     40a:	de bf       	out	0x3e, r29	; 62
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	ff 90       	pop	r15
     416:	ef 90       	pop	r14
     418:	df 90       	pop	r13
     41a:	cf 90       	pop	r12
     41c:	bf 90       	pop	r11
     41e:	af 90       	pop	r10
     420:	9f 90       	pop	r9
     422:	8f 90       	pop	r8
     424:	7f 90       	pop	r7
     426:	6f 90       	pop	r6
     428:	5f 90       	pop	r5
     42a:	08 95       	ret

0000042c <memReadToBuffer>:
     42c:	8f 92       	push	r8
     42e:	9f 92       	push	r9
     430:	af 92       	push	r10
     432:	bf 92       	push	r11
     434:	ef 92       	push	r14
     436:	ff 92       	push	r15
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	4b 01       	movw	r8, r22
     442:	5c 01       	movw	r10, r24
     444:	7a 01       	movw	r14, r20
     446:	12 2f       	mov	r17, r18
     448:	4e df       	rcall	.-356    	; 0x2e6 <waitForNotBusy>
     44a:	e0 e4       	ldi	r30, 0x40	; 64
     44c:	f6 e0       	ldi	r31, 0x06	; 6
     44e:	80 e1       	ldi	r24, 0x10	; 16
     450:	85 83       	std	Z+5, r24	; 0x05
     452:	86 83       	std	Z+6, r24	; 0x06
     454:	83 e0       	ldi	r24, 0x03	; 3
     456:	1e df       	rcall	.-452    	; 0x294 <sendSPI>
     458:	c5 01       	movw	r24, r10
     45a:	b4 01       	movw	r22, r8
     45c:	28 df       	rcall	.-432    	; 0x2ae <memSendAddress>
     45e:	e7 01       	movw	r28, r14
     460:	01 2f       	mov	r16, r17
     462:	10 e0       	ldi	r17, 0x00	; 0
     464:	0f 5f       	subi	r16, 0xFF	; 255
     466:	1f 4f       	sbci	r17, 0xFF	; 255
     468:	0e 0d       	add	r16, r14
     46a:	1f 1d       	adc	r17, r15
     46c:	1d df       	rcall	.-454    	; 0x2a8 <sendDummy>
     46e:	89 93       	st	Y+, r24
     470:	c0 17       	cp	r28, r16
     472:	d1 07       	cpc	r29, r17
     474:	d9 f7       	brne	.-10     	; 0x46c <memReadToBuffer+0x40>
     476:	80 e1       	ldi	r24, 0x10	; 16
     478:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	1f 91       	pop	r17
     482:	0f 91       	pop	r16
     484:	ff 90       	pop	r15
     486:	ef 90       	pop	r14
     488:	bf 90       	pop	r11
     48a:	af 90       	pop	r10
     48c:	9f 90       	pop	r9
     48e:	8f 90       	pop	r8
     490:	08 95       	ret

00000492 <memWriteBuff>:
     492:	8f 92       	push	r8
     494:	9f 92       	push	r9
     496:	af 92       	push	r10
     498:	bf 92       	push	r11
     49a:	ef 92       	push	r14
     49c:	ff 92       	push	r15
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	4b 01       	movw	r8, r22
     4a8:	5c 01       	movw	r10, r24
     4aa:	7a 01       	movw	r14, r20
     4ac:	12 2f       	mov	r17, r18
     4ae:	1b df       	rcall	.-458    	; 0x2e6 <waitForNotBusy>
     4b0:	1e df       	rcall	.-452    	; 0x2ee <memEnableWrite>
     4b2:	e0 e4       	ldi	r30, 0x40	; 64
     4b4:	f6 e0       	ldi	r31, 0x06	; 6
     4b6:	80 e1       	ldi	r24, 0x10	; 16
     4b8:	85 83       	std	Z+5, r24	; 0x05
     4ba:	86 83       	std	Z+6, r24	; 0x06
     4bc:	82 e0       	ldi	r24, 0x02	; 2
     4be:	ea de       	rcall	.-556    	; 0x294 <sendSPI>
     4c0:	c5 01       	movw	r24, r10
     4c2:	b4 01       	movw	r22, r8
     4c4:	f4 de       	rcall	.-536    	; 0x2ae <memSendAddress>
     4c6:	e7 01       	movw	r28, r14
     4c8:	01 2f       	mov	r16, r17
     4ca:	10 e0       	ldi	r17, 0x00	; 0
     4cc:	0f 5f       	subi	r16, 0xFF	; 255
     4ce:	1f 4f       	sbci	r17, 0xFF	; 255
     4d0:	0e 0d       	add	r16, r14
     4d2:	1f 1d       	adc	r17, r15
     4d4:	89 91       	ld	r24, Y+
     4d6:	de de       	rcall	.-580    	; 0x294 <sendSPI>
     4d8:	c0 17       	cp	r28, r16
     4da:	d1 07       	cpc	r29, r17
     4dc:	d9 f7       	brne	.-10     	; 0x4d4 <memWriteBuff+0x42>
     4de:	80 e1       	ldi	r24, 0x10	; 16
     4e0:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	ff 90       	pop	r15
     4ee:	ef 90       	pop	r14
     4f0:	bf 90       	pop	r11
     4f2:	af 90       	pop	r10
     4f4:	9f 90       	pop	r9
     4f6:	8f 90       	pop	r8
     4f8:	08 95       	ret

000004fa <TESTWriteMem>:
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	c0 e4       	ldi	r28, 0x40	; 64
     502:	d6 e0       	ldi	r29, 0x06	; 6
     504:	10 e1       	ldi	r17, 0x10	; 16
     506:	1d 83       	std	Y+5, r17	; 0x05
     508:	1e 83       	std	Y+6, r17	; 0x06
     50a:	86 e0       	ldi	r24, 0x06	; 6
     50c:	c3 de       	rcall	.-634    	; 0x294 <sendSPI>
     50e:	1d 83       	std	Y+5, r17	; 0x05
     510:	1e 83       	std	Y+6, r17	; 0x06
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	bf de       	rcall	.-642    	; 0x294 <sendSPI>
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	bd de       	rcall	.-646    	; 0x294 <sendSPI>
     51a:	1d 83       	std	Y+5, r17	; 0x05
     51c:	8c ed       	ldi	r24, 0xDC	; 220
     51e:	90 e2       	ldi	r25, 0x20	; 32
     520:	0e 94 5f 15 	call	0x2abe	; 0x2abe <puts>
     524:	d0 de       	rcall	.-608    	; 0x2c6 <getMemStatus>
     526:	1f 92       	push	r1
     528:	8f 93       	push	r24
     52a:	8b ee       	ldi	r24, 0xEB	; 235
     52c:	90 e2       	ldi	r25, 0x20	; 32
     52e:	9f 93       	push	r25
     530:	8f 93       	push	r24
     532:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <printf>
     536:	8c ef       	ldi	r24, 0xFC	; 252
     538:	90 e2       	ldi	r25, 0x20	; 32
     53a:	0e 94 5f 15 	call	0x2abe	; 0x2abe <puts>
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	70 e1       	ldi	r23, 0x10	; 16
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	ff de       	rcall	.-514    	; 0x346 <memRead256ToStdOut>
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	08 95       	ret

00000558 <returnChipId>:


void returnChipId()
{
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
	printf("Reading Chip Id\r\n");
     55e:	8d e1       	ldi	r24, 0x1D	; 29
     560:	91 e2       	ldi	r25, 0x21	; 33
     562:	0e 94 5f 15 	call	0x2abe	; 0x2abe <puts>
	waitForNotBusy();
     566:	bf de       	rcall	.-642    	; 0x2e6 <waitForNotBusy>
	memEnableWrite();
     568:	c2 de       	rcall	.-636    	; 0x2ee <memEnableWrite>
	CS_DISABLE();
     56a:	c0 e4       	ldi	r28, 0x40	; 64
     56c:	d6 e0       	ldi	r29, 0x06	; 6
     56e:	10 e1       	ldi	r17, 0x10	; 16
     570:	1d 83       	std	Y+5, r17	; 0x05
	CS_ENABLE();
     572:	1e 83       	std	Y+6, r17	; 0x06
	
	sendSPI(MEM_READ_ID);
     574:	8f e9       	ldi	r24, 0x9F	; 159
     576:	8e de       	rcall	.-740    	; 0x294 <sendSPI>
	udi_cdc_putc(sendDummy());
     578:	97 de       	rcall	.-722    	; 0x2a8 <sendDummy>
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	ae d5       	rcall	.+2908   	; 0x10da <udi_cdc_putc>
	udi_cdc_putc(sendDummy());
     57e:	94 de       	rcall	.-728    	; 0x2a8 <sendDummy>
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	ab d5       	rcall	.+2902   	; 0x10da <udi_cdc_putc>
	udi_cdc_putc(sendDummy());
     584:	91 de       	rcall	.-734    	; 0x2a8 <sendDummy>
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	a8 d5       	rcall	.+2896   	; 0x10da <udi_cdc_putc>
	
	CS_DISABLE();
     58a:	1d 83       	std	Y+5, r17	; 0x05
	return;
}
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	1f 91       	pop	r17
     592:	08 95       	ret

00000594 <eraseChip>:

void eraseChip()
{
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
	printf("Erasing Chip\r\n");
     59a:	8e e2       	ldi	r24, 0x2E	; 46
     59c:	91 e2       	ldi	r25, 0x21	; 33
     59e:	0e 94 5f 15 	call	0x2abe	; 0x2abe <puts>
	waitForNotBusy();
     5a2:	a1 de       	rcall	.-702    	; 0x2e6 <waitForNotBusy>
	
	CS_DISABLE();
     5a4:	c0 e4       	ldi	r28, 0x40	; 64
     5a6:	d6 e0       	ldi	r29, 0x06	; 6
     5a8:	10 e1       	ldi	r17, 0x10	; 16
     5aa:	1d 83       	std	Y+5, r17	; 0x05
	CS_ENABLE();
     5ac:	1e 83       	std	Y+6, r17	; 0x06
	
	sendSPI(MEM_CHIP_ERASE);
     5ae:	87 ec       	ldi	r24, 0xC7	; 199
     5b0:	71 de       	rcall	.-798    	; 0x294 <sendSPI>
	
	waitForNotBusy();
     5b2:	99 de       	rcall	.-718    	; 0x2e6 <waitForNotBusy>
	
	uart_putchar(0xFF, 0x00);
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	8f ef       	ldi	r24, 0xFF	; 255
     5ba:	4d de       	rcall	.-870    	; 0x256 <uart_putchar>
	
	CS_DISABLE();
     5bc:	1d 83       	std	Y+5, r17	; 0x05
	return;
	
}
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	1f 91       	pop	r17
     5c4:	08 95       	ret

000005c6 <readText>:

void readText()
{
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
	uint16_t len;
	
	memReadToBuffer(0x00000000, _rxData, 2);
     5ca:	22 e0       	ldi	r18, 0x02	; 2
     5cc:	41 e1       	ldi	r20, 0x11	; 17
     5ce:	54 e2       	ldi	r21, 0x24	; 36
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	cb 01       	movw	r24, r22
     5d6:	2a df       	rcall	.-428    	; 0x42c <memReadToBuffer>
	_rxDataLen = ((uint32_t)(_rxData[0] << 8)) + (uint32_t)_rxData[1];
     5d8:	c1 e1       	ldi	r28, 0x11	; 17
     5da:	d4 e2       	ldi	r29, 0x24	; 36
     5dc:	88 81       	ld	r24, Y
     5de:	29 81       	ldd	r18, Y+1	; 0x01
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	98 2f       	mov	r25, r24
     5e4:	88 27       	eor	r24, r24
     5e6:	09 2e       	mov	r0, r25
     5e8:	00 0c       	add	r0, r0
     5ea:	aa 0b       	sbc	r26, r26
     5ec:	bb 0b       	sbc	r27, r27
     5ee:	82 0f       	add	r24, r18
     5f0:	91 1d       	adc	r25, r1
     5f2:	a1 1d       	adc	r26, r1
     5f4:	b1 1d       	adc	r27, r1
     5f6:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <_rxDataLen>
     5fa:	90 93 a7 21 	sts	0x21A7, r25	; 0x8021a7 <_rxDataLen+0x1>
     5fe:	a0 93 a8 21 	sts	0x21A8, r26	; 0x8021a8 <_rxDataLen+0x2>
     602:	b0 93 a9 21 	sts	0x21A9, r27	; 0x8021a9 <_rxDataLen+0x3>
	_rxDataPos = 2;
     606:	82 e0       	ldi	r24, 0x02	; 2
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <__data_end>
     612:	90 93 a3 21 	sts	0x21A3, r25	; 0x8021a3 <__data_end+0x1>
     616:	a0 93 a4 21 	sts	0x21A4, r26	; 0x8021a4 <__data_end+0x2>
     61a:	b0 93 a5 21 	sts	0x21A5, r27	; 0x8021a5 <__data_end+0x3>
	
	udi_cdc_putc(_rxData[0]);
     61e:	88 81       	ld	r24, Y
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	5b d5       	rcall	.+2742   	; 0x10da <udi_cdc_putc>
	udi_cdc_putc(_rxData[1]);
     624:	89 81       	ldd	r24, Y+1	; 0x01
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	58 d5       	rcall	.+2736   	; 0x10da <udi_cdc_putc>
	
	printf("Reading 0x%02x 0x%02x %lu chars\r\n", _rxData[0], _rxData[1], _rxDataLen);
     62a:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <_rxDataLen>
     62e:	90 91 a7 21 	lds	r25, 0x21A7	; 0x8021a7 <_rxDataLen+0x1>
     632:	a0 91 a8 21 	lds	r26, 0x21A8	; 0x8021a8 <_rxDataLen+0x2>
     636:	b0 91 a9 21 	lds	r27, 0x21A9	; 0x8021a9 <_rxDataLen+0x3>
     63a:	39 81       	ldd	r19, Y+1	; 0x01
     63c:	28 81       	ld	r18, Y
     63e:	bf 93       	push	r27
     640:	af 93       	push	r26
     642:	9f 93       	push	r25
     644:	8f 93       	push	r24
     646:	1f 92       	push	r1
     648:	3f 93       	push	r19
     64a:	1f 92       	push	r1
     64c:	2f 93       	push	r18
     64e:	8c e3       	ldi	r24, 0x3C	; 60
     650:	91 e2       	ldi	r25, 0x21	; 33
     652:	9f 93       	push	r25
     654:	8f 93       	push	r24
     656:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <printf>
	
	while(1)
	{
		if (_rxDataLen < MEM_BLOCK_SIZE) //Less than MEM_BLOCK_SIZE because that's the size of our buffer
     65a:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <_rxDataLen>
     65e:	90 91 a7 21 	lds	r25, 0x21A7	; 0x8021a7 <_rxDataLen+0x1>
     662:	a0 91 a8 21 	lds	r26, 0x21A8	; 0x8021a8 <_rxDataLen+0x2>
     666:	b0 91 a9 21 	lds	r27, 0x21A9	; 0x8021a9 <_rxDataLen+0x3>
     66a:	2d b7       	in	r18, 0x3d	; 61
     66c:	3e b7       	in	r19, 0x3e	; 62
     66e:	26 5f       	subi	r18, 0xF6	; 246
     670:	3f 4f       	sbci	r19, 0xFF	; 255
     672:	2d bf       	out	0x3d, r18	; 61
     674:	3e bf       	out	0x3e, r19	; 62
     676:	8f 3f       	cpi	r24, 0xFF	; 255
     678:	91 05       	cpc	r25, r1
     67a:	a1 05       	cpc	r26, r1
     67c:	b1 05       	cpc	r27, r1
     67e:	09 f0       	breq	.+2      	; 0x682 <readText+0xbc>
     680:	68 f5       	brcc	.+90     	; 0x6dc <readText+0x116>
		{
			if (_rxDataLen > 0)
     682:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <_rxDataLen>
     686:	90 91 a7 21 	lds	r25, 0x21A7	; 0x8021a7 <_rxDataLen+0x1>
     68a:	a0 91 a8 21 	lds	r26, 0x21A8	; 0x8021a8 <_rxDataLen+0x2>
     68e:	b0 91 a9 21 	lds	r27, 0x21A9	; 0x8021a9 <_rxDataLen+0x3>
     692:	89 2b       	or	r24, r25
     694:	8a 2b       	or	r24, r26
     696:	8b 2b       	or	r24, r27
     698:	09 f4       	brne	.+2      	; 0x69c <readText+0xd6>
     69a:	68 c0       	rjmp	.+208    	; 0x76c <readText+0x1a6>
			{
				
				//printf("Reading ending %u bytes from 0x%08x\r\n",len, _rxDataPos);
				memReadToBuffer(_rxDataPos, _rxData, _rxDataLen);
     69c:	20 91 a6 21 	lds	r18, 0x21A6	; 0x8021a6 <_rxDataLen>
     6a0:	30 91 a7 21 	lds	r19, 0x21A7	; 0x8021a7 <_rxDataLen+0x1>
     6a4:	40 91 a8 21 	lds	r20, 0x21A8	; 0x8021a8 <_rxDataLen+0x2>
     6a8:	50 91 a9 21 	lds	r21, 0x21A9	; 0x8021a9 <_rxDataLen+0x3>
     6ac:	60 91 a2 21 	lds	r22, 0x21A2	; 0x8021a2 <__data_end>
     6b0:	70 91 a3 21 	lds	r23, 0x21A3	; 0x8021a3 <__data_end+0x1>
     6b4:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <__data_end+0x2>
     6b8:	90 91 a5 21 	lds	r25, 0x21A5	; 0x8021a5 <__data_end+0x3>
     6bc:	41 e1       	ldi	r20, 0x11	; 17
     6be:	54 e2       	ldi	r21, 0x24	; 36
     6c0:	b5 de       	rcall	.-662    	; 0x42c <memReadToBuffer>
				udi_cdc_multi_write_buf(0, _rxData, _rxDataLen);
     6c2:	40 91 a6 21 	lds	r20, 0x21A6	; 0x8021a6 <_rxDataLen>
     6c6:	50 91 a7 21 	lds	r21, 0x21A7	; 0x8021a7 <_rxDataLen+0x1>
     6ca:	60 91 a8 21 	lds	r22, 0x21A8	; 0x8021a8 <_rxDataLen+0x2>
     6ce:	70 91 a9 21 	lds	r23, 0x21A9	; 0x8021a9 <_rxDataLen+0x3>
     6d2:	61 e1       	ldi	r22, 0x11	; 17
     6d4:	74 e2       	ldi	r23, 0x24	; 36
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	04 d5       	rcall	.+2568   	; 0x10e2 <udi_cdc_multi_write_buf>
     6da:	48 c0       	rjmp	.+144    	; 0x76c <readText+0x1a6>
			return;	
		}
		else
		{		
			//printf("Reading 256 bytes from 0x%08x\r\n", _rxDataPos);	
			memReadToBuffer(_rxDataPos, _rxData, 255);
     6dc:	60 91 a2 21 	lds	r22, 0x21A2	; 0x8021a2 <__data_end>
     6e0:	70 91 a3 21 	lds	r23, 0x21A3	; 0x8021a3 <__data_end+0x1>
     6e4:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <__data_end+0x2>
     6e8:	90 91 a5 21 	lds	r25, 0x21A5	; 0x8021a5 <__data_end+0x3>
     6ec:	2f ef       	ldi	r18, 0xFF	; 255
     6ee:	41 e1       	ldi	r20, 0x11	; 17
     6f0:	54 e2       	ldi	r21, 0x24	; 36
     6f2:	9c de       	rcall	.-712    	; 0x42c <memReadToBuffer>
			_rxDataLen -= 256;
     6f4:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <_rxDataLen>
     6f8:	90 91 a7 21 	lds	r25, 0x21A7	; 0x8021a7 <_rxDataLen+0x1>
     6fc:	a0 91 a8 21 	lds	r26, 0x21A8	; 0x8021a8 <_rxDataLen+0x2>
     700:	b0 91 a9 21 	lds	r27, 0x21A9	; 0x8021a9 <_rxDataLen+0x3>
     704:	91 50       	subi	r25, 0x01	; 1
     706:	a1 09       	sbc	r26, r1
     708:	b1 09       	sbc	r27, r1
     70a:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <_rxDataLen>
     70e:	90 93 a7 21 	sts	0x21A7, r25	; 0x8021a7 <_rxDataLen+0x1>
     712:	a0 93 a8 21 	sts	0x21A8, r26	; 0x8021a8 <_rxDataLen+0x2>
     716:	b0 93 a9 21 	sts	0x21A9, r27	; 0x8021a9 <_rxDataLen+0x3>
			_rxDataPos+=256;
     71a:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <__data_end>
     71e:	90 91 a3 21 	lds	r25, 0x21A3	; 0x8021a3 <__data_end+0x1>
     722:	a0 91 a4 21 	lds	r26, 0x21A4	; 0x8021a4 <__data_end+0x2>
     726:	b0 91 a5 21 	lds	r27, 0x21A5	; 0x8021a5 <__data_end+0x3>
     72a:	9f 5f       	subi	r25, 0xFF	; 255
     72c:	af 4f       	sbci	r26, 0xFF	; 255
     72e:	bf 4f       	sbci	r27, 0xFF	; 255
     730:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <__data_end>
     734:	90 93 a3 21 	sts	0x21A3, r25	; 0x8021a3 <__data_end+0x1>
     738:	a0 93 a4 21 	sts	0x21A4, r26	; 0x8021a4 <__data_end+0x2>
     73c:	b0 93 a5 21 	sts	0x21A5, r27	; 0x8021a5 <__data_end+0x3>
			udi_cdc_multi_write_buf(0, _rxData, 256);			
     740:	40 e0       	ldi	r20, 0x00	; 0
     742:	51 e0       	ldi	r21, 0x01	; 1
     744:	61 e1       	ldi	r22, 0x11	; 17
     746:	74 e2       	ldi	r23, 0x24	; 36
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	cb d4       	rcall	.+2454   	; 0x10e2 <udi_cdc_multi_write_buf>
	
	printf("Reading 0x%02x 0x%02x %lu chars\r\n", _rxData[0], _rxData[1], _rxDataLen);
	
	while(1)
	{
		if (_rxDataLen < MEM_BLOCK_SIZE) //Less than MEM_BLOCK_SIZE because that's the size of our buffer
     74c:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <_rxDataLen>
     750:	90 91 a7 21 	lds	r25, 0x21A7	; 0x8021a7 <_rxDataLen+0x1>
     754:	a0 91 a8 21 	lds	r26, 0x21A8	; 0x8021a8 <_rxDataLen+0x2>
     758:	b0 91 a9 21 	lds	r27, 0x21A9	; 0x8021a9 <_rxDataLen+0x3>
     75c:	8f 3f       	cpi	r24, 0xFF	; 255
     75e:	91 05       	cpc	r25, r1
     760:	a1 05       	cpc	r26, r1
     762:	b1 05       	cpc	r27, r1
     764:	11 f0       	breq	.+4      	; 0x76a <readText+0x1a4>
     766:	08 f0       	brcs	.+2      	; 0x76a <readText+0x1a4>
     768:	b9 cf       	rjmp	.-142    	; 0x6dc <readText+0x116>
     76a:	8b cf       	rjmp	.-234    	; 0x682 <readText+0xbc>
			_rxDataPos+=256;
			udi_cdc_multi_write_buf(0, _rxData, 256);			
		}
	}
	
}
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <my_callback_cdc_enable>:
}

bool my_callback_cdc_enable(void)
{
	return true;
}
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	08 95       	ret

00000776 <my_callback_cdc_disable>:

void my_callback_cdc_disable(void)
{
     776:	08 95       	ret

00000778 <my_callback_rx_notify>:

}

void my_callback_rx_notify(uint8_t port)
{
     778:	ef 92       	push	r14
     77a:	ff 92       	push	r15
     77c:	0f 93       	push	r16
     77e:	1f 93       	push	r17
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	cd b7       	in	r28, 0x3d	; 61
     786:	de b7       	in	r29, 0x3e	; 62
     788:	c0 54       	subi	r28, 0x40	; 64
     78a:	d1 09       	sbc	r29, r1
     78c:	cd bf       	out	0x3d, r28	; 61
     78e:	de bf       	out	0x3e, r29	; 62
	//return;
	uint16_t bytesRead = 0;
	uint8_t bytes[UDI_CDC_COMM_EP_SIZE]; //UDI_CDC_COMM_EP_SIZE is the max size of the number of bytes that will be received at once.
	uint8_t bytesLeft = 0;
	
	if (!_currentCommand)
     790:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <_currentCommand>
     794:	81 11       	cpse	r24, r1
     796:	28 c0       	rjmp	.+80     	; 0x7e8 <my_callback_rx_notify+0x70>
	{
		udi_cdc_read_no_polling(bytes, 1);
     798:	61 e0       	ldi	r22, 0x01	; 1
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	ce 01       	movw	r24, r28
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	b5 d3       	rcall	.+1898   	; 0xf0c <udi_cdc_read_no_polling>
		_currentCommand =  bytes[0];
     7a2:	89 81       	ldd	r24, Y+1	; 0x01
     7a4:	80 93 ab 21 	sts	0x21AB, r24	; 0x8021ab <_currentCommand>
		_rxDataLen = 0;
     7a8:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <_rxDataLen>
     7ac:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <_rxDataLen+0x1>
     7b0:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <_rxDataLen+0x2>
     7b4:	10 92 a9 21 	sts	0x21A9, r1	; 0x8021a9 <_rxDataLen+0x3>
		_rxDataPos = 0;	
     7b8:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <__data_end>
     7bc:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <__data_end+0x1>
     7c0:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <__data_end+0x2>
     7c4:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <__data_end+0x3>
		_rxIndex = 0;
     7c8:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <_rxIndex>
		printf("Cmd: 0x%02x\r\n", _currentCommand);
     7cc:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <_currentCommand>
     7d0:	1f 92       	push	r1
     7d2:	8f 93       	push	r24
     7d4:	8e e5       	ldi	r24, 0x5E	; 94
     7d6:	91 e2       	ldi	r25, 0x21	; 33
     7d8:	9f 93       	push	r25
     7da:	8f 93       	push	r24
     7dc:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <printf>
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
	}
	
	bytesRead = udi_cdc_read_no_polling(bytes, UDI_CDC_COMM_EP_SIZE);
     7e8:	60 e4       	ldi	r22, 0x40	; 64
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	ce 01       	movw	r24, r28
     7ee:	01 96       	adiw	r24, 0x01	; 1
     7f0:	8d d3       	rcall	.+1818   	; 0xf0c <udi_cdc_read_no_polling>
     7f2:	8c 01       	movw	r16, r24
	//printf("RX Received %u bytes\r\n", bytesRead);
		


		
	switch(_currentCommand)
     7f4:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <_currentCommand>
     7f8:	80 31       	cpi	r24, 0x10	; 16
     7fa:	09 f0       	breq	.+2      	; 0x7fe <my_callback_rx_notify+0x86>
     7fc:	f4 c0       	rjmp	.+488    	; 0x9e6 <my_callback_rx_notify+0x26e>
		case RX_WRITE_TEXT:
			//printf("write data\r\n");
			
			//This is the way we detect the first read through. Even if the lenght being sent is 0, we will be stopping here anyways.
			//NOTE: If this is unrelyable, we should include a state flag that indicates this is the first time through.
			if (bytesRead > 2 && _rxDataLen == 0)
     7fe:	03 30       	cpi	r16, 0x03	; 3
     800:	11 05       	cpc	r17, r1
     802:	08 f4       	brcc	.+2      	; 0x806 <my_callback_rx_notify+0x8e>
     804:	41 c0       	rjmp	.+130    	; 0x888 <my_callback_rx_notify+0x110>
     806:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <_rxDataLen>
     80a:	90 91 a7 21 	lds	r25, 0x21A7	; 0x8021a7 <_rxDataLen+0x1>
     80e:	a0 91 a8 21 	lds	r26, 0x21A8	; 0x8021a8 <_rxDataLen+0x2>
     812:	b0 91 a9 21 	lds	r27, 0x21A9	; 0x8021a9 <_rxDataLen+0x3>
     816:	89 2b       	or	r24, r25
     818:	8a 2b       	or	r24, r26
     81a:	8b 2b       	or	r24, r27
     81c:	a9 f5       	brne	.+106    	; 0x888 <my_callback_rx_notify+0x110>
			{
				_currentCommand = RX_WRITE_TEXT;	//Set the current command
     81e:	80 e1       	ldi	r24, 0x10	; 16
     820:	80 93 ab 21 	sts	0x21AB, r24	; 0x8021ab <_currentCommand>
				memEraseSector(0x00);	//The string is written to the very first sector.
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	cb 01       	movw	r24, r22
     82a:	6f dd       	rcall	.-1314   	; 0x30a <memEraseSector>
				waitForNotBusy();
     82c:	5c dd       	rcall	.-1352   	; 0x2e6 <waitForNotBusy>
				_rxDataLen = (uint32_t)(bytes[0] << 8) + (uint32_t)bytes[1]; //Get the length of the text, first time through,  byte 0 and 1 should be the 16bit length
     82e:	89 81       	ldd	r24, Y+1	; 0x01
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	98 2f       	mov	r25, r24
     834:	88 27       	eor	r24, r24
     836:	09 2e       	mov	r0, r25
     838:	00 0c       	add	r0, r0
     83a:	aa 0b       	sbc	r26, r26
     83c:	bb 0b       	sbc	r27, r27
     83e:	2a 81       	ldd	r18, Y+2	; 0x02
     840:	82 0f       	add	r24, r18
     842:	91 1d       	adc	r25, r1
     844:	a1 1d       	adc	r26, r1
     846:	b1 1d       	adc	r27, r1
     848:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <_rxDataLen>
     84c:	90 93 a7 21 	sts	0x21A7, r25	; 0x8021a7 <_rxDataLen+0x1>
     850:	a0 93 a8 21 	sts	0x21A8, r26	; 0x8021a8 <_rxDataLen+0x2>
     854:	b0 93 a9 21 	sts	0x21A9, r27	; 0x8021a9 <_rxDataLen+0x3>
			
				
				printf("Len: %lu\r\n", _rxDataLen);
     858:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <_rxDataLen>
     85c:	90 91 a7 21 	lds	r25, 0x21A7	; 0x8021a7 <_rxDataLen+0x1>
     860:	a0 91 a8 21 	lds	r26, 0x21A8	; 0x8021a8 <_rxDataLen+0x2>
     864:	b0 91 a9 21 	lds	r27, 0x21A9	; 0x8021a9 <_rxDataLen+0x3>
     868:	bf 93       	push	r27
     86a:	af 93       	push	r26
     86c:	9f 93       	push	r25
     86e:	8f 93       	push	r24
     870:	8c e6       	ldi	r24, 0x6C	; 108
     872:	91 e2       	ldi	r25, 0x21	; 33
     874:	9f 93       	push	r25
     876:	8f 93       	push	r24
     878:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <printf>
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0

					
			}

			//Here we have to split the array of data read between the current memory block and the next one.
			if ((bytesRead + _rxIndex) >= MEM_BLOCK_SIZE)
     888:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <_rxIndex>
     88c:	98 01       	movw	r18, r16
     88e:	28 0f       	add	r18, r24
     890:	31 1d       	adc	r19, r1
     892:	2f 3f       	cpi	r18, 0xFF	; 255
     894:	31 05       	cpc	r19, r1
     896:	b1 f1       	breq	.+108    	; 0x904 <my_callback_rx_notify+0x18c>
     898:	a8 f1       	brcs	.+106    	; 0x904 <my_callback_rx_notify+0x18c>
			{
				//_rxData + _rxIndex is pointer math
				//This should fill our _rxData buffer (which is the same size as a block) so we should write the block now and update the _rxDataPos
				bytesLeft = MEM_BLOCK_SIZE - _rxIndex;
     89a:	e0 90 aa 21 	lds	r14, 0x21AA	; 0x8021aa <_rxIndex>
     89e:	e1 94       	neg	r14
				memcpy(_rxData + _rxIndex, bytes, bytesLeft);
     8a0:	f1 2c       	mov	r15, r1
     8a2:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <_rxIndex>
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	a7 01       	movw	r20, r14
     8aa:	be 01       	movw	r22, r28
     8ac:	6f 5f       	subi	r22, 0xFF	; 255
     8ae:	7f 4f       	sbci	r23, 0xFF	; 255
     8b0:	8f 5e       	subi	r24, 0xEF	; 239
     8b2:	9b 4d       	sbci	r25, 0xDB	; 219
     8b4:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <memcpy>
				_rxIndex += bytesRead; //_rxIndex is 8bit. if _rxIndex = 192, then _rxIndex + 64 would roll over to 0
     8b8:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <_rxIndex>
     8bc:	80 0f       	add	r24, r16
     8be:	80 93 aa 21 	sts	0x21AA, r24	; 0x8021aa <_rxIndex>
				
				//printf("Writing 256 bytes to 0x%08x\r\n", (_rxDataPos & 0xFFFFFF00));
				memWriteBuff((_rxDataPos & 0xFFFFFF00), _rxData, MEM_BLOCK_SIZE - 1);
     8c2:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <__data_end>
     8c6:	90 91 a3 21 	lds	r25, 0x21A3	; 0x8021a3 <__data_end+0x1>
     8ca:	a0 91 a4 21 	lds	r26, 0x21A4	; 0x8021a4 <__data_end+0x2>
     8ce:	b0 91 a5 21 	lds	r27, 0x21A5	; 0x8021a5 <__data_end+0x3>
     8d2:	bc 01       	movw	r22, r24
     8d4:	cd 01       	movw	r24, r26
     8d6:	66 27       	eor	r22, r22
     8d8:	2f ef       	ldi	r18, 0xFF	; 255
     8da:	41 e1       	ldi	r20, 0x11	; 17
     8dc:	54 e2       	ldi	r21, 0x24	; 36
     8de:	d9 dd       	rcall	.-1102   	; 0x492 <memWriteBuff>
	
				
				//Because _rxIndex would have rolled over to 0 if we were on a factor of 256, and we are already here because the current ammount of bytes read + the current index is greater or equal to our Block size
				if (_rxIndex != 0)
     8e0:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <_rxIndex>
     8e4:	88 23       	and	r24, r24
     8e6:	f1 f0       	breq	.+60     	; 0x924 <my_callback_rx_notify+0x1ac>
				{
					//We are copying what is left in bytes and bytes + bytesLeft is pointer math
					memcpy(_rxData, bytes + bytesLeft, bytesRead - bytesLeft);
     8e8:	a8 01       	movw	r20, r16
     8ea:	4e 19       	sub	r20, r14
     8ec:	5f 09       	sbc	r21, r15
     8ee:	61 e0       	ldi	r22, 0x01	; 1
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	6c 0f       	add	r22, r28
     8f4:	7d 1f       	adc	r23, r29
     8f6:	6e 0d       	add	r22, r14
     8f8:	7f 1d       	adc	r23, r15
     8fa:	81 e1       	ldi	r24, 0x11	; 17
     8fc:	94 e2       	ldi	r25, 0x24	; 36
     8fe:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <memcpy>
     902:	10 c0       	rjmp	.+32     	; 0x924 <my_callback_rx_notify+0x1ac>
				}
				
			}
			else
			{
				memcpy(_rxData + _rxIndex, bytes, bytesRead);
     904:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <_rxIndex>
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	a8 01       	movw	r20, r16
     90c:	be 01       	movw	r22, r28
     90e:	6f 5f       	subi	r22, 0xFF	; 255
     910:	7f 4f       	sbci	r23, 0xFF	; 255
     912:	8f 5e       	subi	r24, 0xEF	; 239
     914:	9b 4d       	sbci	r25, 0xDB	; 219
     916:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <memcpy>
				_rxIndex += bytesRead; 
     91a:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <_rxIndex>
     91e:	80 0f       	add	r24, r16
     920:	80 93 aa 21 	sts	0x21AA, r24	; 0x8021aa <_rxIndex>
			}
			
			_rxDataPos += bytesRead;
     924:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <__data_end>
     928:	90 91 a3 21 	lds	r25, 0x21A3	; 0x8021a3 <__data_end+0x1>
     92c:	a0 91 a4 21 	lds	r26, 0x21A4	; 0x8021a4 <__data_end+0x2>
     930:	b0 91 a5 21 	lds	r27, 0x21A5	; 0x8021a5 <__data_end+0x3>
     934:	80 0f       	add	r24, r16
     936:	91 1f       	adc	r25, r17
     938:	a1 1d       	adc	r26, r1
     93a:	b1 1d       	adc	r27, r1
     93c:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <__data_end>
     940:	90 93 a3 21 	sts	0x21A3, r25	; 0x8021a3 <__data_end+0x1>
     944:	a0 93 a4 21 	sts	0x21A4, r26	; 0x8021a4 <__data_end+0x2>
     948:	b0 93 a5 21 	sts	0x21A5, r27	; 0x8021a5 <__data_end+0x3>
			printf("Pos %lu\r\n", _rxDataPos);
     94c:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <__data_end>
     950:	90 91 a3 21 	lds	r25, 0x21A3	; 0x8021a3 <__data_end+0x1>
     954:	a0 91 a4 21 	lds	r26, 0x21A4	; 0x8021a4 <__data_end+0x2>
     958:	b0 91 a5 21 	lds	r27, 0x21A5	; 0x8021a5 <__data_end+0x3>
     95c:	bf 93       	push	r27
     95e:	af 93       	push	r26
     960:	9f 93       	push	r25
     962:	8f 93       	push	r24
     964:	87 e7       	ldi	r24, 0x77	; 119
     966:	91 e2       	ldi	r25, 0x21	; 33
     968:	9f 93       	push	r25
     96a:	8f 93       	push	r24
     96c:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <printf>
			
			//We have the whole message so just write it and be done with the command. Subtract 2 because the len are at the beginning
			if ((_rxDataPos - 2) == _rxDataLen)
     970:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <__data_end>
     974:	90 91 a3 21 	lds	r25, 0x21A3	; 0x8021a3 <__data_end+0x1>
     978:	a0 91 a4 21 	lds	r26, 0x21A4	; 0x8021a4 <__data_end+0x2>
     97c:	b0 91 a5 21 	lds	r27, 0x21A5	; 0x8021a5 <__data_end+0x3>
     980:	40 91 a6 21 	lds	r20, 0x21A6	; 0x8021a6 <_rxDataLen>
     984:	50 91 a7 21 	lds	r21, 0x21A7	; 0x8021a7 <_rxDataLen+0x1>
     988:	60 91 a8 21 	lds	r22, 0x21A8	; 0x8021a8 <_rxDataLen+0x2>
     98c:	70 91 a9 21 	lds	r23, 0x21A9	; 0x8021a9 <_rxDataLen+0x3>
     990:	02 97       	sbiw	r24, 0x02	; 2
     992:	a1 09       	sbc	r26, r1
     994:	b1 09       	sbc	r27, r1
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	84 17       	cp	r24, r20
     9a4:	95 07       	cpc	r25, r21
     9a6:	a6 07       	cpc	r26, r22
     9a8:	b7 07       	cpc	r27, r23
     9aa:	e9 f4       	brne	.+58     	; 0x9e6 <my_callback_rx_notify+0x26e>
			{
				//Write the last bit of data
				memWriteBuff((_rxDataPos & 0xFFFFFF00), _rxData, _rxIndex);
     9ac:	20 91 aa 21 	lds	r18, 0x21AA	; 0x8021aa <_rxIndex>
     9b0:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <__data_end>
     9b4:	90 91 a3 21 	lds	r25, 0x21A3	; 0x8021a3 <__data_end+0x1>
     9b8:	a0 91 a4 21 	lds	r26, 0x21A4	; 0x8021a4 <__data_end+0x2>
     9bc:	b0 91 a5 21 	lds	r27, 0x21A5	; 0x8021a5 <__data_end+0x3>
     9c0:	bc 01       	movw	r22, r24
     9c2:	cd 01       	movw	r24, r26
     9c4:	66 27       	eor	r22, r22
     9c6:	41 e1       	ldi	r20, 0x11	; 17
     9c8:	54 e2       	ldi	r21, 0x24	; 36
     9ca:	63 dd       	rcall	.-1338   	; 0x492 <memWriteBuff>
				//printf("Writing %u bytes from index %u to 0x%08x\r\n",_rxIndex, (_rxDataPos & 0xFFFFFF00));
				//Send ack byte;
				udi_cdc_putc(0xFF);
     9cc:	8f ef       	ldi	r24, 0xFF	; 255
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	84 d3       	rcall	.+1800   	; 0x10da <udi_cdc_putc>
				//printf("Done writing %lu bytes\r\n", _rxDataPos);
				_currentCommand = 0;	
     9d2:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <_currentCommand>
				_rxDataPos = 0;
     9d6:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <__data_end>
     9da:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <__data_end+0x1>
     9de:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <__data_end+0x2>
     9e2:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <__data_end+0x3>
	}

	
	

}
     9e6:	c0 5c       	subi	r28, 0xC0	; 192
     9e8:	df 4f       	sbci	r29, 0xFF	; 255
     9ea:	cd bf       	out	0x3d, r28	; 61
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	ff 90       	pop	r15
     9f8:	ef 90       	pop	r14
     9fa:	08 95       	ret

000009fc <my_callback_tx_empty_notify>:

void my_callback_tx_empty_notify(uint8_t port)
{
	_txEmpty = 0xFF;
     9fc:	8f ef       	ldi	r24, 0xFF	; 255
     9fe:	80 93 11 25 	sts	0x2511, r24	; 0x802511 <_txEmpty>
     a02:	08 95       	ret

00000a04 <main>:


int main(void)
{

	CS_DISABLE();
     a04:	80 e1       	ldi	r24, 0x10	; 16
     a06:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	
	cli();
     a0a:	f8 94       	cli

	sysclk_init();
     a0c:	0e 94 77 14 	call	0x28ee	; 0x28ee <sysclk_init>
	udc_start();
     a10:	c1 d4       	rcall	.+2434   	; 0x1394 <udc_start>
	initSPI();
     a12:	29 dc       	rcall	.-1966   	; 0x266 <initSPI>
	initDebugUART();
     a14:	36 dc       	rcall	.-1940   	; 0x282 <initDebugUART>
	
	stdout = &mystdout;
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e2       	ldi	r25, 0x20	; 32
     a1a:	80 93 2a 25 	sts	0x252A, r24	; 0x80252a <__iob+0x2>
     a1e:	90 93 2b 25 	sts	0x252B, r25	; 0x80252b <__iob+0x3>
	
	irq_initialize_vectors();
     a22:	87 e0       	ldi	r24, 0x07	; 7
     a24:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>


	sei();
     a28:	78 94       	sei


	printf("Started\r\n");
     a2a:	81 e8       	ldi	r24, 0x81	; 129
     a2c:	91 e2       	ldi	r25, 0x21	; 33
     a2e:	0e 94 5f 15 	call	0x2abe	; 0x2abe <puts>


	while(1)
	{
		if (_runTest)
     a32:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <_runTest>
     a36:	88 23       	and	r24, r24
     a38:	19 f0       	breq	.+6      	; 0xa40 <main+0x3c>
		{
			TESTWriteMem();
     a3a:	5f dd       	rcall	.-1346   	; 0x4fa <TESTWriteMem>
			_runTest = 0x00;
     a3c:	10 92 ac 21 	sts	0x21AC, r1	; 0x8021ac <_runTest>
		}
		
		switch(_currentCommand)
     a40:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <_currentCommand>
     a44:	81 36       	cpi	r24, 0x61	; 97
     a46:	a1 f0       	breq	.+40     	; 0xa70 <main+0x6c>
     a48:	58 f4       	brcc	.+22     	; 0xa60 <main+0x5c>
     a4a:	81 31       	cpi	r24, 0x11	; 17
     a4c:	e1 f0       	breq	.+56     	; 0xa86 <main+0x82>
     a4e:	18 f4       	brcc	.+6      	; 0xa56 <main+0x52>
     a50:	81 30       	cpi	r24, 0x01	; 1
     a52:	a9 f0       	breq	.+42     	; 0xa7e <main+0x7a>
     a54:	ee cf       	rjmp	.-36     	; 0xa32 <main+0x2e>
     a56:	81 32       	cpi	r24, 0x21	; 33
     a58:	f1 f0       	breq	.+60     	; 0xa96 <main+0x92>
     a5a:	80 33       	cpi	r24, 0x30	; 48
     a5c:	f9 f0       	breq	.+62     	; 0xa9c <main+0x98>
     a5e:	e9 cf       	rjmp	.-46     	; 0xa32 <main+0x2e>
     a60:	83 36       	cpi	r24, 0x63	; 99
     a62:	89 f0       	breq	.+34     	; 0xa86 <main+0x82>
     a64:	60 f0       	brcs	.+24     	; 0xa7e <main+0x7a>
     a66:	84 36       	cpi	r24, 0x64	; 100
     a68:	b1 f0       	breq	.+44     	; 0xa96 <main+0x92>
     a6a:	85 36       	cpi	r24, 0x65	; 101
     a6c:	b9 f0       	breq	.+46     	; 0xa9c <main+0x98>
     a6e:	e1 cf       	rjmp	.-62     	; 0xa32 <main+0x2e>
		{
			case 'a':
				memRead256ToStdOut(0x00000000);
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	cb 01       	movw	r24, r22
     a76:	67 dc       	rcall	.-1842   	; 0x346 <memRead256ToStdOut>
				_currentCommand = 0;
     a78:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <_currentCommand>
				break;
     a7c:	da cf       	rjmp	.-76     	; 0xa32 <main+0x2e>
			case RX_READ_ID:
			case 'b':
				returnChipId();
     a7e:	6c dd       	rcall	.-1320   	; 0x558 <returnChipId>
				_currentCommand = 0;
     a80:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <_currentCommand>
				//printf("chip id returned. _currentCommand reset\r\n");
				break;
     a84:	d6 cf       	rjmp	.-84     	; 0xa32 <main+0x2e>
			case RX_READ_TEXT:
			case 'c':			
				readText();
     a86:	9f dd       	rcall	.-1218   	; 0x5c6 <readText>
				printf("\r\nDone Reading\r\n");
     a88:	8a e8       	ldi	r24, 0x8A	; 138
     a8a:	91 e2       	ldi	r25, 0x21	; 33
     a8c:	0e 94 5f 15 	call	0x2abe	; 0x2abe <puts>
				_currentCommand = 0;
     a90:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <_currentCommand>
				break;
     a94:	ce cf       	rjmp	.-100    	; 0xa32 <main+0x2e>
			case RX_READ_DATA:
			case 'd':			
				_currentCommand = 0;
     a96:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <_currentCommand>
				break;		
     a9a:	cb cf       	rjmp	.-106    	; 0xa32 <main+0x2e>
			case RX_ERASE_ALL:
			case 'e':			
				eraseChip();
     a9c:	7b dd       	rcall	.-1290   	; 0x594 <eraseChip>
				_currentCommand = 0;
     a9e:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <_currentCommand>
				break;
     aa2:	c7 cf       	rjmp	.-114    	; 0xa32 <main+0x2e>

00000aa4 <udi_cdc_comm_disable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
     aa4:	80 91 c2 22 	lds	r24, 0x22C2	; 0x8022c2 <udi_cdc_nb_comm_enabled>
     aa8:	81 50       	subi	r24, 0x01	; 1
     aaa:	80 93 c2 22 	sts	0x22C2, r24	; 0x8022c2 <udi_cdc_nb_comm_enabled>
     aae:	08 95       	ret

00000ab0 <udi_cdc_data_setup>:
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	08 95       	ret

00000ab4 <udi_cdc_getsetting>:
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	08 95       	ret

00000ab8 <udi_cdc_comm_setup>:
     ab8:	80 91 12 25 	lds	r24, 0x2512	; 0x802512 <udd_g_ctrlreq>
     abc:	88 23       	and	r24, r24
     abe:	cc f4       	brge	.+50     	; 0xaf2 <udi_cdc_comm_setup+0x3a>
     ac0:	80 76       	andi	r24, 0x60	; 96
     ac2:	80 32       	cpi	r24, 0x20	; 32
     ac4:	b9 f5       	brne	.+110    	; 0xb34 <udi_cdc_comm_setup+0x7c>
     ac6:	80 91 13 25 	lds	r24, 0x2513	; 0x802513 <udd_g_ctrlreq+0x1>
     aca:	81 32       	cpi	r24, 0x21	; 33
     acc:	a9 f5       	brne	.+106    	; 0xb38 <udi_cdc_comm_setup+0x80>
     ace:	80 91 18 25 	lds	r24, 0x2518	; 0x802518 <udd_g_ctrlreq+0x6>
     ad2:	90 91 19 25 	lds	r25, 0x2519	; 0x802519 <udd_g_ctrlreq+0x7>
     ad6:	07 97       	sbiw	r24, 0x07	; 7
     ad8:	89 f5       	brne	.+98     	; 0xb3c <udi_cdc_comm_setup+0x84>
     ada:	e2 e1       	ldi	r30, 0x12	; 18
     adc:	f5 e2       	ldi	r31, 0x25	; 37
     ade:	80 ed       	ldi	r24, 0xD0	; 208
     ae0:	92 e2       	ldi	r25, 0x22	; 34
     ae2:	80 87       	std	Z+8, r24	; 0x08
     ae4:	91 87       	std	Z+9, r25	; 0x09
     ae6:	87 e0       	ldi	r24, 0x07	; 7
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	82 87       	std	Z+10, r24	; 0x0a
     aec:	93 87       	std	Z+11, r25	; 0x0b
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	08 95       	ret
     af2:	80 76       	andi	r24, 0x60	; 96
     af4:	80 32       	cpi	r24, 0x20	; 32
     af6:	21 f5       	brne	.+72     	; 0xb40 <udi_cdc_comm_setup+0x88>
     af8:	80 91 13 25 	lds	r24, 0x2513	; 0x802513 <udd_g_ctrlreq+0x1>
     afc:	80 32       	cpi	r24, 0x20	; 32
     afe:	21 f0       	breq	.+8      	; 0xb08 <udi_cdc_comm_setup+0x50>
     b00:	82 32       	cpi	r24, 0x22	; 34
     b02:	01 f1       	breq	.+64     	; 0xb44 <udi_cdc_comm_setup+0x8c>
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	08 95       	ret
     b08:	80 91 18 25 	lds	r24, 0x2518	; 0x802518 <udd_g_ctrlreq+0x6>
     b0c:	90 91 19 25 	lds	r25, 0x2519	; 0x802519 <udd_g_ctrlreq+0x7>
     b10:	07 97       	sbiw	r24, 0x07	; 7
     b12:	d1 f4       	brne	.+52     	; 0xb48 <udi_cdc_comm_setup+0x90>
     b14:	e2 e1       	ldi	r30, 0x12	; 18
     b16:	f5 e2       	ldi	r31, 0x25	; 37
     b18:	86 ea       	ldi	r24, 0xA6	; 166
     b1a:	95 e0       	ldi	r25, 0x05	; 5
     b1c:	84 87       	std	Z+12, r24	; 0x0c
     b1e:	95 87       	std	Z+13, r25	; 0x0d
     b20:	80 ed       	ldi	r24, 0xD0	; 208
     b22:	92 e2       	ldi	r25, 0x22	; 34
     b24:	80 87       	std	Z+8, r24	; 0x08
     b26:	91 87       	std	Z+9, r25	; 0x09
     b28:	87 e0       	ldi	r24, 0x07	; 7
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	82 87       	std	Z+10, r24	; 0x0a
     b2e:	93 87       	std	Z+11, r25	; 0x0b
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	08 95       	ret
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	08 95       	ret
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	08 95       	ret
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	08 95       	ret
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	08 95       	ret
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	08 95       	ret
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 95       	ret

00000b4c <udi_cdc_line_coding_received>:
     b4c:	08 95       	ret

00000b4e <udi_cdc_comm_enable>:
     b4e:	10 92 c2 22 	sts	0x22C2, r1	; 0x8022c2 <udi_cdc_nb_comm_enabled>
     b52:	10 92 ce 22 	sts	0x22CE, r1	; 0x8022ce <udi_cdc_state>
     b56:	10 92 cf 22 	sts	0x22CF, r1	; 0x8022cf <udi_cdc_state+0x1>
     b5a:	e4 ec       	ldi	r30, 0xC4	; 196
     b5c:	f2 e2       	ldi	r31, 0x22	; 34
     b5e:	81 ea       	ldi	r24, 0xA1	; 161
     b60:	80 83       	st	Z, r24
     b62:	80 e2       	ldi	r24, 0x20	; 32
     b64:	81 83       	std	Z+1, r24	; 0x01
     b66:	12 82       	std	Z+2, r1	; 0x02
     b68:	13 82       	std	Z+3, r1	; 0x03
     b6a:	14 82       	std	Z+4, r1	; 0x04
     b6c:	15 82       	std	Z+5, r1	; 0x05
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	86 83       	std	Z+6, r24	; 0x06
     b74:	97 83       	std	Z+7, r25	; 0x07
     b76:	10 86       	std	Z+8, r1	; 0x08
     b78:	11 86       	std	Z+9, r1	; 0x09
     b7a:	e0 ed       	ldi	r30, 0xD0	; 208
     b7c:	f2 e2       	ldi	r31, 0x22	; 34
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	92 ec       	ldi	r25, 0xC2	; 194
     b82:	a1 e0       	ldi	r26, 0x01	; 1
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	80 83       	st	Z, r24
     b88:	91 83       	std	Z+1, r25	; 0x01
     b8a:	a2 83       	std	Z+2, r26	; 0x02
     b8c:	b3 83       	std	Z+3, r27	; 0x03
     b8e:	14 82       	std	Z+4, r1	; 0x04
     b90:	15 82       	std	Z+5, r1	; 0x05
     b92:	88 e0       	ldi	r24, 0x08	; 8
     b94:	86 83       	std	Z+6, r24	; 0x06
     b96:	ed dd       	rcall	.-1062   	; 0x772 <my_callback_cdc_enable>
     b98:	88 23       	and	r24, r24
     b9a:	29 f0       	breq	.+10     	; 0xba6 <udi_cdc_comm_enable+0x58>
     b9c:	90 91 c2 22 	lds	r25, 0x22C2	; 0x8022c2 <udi_cdc_nb_comm_enabled>
     ba0:	9f 5f       	subi	r25, 0xFF	; 255
     ba2:	90 93 c2 22 	sts	0x22C2, r25	; 0x8022c2 <udi_cdc_nb_comm_enabled>
     ba6:	08 95       	ret

00000ba8 <udi_cdc_tx_send>:
     ba8:	ff 92       	push	r15
     baa:	0f 93       	push	r16
     bac:	1f 93       	push	r17
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	1f 92       	push	r1
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	80 91 b0 21 	lds	r24, 0x21B0	; 0x8021b0 <udi_cdc_tx_trans_ongoing>
     bbc:	81 11       	cpse	r24, r1
     bbe:	9e c0       	rjmp	.+316    	; 0xcfc <udi_cdc_tx_send+0x154>
     bc0:	0e 94 72 10 	call	0x20e4	; 0x20e4 <udd_is_high_speed>
     bc4:	88 23       	and	r24, r24
     bc6:	51 f0       	breq	.+20     	; 0xbdc <udi_cdc_tx_send+0x34>
     bc8:	00 91 b1 21 	lds	r16, 0x21B1	; 0x8021b1 <udi_cdc_tx_sof_num>
     bcc:	10 91 b2 21 	lds	r17, 0x21B2	; 0x8021b2 <udi_cdc_tx_sof_num+0x1>
     bd0:	0e 94 7f 10 	call	0x20fe	; 0x20fe <udd_get_micro_frame_number>
     bd4:	08 17       	cp	r16, r24
     bd6:	19 07       	cpc	r17, r25
     bd8:	59 f4       	brne	.+22     	; 0xbf0 <udi_cdc_tx_send+0x48>
     bda:	90 c0       	rjmp	.+288    	; 0xcfc <udi_cdc_tx_send+0x154>
     bdc:	00 91 b1 21 	lds	r16, 0x21B1	; 0x8021b1 <udi_cdc_tx_sof_num>
     be0:	10 91 b2 21 	lds	r17, 0x21B2	; 0x8021b2 <udi_cdc_tx_sof_num+0x1>
     be4:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <udd_get_frame_number>
     be8:	08 17       	cp	r16, r24
     bea:	19 07       	cpc	r17, r25
     bec:	09 f4       	brne	.+2      	; 0xbf0 <udi_cdc_tx_send+0x48>
     bee:	86 c0       	rjmp	.+268    	; 0xcfc <udi_cdc_tx_send+0x154>
     bf0:	8f b7       	in	r24, 0x3f	; 63
     bf2:	89 83       	std	Y+1, r24	; 0x01
     bf4:	f8 94       	cli
     bf6:	19 81       	ldd	r17, Y+1	; 0x01
     bf8:	00 91 b3 21 	lds	r16, 0x21B3	; 0x8021b3 <udi_cdc_tx_buf_sel>
     bfc:	e0 2f       	mov	r30, r16
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	ee 0f       	add	r30, r30
     c02:	ff 1f       	adc	r31, r31
     c04:	ec 54       	subi	r30, 0x4C	; 76
     c06:	fe 4d       	sbci	r31, 0xDE	; 222
     c08:	80 81       	ld	r24, Z
     c0a:	91 81       	ldd	r25, Z+1	; 0x01
     c0c:	89 2b       	or	r24, r25
     c0e:	09 f5       	brne	.+66     	; 0xc52 <udi_cdc_tx_send+0xaa>
     c10:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <sof_zlp_counter.4973>
     c14:	90 91 ae 21 	lds	r25, 0x21AE	; 0x8021ae <sof_zlp_counter.4973+0x1>
     c18:	01 96       	adiw	r24, 0x01	; 1
     c1a:	80 93 ad 21 	sts	0x21AD, r24	; 0x8021ad <sof_zlp_counter.4973>
     c1e:	90 93 ae 21 	sts	0x21AE, r25	; 0x8021ae <sof_zlp_counter.4973+0x1>
     c22:	0e 94 72 10 	call	0x20e4	; 0x20e4 <udd_is_high_speed>
     c26:	81 11       	cpse	r24, r1
     c28:	07 c0       	rjmp	.+14     	; 0xc38 <udi_cdc_tx_send+0x90>
     c2a:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <sof_zlp_counter.4973>
     c2e:	90 91 ae 21 	lds	r25, 0x21AE	; 0x8021ae <sof_zlp_counter.4973+0x1>
     c32:	84 36       	cpi	r24, 0x64	; 100
     c34:	91 05       	cpc	r25, r1
     c36:	58 f0       	brcs	.+22     	; 0xc4e <udi_cdc_tx_send+0xa6>
     c38:	0e 94 72 10 	call	0x20e4	; 0x20e4 <udd_is_high_speed>
     c3c:	88 23       	and	r24, r24
     c3e:	49 f0       	breq	.+18     	; 0xc52 <udi_cdc_tx_send+0xaa>
     c40:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <sof_zlp_counter.4973>
     c44:	90 91 ae 21 	lds	r25, 0x21AE	; 0x8021ae <sof_zlp_counter.4973+0x1>
     c48:	80 32       	cpi	r24, 0x20	; 32
     c4a:	93 40       	sbci	r25, 0x03	; 3
     c4c:	10 f4       	brcc	.+4      	; 0xc52 <udi_cdc_tx_send+0xaa>
     c4e:	1f bf       	out	0x3f, r17	; 63
     c50:	55 c0       	rjmp	.+170    	; 0xcfc <udi_cdc_tx_send+0x154>
     c52:	10 92 ad 21 	sts	0x21AD, r1	; 0x8021ad <sof_zlp_counter.4973>
     c56:	10 92 ae 21 	sts	0x21AE, r1	; 0x8021ae <sof_zlp_counter.4973+0x1>
     c5a:	80 91 af 21 	lds	r24, 0x21AF	; 0x8021af <udi_cdc_tx_both_buf_to_send>
     c5e:	81 11       	cpse	r24, r1
     c60:	06 c0       	rjmp	.+12     	; 0xc6e <udi_cdc_tx_send+0xc6>
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	01 11       	cpse	r16, r1
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	80 93 b3 21 	sts	0x21B3, r24	; 0x8021b3 <udi_cdc_tx_buf_sel>
     c6c:	04 c0       	rjmp	.+8      	; 0xc76 <udi_cdc_tx_send+0xce>
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	01 11       	cpse	r16, r1
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	08 2f       	mov	r16, r24
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	80 93 b0 21 	sts	0x21B0, r24	; 0x8021b0 <udi_cdc_tx_trans_ongoing>
     c7c:	1f bf       	out	0x3f, r17	; 63
     c7e:	10 e0       	ldi	r17, 0x00	; 0
     c80:	f8 01       	movw	r30, r16
     c82:	ee 0f       	add	r30, r30
     c84:	ff 1f       	adc	r31, r31
     c86:	ec 54       	subi	r30, 0x4C	; 76
     c88:	fe 4d       	sbci	r31, 0xDE	; 222
     c8a:	ff 24       	eor	r15, r15
     c8c:	f3 94       	inc	r15
     c8e:	80 81       	ld	r24, Z
     c90:	91 81       	ldd	r25, Z+1	; 0x01
     c92:	80 34       	cpi	r24, 0x40	; 64
     c94:	91 05       	cpc	r25, r1
     c96:	09 f4       	brne	.+2      	; 0xc9a <udi_cdc_tx_send+0xf2>
     c98:	f1 2c       	mov	r15, r1
     c9a:	ff 20       	and	r15, r15
     c9c:	91 f0       	breq	.+36     	; 0xcc2 <udi_cdc_tx_send+0x11a>
     c9e:	0e 94 72 10 	call	0x20e4	; 0x20e4 <udd_is_high_speed>
     ca2:	88 23       	and	r24, r24
     ca4:	39 f0       	breq	.+14     	; 0xcb4 <udi_cdc_tx_send+0x10c>
     ca6:	0e 94 7f 10 	call	0x20fe	; 0x20fe <udd_get_micro_frame_number>
     caa:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <udi_cdc_tx_sof_num>
     cae:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <udi_cdc_tx_sof_num+0x1>
     cb2:	0b c0       	rjmp	.+22     	; 0xcca <udi_cdc_tx_send+0x122>
     cb4:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <udd_get_frame_number>
     cb8:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <udi_cdc_tx_sof_num>
     cbc:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <udi_cdc_tx_sof_num+0x1>
     cc0:	04 c0       	rjmp	.+8      	; 0xcca <udi_cdc_tx_send+0x122>
     cc2:	10 92 b1 21 	sts	0x21B1, r1	; 0x8021b1 <udi_cdc_tx_sof_num>
     cc6:	10 92 b2 21 	sts	0x21B2, r1	; 0x8021b2 <udi_cdc_tx_sof_num+0x1>
     cca:	f8 01       	movw	r30, r16
     ccc:	ee 0f       	add	r30, r30
     cce:	ff 1f       	adc	r31, r31
     cd0:	ec 54       	subi	r30, 0x4C	; 76
     cd2:	fe 4d       	sbci	r31, 0xDE	; 222
     cd4:	20 81       	ld	r18, Z
     cd6:	31 81       	ldd	r19, Z+1	; 0x01
     cd8:	a8 01       	movw	r20, r16
     cda:	00 24       	eor	r0, r0
     cdc:	56 95       	lsr	r21
     cde:	47 95       	ror	r20
     ce0:	07 94       	ror	r0
     ce2:	56 95       	lsr	r21
     ce4:	47 95       	ror	r20
     ce6:	07 94       	ror	r0
     ce8:	54 2f       	mov	r21, r20
     cea:	40 2d       	mov	r20, r0
     cec:	48 54       	subi	r20, 0x48	; 72
     cee:	5e 4d       	sbci	r21, 0xDE	; 222
     cf0:	08 e8       	ldi	r16, 0x88	; 136
     cf2:	16 e0       	ldi	r17, 0x06	; 6
     cf4:	6f 2d       	mov	r22, r15
     cf6:	81 e8       	ldi	r24, 0x81	; 129
     cf8:	0e 94 63 11 	call	0x22c6	; 0x22c6 <udd_ep_run>
     cfc:	0f 90       	pop	r0
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	ff 90       	pop	r15
     d08:	08 95       	ret

00000d0a <udi_cdc_data_sof_notify>:
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	4d cf       	rjmp	.-358    	; 0xba8 <udi_cdc_tx_send>
     d0e:	08 95       	ret

00000d10 <udi_cdc_data_sent>:
     d10:	81 11       	cpse	r24, r1
     d12:	19 c0       	rjmp	.+50     	; 0xd46 <udi_cdc_data_sent+0x36>
     d14:	20 91 b3 21 	lds	r18, 0x21B3	; 0x8021b3 <udi_cdc_tx_buf_sel>
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	22 23       	and	r18, r18
     d1e:	11 f0       	breq	.+4      	; 0xd24 <udi_cdc_data_sent+0x14>
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	fc 01       	movw	r30, r24
     d2a:	ec 54       	subi	r30, 0x4C	; 76
     d2c:	fe 4d       	sbci	r31, 0xDE	; 222
     d2e:	10 82       	st	Z, r1
     d30:	11 82       	std	Z+1, r1	; 0x01
     d32:	10 92 af 21 	sts	0x21AF, r1	; 0x8021af <udi_cdc_tx_both_buf_to_send>
     d36:	10 92 b0 21 	sts	0x21B0, r1	; 0x8021b0 <udi_cdc_tx_trans_ongoing>
     d3a:	67 2b       	or	r22, r23
     d3c:	11 f0       	breq	.+4      	; 0xd42 <udi_cdc_data_sent+0x32>
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	5d de       	rcall	.-838    	; 0x9fc <my_callback_tx_empty_notify>
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	31 cf       	rjmp	.-414    	; 0xba8 <udi_cdc_tx_send>
     d46:	08 95       	ret

00000d48 <udi_cdc_data_disable>:
     d48:	80 91 c1 22 	lds	r24, 0x22C1	; 0x8022c1 <udi_cdc_nb_data_enabled>
     d4c:	81 50       	subi	r24, 0x01	; 1
     d4e:	80 93 c1 22 	sts	0x22C1, r24	; 0x8022c1 <udi_cdc_nb_data_enabled>
     d52:	80 91 c1 22 	lds	r24, 0x22C1	; 0x8022c1 <udi_cdc_nb_data_enabled>
     d56:	0f dd       	rcall	.-1506   	; 0x776 <my_callback_cdc_disable>
     d58:	10 92 c0 22 	sts	0x22C0, r1	; 0x8022c0 <udi_cdc_data_running>
     d5c:	08 95       	ret

00000d5e <udi_cdc_multi_get_nb_received_data>:
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	1f 92       	push	r1
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	8f b7       	in	r24, 0x3f	; 63
     d6a:	89 83       	std	Y+1, r24	; 0x01
     d6c:	f8 94       	cli
     d6e:	49 81       	ldd	r20, Y+1	; 0x01
     d70:	20 91 39 22 	lds	r18, 0x2239	; 0x802239 <udi_cdc_rx_pos>
     d74:	30 91 3a 22 	lds	r19, 0x223A	; 0x80223a <udi_cdc_rx_pos+0x1>
     d78:	e0 91 3b 22 	lds	r30, 0x223B	; 0x80223b <udi_cdc_rx_buf_sel>
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	ee 0f       	add	r30, r30
     d80:	ff 1f       	adc	r31, r31
     d82:	e4 5c       	subi	r30, 0xC4	; 196
     d84:	fd 4d       	sbci	r31, 0xDD	; 221
     d86:	80 81       	ld	r24, Z
     d88:	91 81       	ldd	r25, Z+1	; 0x01
     d8a:	4f bf       	out	0x3f, r20	; 63
     d8c:	82 1b       	sub	r24, r18
     d8e:	93 0b       	sbc	r25, r19
     d90:	0f 90       	pop	r0
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	08 95       	ret

00000d98 <udi_cdc_multi_is_rx_ready>:
     d98:	e2 df       	rcall	.-60     	; 0xd5e <udi_cdc_multi_get_nb_received_data>
     d9a:	21 e0       	ldi	r18, 0x01	; 1
     d9c:	89 2b       	or	r24, r25
     d9e:	09 f4       	brne	.+2      	; 0xda2 <udi_cdc_multi_is_rx_ready+0xa>
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	82 2f       	mov	r24, r18
     da4:	08 95       	ret

00000da6 <udi_cdc_rx_start>:
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	1f 92       	push	r1
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	8f b7       	in	r24, 0x3f	; 63
     db6:	89 83       	std	Y+1, r24	; 0x01
     db8:	f8 94       	cli
     dba:	99 81       	ldd	r25, Y+1	; 0x01
     dbc:	20 91 3b 22 	lds	r18, 0x223B	; 0x80223b <udi_cdc_rx_buf_sel>
     dc0:	80 91 38 22 	lds	r24, 0x2238	; 0x802238 <udi_cdc_rx_trans_ongoing>
     dc4:	81 11       	cpse	r24, r1
     dc6:	10 c0       	rjmp	.+32     	; 0xde8 <udi_cdc_rx_start+0x42>
     dc8:	60 91 39 22 	lds	r22, 0x2239	; 0x802239 <udi_cdc_rx_pos>
     dcc:	70 91 3a 22 	lds	r23, 0x223A	; 0x80223a <udi_cdc_rx_pos+0x1>
     dd0:	02 2f       	mov	r16, r18
     dd2:	10 e0       	ldi	r17, 0x00	; 0
     dd4:	f8 01       	movw	r30, r16
     dd6:	ee 0f       	add	r30, r30
     dd8:	ff 1f       	adc	r31, r31
     dda:	e4 5c       	subi	r30, 0xC4	; 196
     ddc:	fd 4d       	sbci	r31, 0xDD	; 221
     dde:	40 81       	ld	r20, Z
     de0:	51 81       	ldd	r21, Z+1	; 0x01
     de2:	64 17       	cp	r22, r20
     de4:	75 07       	cpc	r23, r21
     de6:	18 f4       	brcc	.+6      	; 0xdee <udi_cdc_rx_start+0x48>
     de8:	9f bf       	out	0x3f, r25	; 63
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	27 c0       	rjmp	.+78     	; 0xe3c <udi_cdc_rx_start+0x96>
     dee:	10 92 39 22 	sts	0x2239, r1	; 0x802239 <udi_cdc_rx_pos>
     df2:	10 92 3a 22 	sts	0x223A, r1	; 0x80223a <udi_cdc_rx_pos+0x1>
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	21 11       	cpse	r18, r1
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	80 93 3b 22 	sts	0x223B, r24	; 0x80223b <udi_cdc_rx_buf_sel>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	80 93 38 22 	sts	0x2238, r24	; 0x802238 <udi_cdc_rx_trans_ongoing>
     e06:	9f bf       	out	0x3f, r25	; 63
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	c6 df       	rcall	.-116    	; 0xd98 <udi_cdc_multi_is_rx_ready>
     e0c:	88 23       	and	r24, r24
     e0e:	11 f0       	breq	.+4      	; 0xe14 <udi_cdc_rx_start+0x6e>
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	b2 dc       	rcall	.-1692   	; 0x778 <my_callback_rx_notify>
     e14:	a8 01       	movw	r20, r16
     e16:	00 24       	eor	r0, r0
     e18:	56 95       	lsr	r21
     e1a:	47 95       	ror	r20
     e1c:	07 94       	ror	r0
     e1e:	56 95       	lsr	r21
     e20:	47 95       	ror	r20
     e22:	07 94       	ror	r0
     e24:	54 2f       	mov	r21, r20
     e26:	40 2d       	mov	r20, r0
     e28:	40 5c       	subi	r20, 0xC0	; 192
     e2a:	5d 4d       	sbci	r21, 0xDD	; 221
     e2c:	06 e5       	ldi	r16, 0x56	; 86
     e2e:	17 e0       	ldi	r17, 0x07	; 7
     e30:	20 e4       	ldi	r18, 0x40	; 64
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	61 e0       	ldi	r22, 0x01	; 1
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	0e 94 63 11 	call	0x22c6	; 0x22c6 <udd_ep_run>
     e3c:	0f 90       	pop	r0
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	08 95       	ret

00000e48 <udi_cdc_data_enable>:
     e48:	10 92 c1 22 	sts	0x22C1, r1	; 0x8022c1 <udi_cdc_nb_data_enabled>
     e4c:	10 92 b0 21 	sts	0x21B0, r1	; 0x8021b0 <udi_cdc_tx_trans_ongoing>
     e50:	10 92 af 21 	sts	0x21AF, r1	; 0x8021af <udi_cdc_tx_both_buf_to_send>
     e54:	10 92 b3 21 	sts	0x21B3, r1	; 0x8021b3 <udi_cdc_tx_buf_sel>
     e58:	e4 eb       	ldi	r30, 0xB4	; 180
     e5a:	f1 e2       	ldi	r31, 0x21	; 33
     e5c:	10 82       	st	Z, r1
     e5e:	11 82       	std	Z+1, r1	; 0x01
     e60:	12 82       	std	Z+2, r1	; 0x02
     e62:	13 82       	std	Z+3, r1	; 0x03
     e64:	10 92 b1 21 	sts	0x21B1, r1	; 0x8021b1 <udi_cdc_tx_sof_num>
     e68:	10 92 b2 21 	sts	0x21B2, r1	; 0x8021b2 <udi_cdc_tx_sof_num+0x1>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	9c de       	rcall	.-712    	; 0xba8 <udi_cdc_tx_send>
     e70:	10 92 38 22 	sts	0x2238, r1	; 0x802238 <udi_cdc_rx_trans_ongoing>
     e74:	10 92 3b 22 	sts	0x223B, r1	; 0x80223b <udi_cdc_rx_buf_sel>
     e78:	ec e3       	ldi	r30, 0x3C	; 60
     e7a:	f2 e2       	ldi	r31, 0x22	; 34
     e7c:	10 82       	st	Z, r1
     e7e:	11 82       	std	Z+1, r1	; 0x01
     e80:	12 82       	std	Z+2, r1	; 0x02
     e82:	13 82       	std	Z+3, r1	; 0x03
     e84:	10 92 39 22 	sts	0x2239, r1	; 0x802239 <udi_cdc_rx_pos>
     e88:	10 92 3a 22 	sts	0x223A, r1	; 0x80223a <udi_cdc_rx_pos+0x1>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	8b df       	rcall	.-234    	; 0xda6 <udi_cdc_rx_start>
     e90:	88 23       	and	r24, r24
     e92:	59 f0       	breq	.+22     	; 0xeaa <udi_cdc_data_enable+0x62>
     e94:	90 91 c1 22 	lds	r25, 0x22C1	; 0x8022c1 <udi_cdc_nb_data_enabled>
     e98:	9f 5f       	subi	r25, 0xFF	; 255
     e9a:	90 93 c1 22 	sts	0x22C1, r25	; 0x8022c1 <udi_cdc_nb_data_enabled>
     e9e:	90 91 c1 22 	lds	r25, 0x22C1	; 0x8022c1 <udi_cdc_nb_data_enabled>
     ea2:	91 30       	cpi	r25, 0x01	; 1
     ea4:	11 f4       	brne	.+4      	; 0xeaa <udi_cdc_data_enable+0x62>
     ea6:	90 93 c0 22 	sts	0x22C0, r25	; 0x8022c0 <udi_cdc_data_running>
     eaa:	08 95       	ret

00000eac <udi_cdc_data_received>:
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	81 11       	cpse	r24, r1
     eb2:	29 c0       	rjmp	.+82     	; 0xf06 <udi_cdc_data_received+0x5a>
     eb4:	80 91 3b 22 	lds	r24, 0x223B	; 0x80223b <udi_cdc_rx_buf_sel>
     eb8:	e1 e0       	ldi	r30, 0x01	; 1
     eba:	81 11       	cpse	r24, r1
     ebc:	e0 e0       	ldi	r30, 0x00	; 0
     ebe:	84 2f       	mov	r24, r20
     ec0:	61 15       	cp	r22, r1
     ec2:	71 05       	cpc	r23, r1
     ec4:	a9 f4       	brne	.+42     	; 0xef0 <udi_cdc_data_received+0x44>
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	00 24       	eor	r0, r0
     eca:	f6 95       	lsr	r31
     ecc:	e7 95       	ror	r30
     ece:	07 94       	ror	r0
     ed0:	f6 95       	lsr	r31
     ed2:	e7 95       	ror	r30
     ed4:	07 94       	ror	r0
     ed6:	fe 2f       	mov	r31, r30
     ed8:	e0 2d       	mov	r30, r0
     eda:	af 01       	movw	r20, r30
     edc:	40 5c       	subi	r20, 0xC0	; 192
     ede:	5d 4d       	sbci	r21, 0xDD	; 221
     ee0:	06 e5       	ldi	r16, 0x56	; 86
     ee2:	17 e0       	ldi	r17, 0x07	; 7
     ee4:	20 e4       	ldi	r18, 0x40	; 64
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	61 e0       	ldi	r22, 0x01	; 1
     eea:	0e 94 63 11 	call	0x22c6	; 0x22c6 <udd_ep_run>
     eee:	0b c0       	rjmp	.+22     	; 0xf06 <udi_cdc_data_received+0x5a>
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	ee 0f       	add	r30, r30
     ef4:	ff 1f       	adc	r31, r31
     ef6:	e4 5c       	subi	r30, 0xC4	; 196
     ef8:	fd 4d       	sbci	r31, 0xDD	; 221
     efa:	60 83       	st	Z, r22
     efc:	71 83       	std	Z+1, r23	; 0x01
     efe:	10 92 38 22 	sts	0x2238, r1	; 0x802238 <udi_cdc_rx_trans_ongoing>
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	50 df       	rcall	.-352    	; 0xda6 <udi_cdc_rx_start>
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	08 95       	ret

00000f0c <udi_cdc_read_no_polling>:
     f0c:	ef 92       	push	r14
     f0e:	ff 92       	push	r15
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	1f 92       	push	r1
     f1a:	1f 92       	push	r1
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	dc 01       	movw	r26, r24
     f22:	90 91 c0 22 	lds	r25, 0x22C0	; 0x8022c0 <udi_cdc_data_running>
     f26:	99 23       	and	r25, r25
     f28:	09 f4       	brne	.+2      	; 0xf2c <udi_cdc_read_no_polling+0x20>
     f2a:	43 c0       	rjmp	.+134    	; 0xfb2 <udi_cdc_read_no_polling+0xa6>
     f2c:	8f b7       	in	r24, 0x3f	; 63
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	f8 94       	cli
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	40 91 39 22 	lds	r20, 0x2239	; 0x802239 <udi_cdc_rx_pos>
     f38:	50 91 3a 22 	lds	r21, 0x223A	; 0x80223a <udi_cdc_rx_pos+0x1>
     f3c:	20 91 3b 22 	lds	r18, 0x223B	; 0x80223b <udi_cdc_rx_buf_sel>
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	f9 01       	movw	r30, r18
     f44:	ee 0f       	add	r30, r30
     f46:	ff 1f       	adc	r31, r31
     f48:	e4 5c       	subi	r30, 0xC4	; 196
     f4a:	fd 4d       	sbci	r31, 0xDD	; 221
     f4c:	00 81       	ld	r16, Z
     f4e:	11 81       	ldd	r17, Z+1	; 0x01
     f50:	04 1b       	sub	r16, r20
     f52:	15 0b       	sbc	r17, r21
     f54:	8f bf       	out	0x3f, r24	; 63
     f56:	78 01       	movw	r14, r16
     f58:	60 17       	cp	r22, r16
     f5a:	71 07       	cpc	r23, r17
     f5c:	08 f4       	brcc	.+2      	; 0xf60 <udi_cdc_read_no_polling+0x54>
     f5e:	7b 01       	movw	r14, r22
     f60:	e1 14       	cp	r14, r1
     f62:	f1 04       	cpc	r15, r1
     f64:	49 f1       	breq	.+82     	; 0xfb8 <udi_cdc_read_no_polling+0xac>
     f66:	cd 01       	movw	r24, r26
     f68:	00 24       	eor	r0, r0
     f6a:	36 95       	lsr	r19
     f6c:	27 95       	ror	r18
     f6e:	07 94       	ror	r0
     f70:	36 95       	lsr	r19
     f72:	27 95       	ror	r18
     f74:	07 94       	ror	r0
     f76:	32 2f       	mov	r19, r18
     f78:	20 2d       	mov	r18, r0
     f7a:	b9 01       	movw	r22, r18
     f7c:	64 0f       	add	r22, r20
     f7e:	75 1f       	adc	r23, r21
     f80:	60 5c       	subi	r22, 0xC0	; 192
     f82:	7d 4d       	sbci	r23, 0xDD	; 221
     f84:	a7 01       	movw	r20, r14
     f86:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <memcpy>
     f8a:	8f b7       	in	r24, 0x3f	; 63
     f8c:	8a 83       	std	Y+2, r24	; 0x02
     f8e:	f8 94       	cli
     f90:	2a 81       	ldd	r18, Y+2	; 0x02
     f92:	80 91 39 22 	lds	r24, 0x2239	; 0x802239 <udi_cdc_rx_pos>
     f96:	90 91 3a 22 	lds	r25, 0x223A	; 0x80223a <udi_cdc_rx_pos+0x1>
     f9a:	e8 0e       	add	r14, r24
     f9c:	f9 1e       	adc	r15, r25
     f9e:	e0 92 39 22 	sts	0x2239, r14	; 0x802239 <udi_cdc_rx_pos>
     fa2:	f0 92 3a 22 	sts	0x223A, r15	; 0x80223a <udi_cdc_rx_pos+0x1>
     fa6:	2f bf       	out	0x3f, r18	; 63
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	fd de       	rcall	.-518    	; 0xda6 <udi_cdc_rx_start>
     fac:	80 2f       	mov	r24, r16
     fae:	91 2f       	mov	r25, r17
     fb0:	05 c0       	rjmp	.+10     	; 0xfbc <udi_cdc_read_no_polling+0xb0>
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <udi_cdc_read_no_polling+0xb0>
     fb8:	80 2f       	mov	r24, r16
     fba:	91 2f       	mov	r25, r17
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
     fc8:	ff 90       	pop	r15
     fca:	ef 90       	pop	r14
     fcc:	08 95       	ret

00000fce <udi_cdc_multi_get_free_tx_buffer>:
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	1f 92       	push	r1
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	8f b7       	in	r24, 0x3f	; 63
     fda:	89 83       	std	Y+1, r24	; 0x01
     fdc:	f8 94       	cli
     fde:	99 81       	ldd	r25, Y+1	; 0x01
     fe0:	80 91 b3 21 	lds	r24, 0x21B3	; 0x8021b3 <udi_cdc_tx_buf_sel>
     fe4:	e8 2f       	mov	r30, r24
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	ee 0f       	add	r30, r30
     fea:	ff 1f       	adc	r31, r31
     fec:	ec 54       	subi	r30, 0x4C	; 76
     fee:	fe 4d       	sbci	r31, 0xDE	; 222
     ff0:	20 81       	ld	r18, Z
     ff2:	31 81       	ldd	r19, Z+1	; 0x01
     ff4:	20 34       	cpi	r18, 0x40	; 64
     ff6:	31 05       	cpc	r19, r1
     ff8:	89 f4       	brne	.+34     	; 0x101c <udi_cdc_multi_get_free_tx_buffer+0x4e>
     ffa:	40 91 b0 21 	lds	r20, 0x21B0	; 0x8021b0 <udi_cdc_tx_trans_ongoing>
     ffe:	41 11       	cpse	r20, r1
    1000:	0d c0       	rjmp	.+26     	; 0x101c <udi_cdc_multi_get_free_tx_buffer+0x4e>
    1002:	40 91 af 21 	lds	r20, 0x21AF	; 0x8021af <udi_cdc_tx_both_buf_to_send>
    1006:	41 11       	cpse	r20, r1
    1008:	09 c0       	rjmp	.+18     	; 0x101c <udi_cdc_multi_get_free_tx_buffer+0x4e>
    100a:	21 e0       	ldi	r18, 0x01	; 1
    100c:	20 93 af 21 	sts	0x21AF, r18	; 0x8021af <udi_cdc_tx_both_buf_to_send>
    1010:	81 11       	cpse	r24, r1
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	20 93 b3 21 	sts	0x21B3, r18	; 0x8021b3 <udi_cdc_tx_buf_sel>
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	9f bf       	out	0x3f, r25	; 63
    101e:	80 e4       	ldi	r24, 0x40	; 64
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	82 1b       	sub	r24, r18
    1024:	93 0b       	sbc	r25, r19
    1026:	0f 90       	pop	r0
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	08 95       	ret

0000102e <udi_cdc_multi_is_tx_ready>:
    102e:	cf df       	rcall	.-98     	; 0xfce <udi_cdc_multi_get_free_tx_buffer>
    1030:	21 e0       	ldi	r18, 0x01	; 1
    1032:	89 2b       	or	r24, r25
    1034:	09 f4       	brne	.+2      	; 0x1038 <udi_cdc_multi_is_tx_ready+0xa>
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	82 2f       	mov	r24, r18
    103a:	08 95       	ret

0000103c <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
    103c:	ff 92       	push	r15
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	1f 92       	push	r1
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	f6 2e       	mov	r15, r22
    104e:	17 2f       	mov	r17, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    1050:	01 e0       	ldi	r16, 0x01	; 1
    1052:	80 91 d6 22 	lds	r24, 0x22D6	; 0x8022d6 <udi_cdc_line_coding+0x6>
    1056:	89 30       	cpi	r24, 0x09	; 9
    1058:	09 f0       	breq	.+2      	; 0x105c <udi_cdc_multi_putc+0x20>
    105a:	00 e0       	ldi	r16, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	e7 df       	rcall	.-50     	; 0x102e <udi_cdc_multi_is_tx_ready>
    1060:	81 11       	cpse	r24, r1
    1062:	07 c0       	rjmp	.+14     	; 0x1072 <udi_cdc_multi_putc+0x36>
		if (!udi_cdc_data_running) {
    1064:	80 91 c0 22 	lds	r24, 0x22C0	; 0x8022c0 <udi_cdc_data_running>
    1068:	81 11       	cpse	r24, r1
    106a:	f8 cf       	rjmp	.-16     	; 0x105c <udi_cdc_multi_putc+0x20>
			return false;
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	2d c0       	rjmp	.+90     	; 0x10cc <udi_cdc_multi_putc+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1072:	8f b7       	in	r24, 0x3f	; 63
    1074:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1076:	f8 94       	cli
	return flags;
    1078:	29 81       	ldd	r18, Y+1	; 0x01
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    107a:	e0 91 b3 21 	lds	r30, 0x21B3	; 0x8021b3 <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	df 01       	movw	r26, r30
    1082:	aa 0f       	add	r26, r26
    1084:	bb 1f       	adc	r27, r27
    1086:	ac 54       	subi	r26, 0x4C	; 76
    1088:	be 4d       	sbci	r27, 0xDE	; 222
    108a:	8d 91       	ld	r24, X+
    108c:	9c 91       	ld	r25, X
    108e:	11 97       	sbiw	r26, 0x01	; 1
    1090:	ac 01       	movw	r20, r24
    1092:	4f 5f       	subi	r20, 0xFF	; 255
    1094:	5f 4f       	sbci	r21, 0xFF	; 255
    1096:	4d 93       	st	X+, r20
    1098:	5c 93       	st	X, r21
    109a:	00 24       	eor	r0, r0
    109c:	f6 95       	lsr	r31
    109e:	e7 95       	ror	r30
    10a0:	07 94       	ror	r0
    10a2:	f6 95       	lsr	r31
    10a4:	e7 95       	ror	r30
    10a6:	07 94       	ror	r0
    10a8:	fe 2f       	mov	r31, r30
    10aa:	e0 2d       	mov	r30, r0
    10ac:	8e 0f       	add	r24, r30
    10ae:	9f 1f       	adc	r25, r31
    10b0:	fc 01       	movw	r30, r24
    10b2:	e8 54       	subi	r30, 0x48	; 72
    10b4:	fe 4d       	sbci	r31, 0xDE	; 222
    10b6:	f0 82       	st	Z, r15
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10b8:	2f bf       	out	0x3f, r18	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
    10ba:	00 23       	and	r16, r16
    10bc:	29 f0       	breq	.+10     	; 0x10c8 <udi_cdc_multi_putc+0x8c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
    10be:	f1 2e       	mov	r15, r17
    10c0:	11 0f       	add	r17, r17
    10c2:	11 0b       	sbc	r17, r17
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
    10c4:	00 e0       	ldi	r16, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
    10c6:	ca cf       	rjmp	.-108    	; 0x105c <udi_cdc_multi_putc+0x20>
	}
	return true;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
}
    10cc:	0f 90       	pop	r0
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	1f 91       	pop	r17
    10d4:	0f 91       	pop	r16
    10d6:	ff 90       	pop	r15
    10d8:	08 95       	ret

000010da <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
    10da:	bc 01       	movw	r22, r24
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	ae cf       	rjmp	.-164    	; 0x103c <udi_cdc_multi_putc>
}
    10e0:	08 95       	ret

000010e2 <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
    10e2:	5f 92       	push	r5
    10e4:	6f 92       	push	r6
    10e6:	7f 92       	push	r7
    10e8:	8f 92       	push	r8
    10ea:	9f 92       	push	r9
    10ec:	af 92       	push	r10
    10ee:	bf 92       	push	r11
    10f0:	cf 92       	push	r12
    10f2:	df 92       	push	r13
    10f4:	ef 92       	push	r14
    10f6:	ff 92       	push	r15
    10f8:	0f 93       	push	r16
    10fa:	1f 93       	push	r17
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
    1100:	1f 92       	push	r1
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	4b 01       	movw	r8, r22
    1108:	5a 01       	movw	r10, r20

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
    110a:	80 91 d6 22 	lds	r24, 0x22D6	; 0x8022d6 <udi_cdc_line_coding+0x6>
    110e:	89 30       	cpi	r24, 0x09	; 9
    1110:	11 f4       	brne	.+4      	; 0x1116 <udi_cdc_multi_write_buf+0x34>
		size *=2;
    1112:	aa 0c       	add	r10, r10
    1114:	bb 1c       	adc	r11, r11

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
    1116:	68 94       	set
    1118:	66 24       	eor	r6, r6
    111a:	66 f8       	bld	r6, 6
    111c:	71 2c       	mov	r7, r1
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	86 df       	rcall	.-244    	; 0x102e <udi_cdc_multi_is_tx_ready>
    1122:	81 11       	cpse	r24, r1
    1124:	07 c0       	rjmp	.+14     	; 0x1134 <udi_cdc_multi_write_buf+0x52>
		if (!udi_cdc_data_running) {
    1126:	80 91 c0 22 	lds	r24, 0x22C0	; 0x8022c0 <udi_cdc_data_running>
    112a:	81 11       	cpse	r24, r1
    112c:	f8 cf       	rjmp	.-16     	; 0x111e <udi_cdc_multi_write_buf+0x3c>
    112e:	8a 2d       	mov	r24, r10
    1130:	9b 2d       	mov	r25, r11
    1132:	3a c0       	rjmp	.+116    	; 0x11a8 <udi_cdc_multi_write_buf+0xc6>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1134:	8f b7       	in	r24, 0x3f	; 63
    1136:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1138:	f8 94       	cli
	return flags;
    113a:	59 80       	ldd	r5, Y+1	; 0x01
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    113c:	00 91 b3 21 	lds	r16, 0x21B3	; 0x8021b3 <udi_cdc_tx_buf_sel>
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    1140:	10 e0       	ldi	r17, 0x00	; 0
    1142:	f8 01       	movw	r30, r16
    1144:	ee 0f       	add	r30, r30
    1146:	ff 1f       	adc	r31, r31
    1148:	ec 54       	subi	r30, 0x4C	; 76
    114a:	fe 4d       	sbci	r31, 0xDE	; 222
    114c:	e0 80       	ld	r14, Z
    114e:	f1 80       	ldd	r15, Z+1	; 0x01
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
    1150:	c3 01       	movw	r24, r6
    1152:	8e 19       	sub	r24, r14
    1154:	9f 09       	sbc	r25, r15
    1156:	65 01       	movw	r12, r10
    1158:	8a 15       	cp	r24, r10
    115a:	9b 05       	cpc	r25, r11
    115c:	08 f4       	brcc	.+2      	; 0x1160 <udi_cdc_multi_write_buf+0x7e>
    115e:	6c 01       	movw	r12, r24
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
    1160:	c8 01       	movw	r24, r16
    1162:	00 24       	eor	r0, r0
    1164:	96 95       	lsr	r25
    1166:	87 95       	ror	r24
    1168:	07 94       	ror	r0
    116a:	96 95       	lsr	r25
    116c:	87 95       	ror	r24
    116e:	07 94       	ror	r0
    1170:	98 2f       	mov	r25, r24
    1172:	80 2d       	mov	r24, r0
    1174:	8e 0d       	add	r24, r14
    1176:	9f 1d       	adc	r25, r15
    1178:	a6 01       	movw	r20, r12
    117a:	b4 01       	movw	r22, r8
    117c:	88 54       	subi	r24, 0x48	; 72
    117e:	9e 4d       	sbci	r25, 0xDE	; 222
    1180:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <memcpy>
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
    1184:	00 0f       	add	r16, r16
    1186:	11 1f       	adc	r17, r17
    1188:	f8 01       	movw	r30, r16
    118a:	ec 54       	subi	r30, 0x4C	; 76
    118c:	fe 4d       	sbci	r31, 0xDE	; 222
    118e:	ec 0c       	add	r14, r12
    1190:	fd 1c       	adc	r15, r13
    1192:	e0 82       	st	Z, r14
    1194:	f1 82       	std	Z+1, r15	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1196:	5f be       	out	0x3f, r5	; 63
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
    1198:	8c 0c       	add	r8, r12
    119a:	9d 1c       	adc	r9, r13
	size -= copy_nb;
    119c:	ac 18       	sub	r10, r12
    119e:	bd 08       	sbc	r11, r13

	if (size) {
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <udi_cdc_multi_write_buf+0xc2>
    11a2:	bd cf       	rjmp	.-134    	; 0x111e <udi_cdc_multi_write_buf+0x3c>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	90 e0       	ldi	r25, 0x00	; 0
}
    11a8:	0f 90       	pop	r0
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	1f 91       	pop	r17
    11b0:	0f 91       	pop	r16
    11b2:	ff 90       	pop	r15
    11b4:	ef 90       	pop	r14
    11b6:	df 90       	pop	r13
    11b8:	cf 90       	pop	r12
    11ba:	bf 90       	pop	r11
    11bc:	af 90       	pop	r10
    11be:	9f 90       	pop	r9
    11c0:	8f 90       	pop	r8
    11c2:	7f 90       	pop	r7
    11c4:	6f 90       	pop	r6
    11c6:	5f 90       	pop	r5
    11c8:	08 95       	ret

000011ca <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    11ca:	e0 91 dc 22 	lds	r30, 0x22DC	; 0x8022dc <udc_ptr_conf>
    11ce:	f0 91 dd 22 	lds	r31, 0x22DD	; 0x8022dd <udc_ptr_conf+0x1>
    11d2:	01 90       	ld	r0, Z+
    11d4:	f0 81       	ld	r31, Z
    11d6:	e0 2d       	mov	r30, r0
    11d8:	22 81       	ldd	r18, Z+2	; 0x02
    11da:	33 81       	ldd	r19, Z+3	; 0x03
    11dc:	2e 0f       	add	r18, r30
    11de:	3f 1f       	adc	r19, r31
    11e0:	fc 01       	movw	r30, r24
    11e2:	40 81       	ld	r20, Z
    11e4:	e4 0f       	add	r30, r20
    11e6:	f1 1d       	adc	r31, r1
    11e8:	e2 17       	cp	r30, r18
    11ea:	f3 07       	cpc	r31, r19
    11ec:	b8 f4       	brcc	.+46     	; 0x121c <udc_next_desc_in_iface+0x52>
    11ee:	81 81       	ldd	r24, Z+1	; 0x01
    11f0:	84 30       	cpi	r24, 0x04	; 4
    11f2:	b9 f0       	breq	.+46     	; 0x1222 <udc_next_desc_in_iface+0x58>
    11f4:	86 13       	cpse	r24, r22
    11f6:	09 c0       	rjmp	.+18     	; 0x120a <udc_next_desc_in_iface+0x40>
    11f8:	05 c0       	rjmp	.+10     	; 0x1204 <udc_next_desc_in_iface+0x3a>
    11fa:	81 81       	ldd	r24, Z+1	; 0x01
    11fc:	84 30       	cpi	r24, 0x04	; 4
    11fe:	a1 f0       	breq	.+40     	; 0x1228 <udc_next_desc_in_iface+0x5e>
    1200:	86 13       	cpse	r24, r22
    1202:	03 c0       	rjmp	.+6      	; 0x120a <udc_next_desc_in_iface+0x40>
    1204:	8e 2f       	mov	r24, r30
    1206:	9f 2f       	mov	r25, r31
    1208:	08 95       	ret
    120a:	80 81       	ld	r24, Z
    120c:	e8 0f       	add	r30, r24
    120e:	f1 1d       	adc	r31, r1
    1210:	e2 17       	cp	r30, r18
    1212:	f3 07       	cpc	r31, r19
    1214:	90 f3       	brcs	.-28     	; 0x11fa <udc_next_desc_in_iface+0x30>
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	08 95       	ret
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	08 95       	ret
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	08 95       	ret
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	08 95       	ret

0000122e <udc_valid_address>:
    122e:	80 91 14 25 	lds	r24, 0x2514	; 0x802514 <udd_g_ctrlreq+0x2>
    1232:	8f 77       	andi	r24, 0x7F	; 127
    1234:	59 c7       	rjmp	.+3762   	; 0x20e8 <udd_set_address>
    1236:	08 95       	ret

00001238 <udc_update_iface_desc>:
    1238:	90 91 de 22 	lds	r25, 0x22DE	; 0x8022de <udc_num_configuration>
    123c:	99 23       	and	r25, r25
    123e:	81 f1       	breq	.+96     	; 0x12a0 <udc_update_iface_desc+0x68>
    1240:	e0 91 dc 22 	lds	r30, 0x22DC	; 0x8022dc <udc_ptr_conf>
    1244:	f0 91 dd 22 	lds	r31, 0x22DD	; 0x8022dd <udc_ptr_conf+0x1>
    1248:	01 90       	ld	r0, Z+
    124a:	f0 81       	ld	r31, Z
    124c:	e0 2d       	mov	r30, r0
    124e:	94 81       	ldd	r25, Z+4	; 0x04
    1250:	89 17       	cp	r24, r25
    1252:	40 f5       	brcc	.+80     	; 0x12a4 <udc_update_iface_desc+0x6c>
    1254:	e0 93 da 22 	sts	0x22DA, r30	; 0x8022da <udc_ptr_iface>
    1258:	f0 93 db 22 	sts	0x22DB, r31	; 0x8022db <udc_ptr_iface+0x1>
    125c:	22 81       	ldd	r18, Z+2	; 0x02
    125e:	33 81       	ldd	r19, Z+3	; 0x03
    1260:	2e 0f       	add	r18, r30
    1262:	3f 1f       	adc	r19, r31
    1264:	e2 17       	cp	r30, r18
    1266:	f3 07       	cpc	r31, r19
    1268:	f8 f4       	brcc	.+62     	; 0x12a8 <udc_update_iface_desc+0x70>
    126a:	91 81       	ldd	r25, Z+1	; 0x01
    126c:	94 30       	cpi	r25, 0x04	; 4
    126e:	61 f4       	brne	.+24     	; 0x1288 <udc_update_iface_desc+0x50>
    1270:	92 81       	ldd	r25, Z+2	; 0x02
    1272:	98 13       	cpse	r25, r24
    1274:	09 c0       	rjmp	.+18     	; 0x1288 <udc_update_iface_desc+0x50>
    1276:	93 81       	ldd	r25, Z+3	; 0x03
    1278:	96 13       	cpse	r25, r22
    127a:	06 c0       	rjmp	.+12     	; 0x1288 <udc_update_iface_desc+0x50>
    127c:	e0 93 da 22 	sts	0x22DA, r30	; 0x8022da <udc_ptr_iface>
    1280:	f0 93 db 22 	sts	0x22DB, r31	; 0x8022db <udc_ptr_iface+0x1>
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	08 95       	ret
    1288:	90 81       	ld	r25, Z
    128a:	e9 0f       	add	r30, r25
    128c:	f1 1d       	adc	r31, r1
    128e:	e2 17       	cp	r30, r18
    1290:	f3 07       	cpc	r31, r19
    1292:	58 f3       	brcs	.-42     	; 0x126a <udc_update_iface_desc+0x32>
    1294:	e0 93 da 22 	sts	0x22DA, r30	; 0x8022da <udc_ptr_iface>
    1298:	f0 93 db 22 	sts	0x22DB, r31	; 0x8022db <udc_ptr_iface+0x1>
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	08 95       	ret
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	08 95       	ret
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	08 95       	ret
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	08 95       	ret

000012ac <udc_iface_disable>:
    12ac:	ef 92       	push	r14
    12ae:	ff 92       	push	r15
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	c8 2f       	mov	r28, r24
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	be df       	rcall	.-132    	; 0x1238 <udc_update_iface_desc>
    12bc:	18 2f       	mov	r17, r24
    12be:	88 23       	and	r24, r24
    12c0:	81 f1       	breq	.+96     	; 0x1322 <udc_iface_disable+0x76>
    12c2:	a0 91 dc 22 	lds	r26, 0x22DC	; 0x8022dc <udc_ptr_conf>
    12c6:	b0 91 dd 22 	lds	r27, 0x22DD	; 0x8022dd <udc_ptr_conf+0x1>
    12ca:	ec 2f       	mov	r30, r28
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	ee 0f       	add	r30, r30
    12d0:	ff 1f       	adc	r31, r31
    12d2:	12 96       	adiw	r26, 0x02	; 2
    12d4:	8d 91       	ld	r24, X+
    12d6:	9c 91       	ld	r25, X
    12d8:	13 97       	sbiw	r26, 0x03	; 3
    12da:	e8 0f       	add	r30, r24
    12dc:	f9 1f       	adc	r31, r25
    12de:	e0 80       	ld	r14, Z
    12e0:	f1 80       	ldd	r15, Z+1	; 0x01
    12e2:	d7 01       	movw	r26, r14
    12e4:	16 96       	adiw	r26, 0x06	; 6
    12e6:	ed 91       	ld	r30, X+
    12e8:	fc 91       	ld	r31, X
    12ea:	17 97       	sbiw	r26, 0x07	; 7
    12ec:	19 95       	eicall
    12ee:	68 2f       	mov	r22, r24
    12f0:	8c 2f       	mov	r24, r28
    12f2:	a2 df       	rcall	.-188    	; 0x1238 <udc_update_iface_desc>
    12f4:	18 2f       	mov	r17, r24
    12f6:	88 23       	and	r24, r24
    12f8:	a1 f0       	breq	.+40     	; 0x1322 <udc_iface_disable+0x76>
    12fa:	c0 91 da 22 	lds	r28, 0x22DA	; 0x8022da <udc_ptr_iface>
    12fe:	d0 91 db 22 	lds	r29, 0x22DB	; 0x8022db <udc_ptr_iface+0x1>
    1302:	65 e0       	ldi	r22, 0x05	; 5
    1304:	ce 01       	movw	r24, r28
    1306:	61 df       	rcall	.-318    	; 0x11ca <udc_next_desc_in_iface>
    1308:	ec 01       	movw	r28, r24
    130a:	89 2b       	or	r24, r25
    130c:	21 f0       	breq	.+8      	; 0x1316 <udc_iface_disable+0x6a>
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	0e 94 73 12 	call	0x24e6	; 0x24e6 <udd_ep_free>
    1314:	f6 cf       	rjmp	.-20     	; 0x1302 <udc_iface_disable+0x56>
    1316:	d7 01       	movw	r26, r14
    1318:	12 96       	adiw	r26, 0x02	; 2
    131a:	ed 91       	ld	r30, X+
    131c:	fc 91       	ld	r31, X
    131e:	13 97       	sbiw	r26, 0x03	; 3
    1320:	19 95       	eicall
    1322:	81 2f       	mov	r24, r17
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	1f 91       	pop	r17
    132a:	ff 90       	pop	r15
    132c:	ef 90       	pop	r14
    132e:	08 95       	ret

00001330 <udc_iface_enable>:
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	18 2f       	mov	r17, r24
    1338:	7f df       	rcall	.-258    	; 0x1238 <udc_update_iface_desc>
    133a:	88 23       	and	r24, r24
    133c:	39 f1       	breq	.+78     	; 0x138c <udc_iface_enable+0x5c>
    133e:	c0 91 da 22 	lds	r28, 0x22DA	; 0x8022da <udc_ptr_iface>
    1342:	d0 91 db 22 	lds	r29, 0x22DB	; 0x8022db <udc_ptr_iface+0x1>
    1346:	65 e0       	ldi	r22, 0x05	; 5
    1348:	ce 01       	movw	r24, r28
    134a:	3f df       	rcall	.-386    	; 0x11ca <udc_next_desc_in_iface>
    134c:	ec 01       	movw	r28, r24
    134e:	89 2b       	or	r24, r25
    1350:	41 f0       	breq	.+16     	; 0x1362 <udc_iface_enable+0x32>
    1352:	4c 81       	ldd	r20, Y+4	; 0x04
    1354:	5d 81       	ldd	r21, Y+5	; 0x05
    1356:	6b 81       	ldd	r22, Y+3	; 0x03
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	db d6       	rcall	.+3510   	; 0x2112 <udd_ep_alloc>
    135c:	81 11       	cpse	r24, r1
    135e:	f3 cf       	rjmp	.-26     	; 0x1346 <udc_iface_enable+0x16>
    1360:	15 c0       	rjmp	.+42     	; 0x138c <udc_iface_enable+0x5c>
    1362:	a0 91 dc 22 	lds	r26, 0x22DC	; 0x8022dc <udc_ptr_conf>
    1366:	b0 91 dd 22 	lds	r27, 0x22DD	; 0x8022dd <udc_ptr_conf+0x1>
    136a:	e1 2f       	mov	r30, r17
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	ee 0f       	add	r30, r30
    1370:	ff 1f       	adc	r31, r31
    1372:	12 96       	adiw	r26, 0x02	; 2
    1374:	8d 91       	ld	r24, X+
    1376:	9c 91       	ld	r25, X
    1378:	13 97       	sbiw	r26, 0x03	; 3
    137a:	e8 0f       	add	r30, r24
    137c:	f9 1f       	adc	r31, r25
    137e:	01 90       	ld	r0, Z+
    1380:	f0 81       	ld	r31, Z
    1382:	e0 2d       	mov	r30, r0
    1384:	01 90       	ld	r0, Z+
    1386:	f0 81       	ld	r31, Z
    1388:	e0 2d       	mov	r30, r0
    138a:	19 95       	eicall
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	1f 91       	pop	r17
    1392:	08 95       	ret

00001394 <udc_start>:
    1394:	25 c6       	rjmp	.+3146   	; 0x1fe0 <udd_enable>
    1396:	08 95       	ret

00001398 <udc_reset>:
    1398:	cf 93       	push	r28
    139a:	80 91 de 22 	lds	r24, 0x22DE	; 0x8022de <udc_num_configuration>
    139e:	88 23       	and	r24, r24
    13a0:	c1 f0       	breq	.+48     	; 0x13d2 <udc_reset+0x3a>
    13a2:	e0 91 dc 22 	lds	r30, 0x22DC	; 0x8022dc <udc_ptr_conf>
    13a6:	f0 91 dd 22 	lds	r31, 0x22DD	; 0x8022dd <udc_ptr_conf+0x1>
    13aa:	01 90       	ld	r0, Z+
    13ac:	f0 81       	ld	r31, Z
    13ae:	e0 2d       	mov	r30, r0
    13b0:	84 81       	ldd	r24, Z+4	; 0x04
    13b2:	88 23       	and	r24, r24
    13b4:	71 f0       	breq	.+28     	; 0x13d2 <udc_reset+0x3a>
    13b6:	c0 e0       	ldi	r28, 0x00	; 0
    13b8:	8c 2f       	mov	r24, r28
    13ba:	78 df       	rcall	.-272    	; 0x12ac <udc_iface_disable>
    13bc:	cf 5f       	subi	r28, 0xFF	; 255
    13be:	e0 91 dc 22 	lds	r30, 0x22DC	; 0x8022dc <udc_ptr_conf>
    13c2:	f0 91 dd 22 	lds	r31, 0x22DD	; 0x8022dd <udc_ptr_conf+0x1>
    13c6:	01 90       	ld	r0, Z+
    13c8:	f0 81       	ld	r31, Z
    13ca:	e0 2d       	mov	r30, r0
    13cc:	84 81       	ldd	r24, Z+4	; 0x04
    13ce:	c8 17       	cp	r28, r24
    13d0:	98 f3       	brcs	.-26     	; 0x13b8 <udc_reset+0x20>
    13d2:	10 92 de 22 	sts	0x22DE, r1	; 0x8022de <udc_num_configuration>
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	80 93 e2 22 	sts	0x22E2, r24	; 0x8022e2 <udc_device_status>
    13de:	90 93 e3 22 	sts	0x22E3, r25	; 0x8022e3 <udc_device_status+0x1>
    13e2:	cf 91       	pop	r28
    13e4:	08 95       	ret

000013e6 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    13e6:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    13e8:	80 91 de 22 	lds	r24, 0x22DE	; 0x8022de <udc_num_configuration>
    13ec:	88 23       	and	r24, r24
    13ee:	49 f1       	breq	.+82     	; 0x1442 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    13f0:	a0 91 dc 22 	lds	r26, 0x22DC	; 0x8022dc <udc_ptr_conf>
    13f4:	b0 91 dd 22 	lds	r27, 0x22DD	; 0x8022dd <udc_ptr_conf+0x1>
    13f8:	ed 91       	ld	r30, X+
    13fa:	fc 91       	ld	r31, X
    13fc:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    13fe:	84 81       	ldd	r24, Z+4	; 0x04
    1400:	88 23       	and	r24, r24
    1402:	f9 f0       	breq	.+62     	; 0x1442 <udc_sof_notify+0x5c>
    1404:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1406:	ec 2f       	mov	r30, r28
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	ee 0f       	add	r30, r30
    140c:	ff 1f       	adc	r31, r31
    140e:	12 96       	adiw	r26, 0x02	; 2
    1410:	8d 91       	ld	r24, X+
    1412:	9c 91       	ld	r25, X
    1414:	13 97       	sbiw	r26, 0x03	; 3
    1416:	e8 0f       	add	r30, r24
    1418:	f9 1f       	adc	r31, r25
    141a:	01 90       	ld	r0, Z+
    141c:	f0 81       	ld	r31, Z
    141e:	e0 2d       	mov	r30, r0
    1420:	00 84       	ldd	r0, Z+8	; 0x08
    1422:	f1 85       	ldd	r31, Z+9	; 0x09
    1424:	e0 2d       	mov	r30, r0
    1426:	30 97       	sbiw	r30, 0x00	; 0
    1428:	09 f0       	breq	.+2      	; 0x142c <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    142a:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    142c:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    142e:	a0 91 dc 22 	lds	r26, 0x22DC	; 0x8022dc <udc_ptr_conf>
    1432:	b0 91 dd 22 	lds	r27, 0x22DD	; 0x8022dd <udc_ptr_conf+0x1>
    1436:	ed 91       	ld	r30, X+
    1438:	fc 91       	ld	r31, X
    143a:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    143c:	84 81       	ldd	r24, Z+4	; 0x04
    143e:	c8 17       	cp	r28, r24
    1440:	10 f3       	brcs	.-60     	; 0x1406 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1442:	cf 91       	pop	r28
    1444:	08 95       	ret

00001446 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1446:	0f 93       	push	r16
    1448:	1f 93       	push	r17
    144a:	cf 93       	push	r28
    144c:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    144e:	e2 e1       	ldi	r30, 0x12	; 18
    1450:	f5 e2       	ldi	r31, 0x25	; 37
    1452:	12 86       	std	Z+10, r1	; 0x0a
    1454:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1456:	14 86       	std	Z+12, r1	; 0x0c
    1458:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    145a:	16 86       	std	Z+14, r1	; 0x0e
    145c:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    145e:	80 81       	ld	r24, Z
    1460:	88 23       	and	r24, r24
    1462:	0c f0       	brlt	.+2      	; 0x1466 <udc_process_setup+0x20>
    1464:	63 c2       	rjmp	.+1222   	; 0x192c <udc_process_setup+0x4e6>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1466:	20 91 18 25 	lds	r18, 0x2518	; 0x802518 <udd_g_ctrlreq+0x6>
    146a:	30 91 19 25 	lds	r19, 0x2519	; 0x802519 <udd_g_ctrlreq+0x7>
    146e:	21 15       	cp	r18, r1
    1470:	31 05       	cpc	r19, r1
    1472:	09 f0       	breq	.+2      	; 0x1476 <udc_process_setup+0x30>
    1474:	56 c2       	rjmp	.+1196   	; 0x1922 <udc_process_setup+0x4dc>
    1476:	51 c2       	rjmp	.+1186   	; 0x191a <udc_process_setup+0x4d4>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1478:	8f 71       	andi	r24, 0x1F	; 31
    147a:	09 f0       	breq	.+2      	; 0x147e <udc_process_setup+0x38>
    147c:	a7 c0       	rjmp	.+334    	; 0x15cc <udc_process_setup+0x186>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    147e:	90 91 13 25 	lds	r25, 0x2513	; 0x802513 <udd_g_ctrlreq+0x1>
    1482:	96 30       	cpi	r25, 0x06	; 6
    1484:	79 f0       	breq	.+30     	; 0x14a4 <udc_process_setup+0x5e>
    1486:	98 30       	cpi	r25, 0x08	; 8
    1488:	09 f4       	brne	.+2      	; 0x148c <udc_process_setup+0x46>
    148a:	96 c0       	rjmp	.+300    	; 0x15b8 <udc_process_setup+0x172>
    148c:	91 11       	cpse	r25, r1
    148e:	9e c0       	rjmp	.+316    	; 0x15cc <udc_process_setup+0x186>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1490:	22 30       	cpi	r18, 0x02	; 2
    1492:	31 05       	cpc	r19, r1
    1494:	09 f0       	breq	.+2      	; 0x1498 <udc_process_setup+0x52>
    1496:	ca c1       	rjmp	.+916    	; 0x182c <udc_process_setup+0x3e6>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1498:	62 e0       	ldi	r22, 0x02	; 2
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	82 ee       	ldi	r24, 0xE2	; 226
    149e:	92 e2       	ldi	r25, 0x22	; 34
    14a0:	31 d6       	rcall	.+3170   	; 0x2104 <udd_set_setup_payload>
    14a2:	4d c2       	rjmp	.+1178   	; 0x193e <udc_process_setup+0x4f8>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    14a4:	80 91 14 25 	lds	r24, 0x2514	; 0x802514 <udd_g_ctrlreq+0x2>
    14a8:	90 91 15 25 	lds	r25, 0x2515	; 0x802515 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    14ac:	29 2f       	mov	r18, r25
    14ae:	33 27       	eor	r19, r19
    14b0:	22 30       	cpi	r18, 0x02	; 2
    14b2:	31 05       	cpc	r19, r1
    14b4:	a9 f0       	breq	.+42     	; 0x14e0 <udc_process_setup+0x9a>
    14b6:	24 f4       	brge	.+8      	; 0x14c0 <udc_process_setup+0x7a>
    14b8:	21 30       	cpi	r18, 0x01	; 1
    14ba:	31 05       	cpc	r19, r1
    14bc:	41 f0       	breq	.+16     	; 0x14ce <udc_process_setup+0x88>
    14be:	ad c1       	rjmp	.+858    	; 0x181a <udc_process_setup+0x3d4>
    14c0:	23 30       	cpi	r18, 0x03	; 3
    14c2:	31 05       	cpc	r19, r1
    14c4:	d9 f1       	breq	.+118    	; 0x153c <udc_process_setup+0xf6>
    14c6:	2f 30       	cpi	r18, 0x0F	; 15
    14c8:	31 05       	cpc	r19, r1
    14ca:	51 f1       	breq	.+84     	; 0x1520 <udc_process_setup+0xda>
    14cc:	a6 c1       	rjmp	.+844    	; 0x181a <udc_process_setup+0x3d4>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    14ce:	80 91 72 20 	lds	r24, 0x2072	; 0x802072 <udc_config>
    14d2:	90 91 73 20 	lds	r25, 0x2073	; 0x802073 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    14d6:	dc 01       	movw	r26, r24
    14d8:	6c 91       	ld	r22, X
    14da:	70 e0       	ldi	r23, 0x00	; 0
    14dc:	13 d6       	rcall	.+3110   	; 0x2104 <udd_set_setup_payload>
    14de:	5d c0       	rjmp	.+186    	; 0x159a <udc_process_setup+0x154>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    14e0:	e0 91 72 20 	lds	r30, 0x2072	; 0x802072 <udc_config>
    14e4:	f0 91 73 20 	lds	r31, 0x2073	; 0x802073 <udc_config+0x1>
    14e8:	21 89       	ldd	r18, Z+17	; 0x11
    14ea:	82 17       	cp	r24, r18
    14ec:	08 f0       	brcs	.+2      	; 0x14f0 <udc_process_setup+0xaa>
    14ee:	9e c1       	rjmp	.+828    	; 0x182c <udc_process_setup+0x3e6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    14f0:	99 27       	eor	r25, r25
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	e0 91 74 20 	lds	r30, 0x2074	; 0x802074 <udc_config+0x2>
    14fe:	f0 91 75 20 	lds	r31, 0x2075	; 0x802075 <udc_config+0x3>
    1502:	e8 0f       	add	r30, r24
    1504:	f9 1f       	adc	r31, r25
    1506:	80 81       	ld	r24, Z
    1508:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    150a:	fc 01       	movw	r30, r24
    150c:	62 81       	ldd	r22, Z+2	; 0x02
    150e:	73 81       	ldd	r23, Z+3	; 0x03
    1510:	f9 d5       	rcall	.+3058   	; 0x2104 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1512:	e0 91 1a 25 	lds	r30, 0x251A	; 0x80251a <udd_g_ctrlreq+0x8>
    1516:	f0 91 1b 25 	lds	r31, 0x251B	; 0x80251b <udd_g_ctrlreq+0x9>
    151a:	82 e0       	ldi	r24, 0x02	; 2
    151c:	81 83       	std	Z+1, r24	; 0x01
    151e:	3d c0       	rjmp	.+122    	; 0x159a <udc_process_setup+0x154>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1520:	80 91 76 20 	lds	r24, 0x2076	; 0x802076 <udc_config+0x4>
    1524:	90 91 77 20 	lds	r25, 0x2077	; 0x802077 <udc_config+0x5>
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	09 f4       	brne	.+2      	; 0x152e <udc_process_setup+0xe8>
    152c:	7f c1       	rjmp	.+766    	; 0x182c <udc_process_setup+0x3e6>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    152e:	dc 01       	movw	r26, r24
    1530:	12 96       	adiw	r26, 0x02	; 2
    1532:	6d 91       	ld	r22, X+
    1534:	7c 91       	ld	r23, X
    1536:	13 97       	sbiw	r26, 0x03	; 3
    1538:	e5 d5       	rcall	.+3018   	; 0x2104 <udd_set_setup_payload>
    153a:	2f c0       	rjmp	.+94     	; 0x159a <udc_process_setup+0x154>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    153c:	99 27       	eor	r25, r25
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	91 05       	cpc	r25, r1
    1542:	91 f0       	breq	.+36     	; 0x1568 <udc_process_setup+0x122>
    1544:	58 f0       	brcs	.+22     	; 0x155c <udc_process_setup+0x116>
    1546:	82 30       	cpi	r24, 0x02	; 2
    1548:	91 05       	cpc	r25, r1
    154a:	09 f4       	brne	.+2      	; 0x154e <udc_process_setup+0x108>
    154c:	f4 c1       	rjmp	.+1000   	; 0x1936 <udc_process_setup+0x4f0>
    154e:	03 97       	sbiw	r24, 0x03	; 3
    1550:	09 f0       	breq	.+2      	; 0x1554 <udc_process_setup+0x10e>
    1552:	6c c1       	rjmp	.+728    	; 0x182c <udc_process_setup+0x3e6>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1554:	27 e0       	ldi	r18, 0x07	; 7
		str = udc_get_string_serial_name();
    1556:	8a e9       	ldi	r24, 0x9A	; 154
    1558:	91 e2       	ldi	r25, 0x21	; 33
    155a:	09 c0       	rjmp	.+18     	; 0x156e <udc_process_setup+0x128>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    155c:	64 e0       	ldi	r22, 0x04	; 4
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	8e e6       	ldi	r24, 0x6E	; 110
    1562:	90 e2       	ldi	r25, 0x20	; 32
    1564:	cf d5       	rcall	.+2974   	; 0x2104 <udd_set_setup_payload>
    1566:	19 c0       	rjmp	.+50     	; 0x159a <udc_process_setup+0x154>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1568:	8b e5       	ldi	r24, 0x5B	; 91
    156a:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    156c:	22 e1       	ldi	r18, 0x12	; 18
    156e:	38 2f       	mov	r19, r24
    1570:	a4 e2       	ldi	r26, 0x24	; 36
    1572:	b0 e2       	ldi	r27, 0x20	; 32
    1574:	e8 2f       	mov	r30, r24
    1576:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1578:	81 91       	ld	r24, Z+
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	8d 93       	st	X+, r24
    157e:	9d 93       	st	X+, r25
    1580:	8e 2f       	mov	r24, r30
    1582:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1584:	82 17       	cp	r24, r18
    1586:	c0 f3       	brcs	.-16     	; 0x1578 <udc_process_setup+0x132>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1588:	62 2f       	mov	r22, r18
    158a:	66 0f       	add	r22, r22
    158c:	6e 5f       	subi	r22, 0xFE	; 254
    158e:	60 93 22 20 	sts	0x2022, r22	; 0x802022 <udc_string_desc>
		udd_set_setup_payload(
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	82 e2       	ldi	r24, 0x22	; 34
    1596:	90 e2       	ldi	r25, 0x20	; 32
    1598:	b5 d5       	rcall	.+2922   	; 0x2104 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    159a:	e2 e1       	ldi	r30, 0x12	; 18
    159c:	f5 e2       	ldi	r31, 0x25	; 37
    159e:	86 81       	ldd	r24, Z+6	; 0x06
    15a0:	97 81       	ldd	r25, Z+7	; 0x07
    15a2:	22 85       	ldd	r18, Z+10	; 0x0a
    15a4:	33 85       	ldd	r19, Z+11	; 0x0b
    15a6:	82 17       	cp	r24, r18
    15a8:	93 07       	cpc	r25, r19
    15aa:	08 f0       	brcs	.+2      	; 0x15ae <udc_process_setup+0x168>
    15ac:	c8 c1       	rjmp	.+912    	; 0x193e <udc_process_setup+0x4f8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    15ae:	80 93 1c 25 	sts	0x251C, r24	; 0x80251c <udd_g_ctrlreq+0xa>
    15b2:	90 93 1d 25 	sts	0x251D, r25	; 0x80251d <udd_g_ctrlreq+0xb>
    15b6:	c3 c1       	rjmp	.+902    	; 0x193e <udc_process_setup+0x4f8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    15b8:	21 30       	cpi	r18, 0x01	; 1
    15ba:	31 05       	cpc	r19, r1
    15bc:	09 f0       	breq	.+2      	; 0x15c0 <udc_process_setup+0x17a>
    15be:	36 c1       	rjmp	.+620    	; 0x182c <udc_process_setup+0x3e6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    15c0:	61 e0       	ldi	r22, 0x01	; 1
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	8e ed       	ldi	r24, 0xDE	; 222
    15c6:	92 e2       	ldi	r25, 0x22	; 34
    15c8:	9d d5       	rcall	.+2874   	; 0x2104 <udd_set_setup_payload>
    15ca:	b9 c1       	rjmp	.+882    	; 0x193e <udc_process_setup+0x4f8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	e1 f5       	brne	.+120    	; 0x1648 <udc_process_setup+0x202>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    15d0:	90 91 13 25 	lds	r25, 0x2513	; 0x802513 <udd_g_ctrlreq+0x1>
    15d4:	9a 30       	cpi	r25, 0x0A	; 10
    15d6:	c1 f5       	brne	.+112    	; 0x1648 <udc_process_setup+0x202>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    15d8:	21 30       	cpi	r18, 0x01	; 1
    15da:	31 05       	cpc	r19, r1
    15dc:	09 f0       	breq	.+2      	; 0x15e0 <udc_process_setup+0x19a>
    15de:	26 c1       	rjmp	.+588    	; 0x182c <udc_process_setup+0x3e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    15e0:	80 91 de 22 	lds	r24, 0x22DE	; 0x8022de <udc_num_configuration>
    15e4:	88 23       	and	r24, r24
    15e6:	09 f4       	brne	.+2      	; 0x15ea <udc_process_setup+0x1a4>
    15e8:	21 c1       	rjmp	.+578    	; 0x182c <udc_process_setup+0x3e6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    15ea:	c0 91 16 25 	lds	r28, 0x2516	; 0x802516 <udd_g_ctrlreq+0x4>
    15ee:	d0 91 17 25 	lds	r29, 0x2517	; 0x802517 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    15f2:	00 91 dc 22 	lds	r16, 0x22DC	; 0x8022dc <udc_ptr_conf>
    15f6:	10 91 dd 22 	lds	r17, 0x22DD	; 0x8022dd <udc_ptr_conf+0x1>
    15fa:	d8 01       	movw	r26, r16
    15fc:	ed 91       	ld	r30, X+
    15fe:	fc 91       	ld	r31, X
    1600:	84 81       	ldd	r24, Z+4	; 0x04
    1602:	c8 17       	cp	r28, r24
    1604:	08 f0       	brcs	.+2      	; 0x1608 <udc_process_setup+0x1c2>
    1606:	12 c1       	rjmp	.+548    	; 0x182c <udc_process_setup+0x3e6>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1608:	60 e0       	ldi	r22, 0x00	; 0
    160a:	8c 2f       	mov	r24, r28
    160c:	15 de       	rcall	.-982    	; 0x1238 <udc_update_iface_desc>
    160e:	88 23       	and	r24, r24
    1610:	09 f4       	brne	.+2      	; 0x1614 <udc_process_setup+0x1ce>
    1612:	0c c1       	rjmp	.+536    	; 0x182c <udc_process_setup+0x3e6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1614:	ce 01       	movw	r24, r28
    1616:	99 27       	eor	r25, r25
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	d8 01       	movw	r26, r16
    161e:	12 96       	adiw	r26, 0x02	; 2
    1620:	ed 91       	ld	r30, X+
    1622:	fc 91       	ld	r31, X
    1624:	13 97       	sbiw	r26, 0x03	; 3
    1626:	e8 0f       	add	r30, r24
    1628:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    162a:	01 90       	ld	r0, Z+
    162c:	f0 81       	ld	r31, Z
    162e:	e0 2d       	mov	r30, r0
    1630:	86 81       	ldd	r24, Z+6	; 0x06
    1632:	97 81       	ldd	r25, Z+7	; 0x07
    1634:	fc 01       	movw	r30, r24
    1636:	19 95       	eicall
    1638:	80 93 e0 22 	sts	0x22E0, r24	; 0x8022e0 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    163c:	61 e0       	ldi	r22, 0x01	; 1
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	80 ee       	ldi	r24, 0xE0	; 224
    1642:	92 e2       	ldi	r25, 0x22	; 34
    1644:	5f d5       	rcall	.+2750   	; 0x2104 <udd_set_setup_payload>
    1646:	7b c1       	rjmp	.+758    	; 0x193e <udc_process_setup+0x4f8>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1648:	82 30       	cpi	r24, 0x02	; 2
    164a:	09 f0       	breq	.+2      	; 0x164e <udc_process_setup+0x208>
    164c:	ef c0       	rjmp	.+478    	; 0x182c <udc_process_setup+0x3e6>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    164e:	80 91 13 25 	lds	r24, 0x2513	; 0x802513 <udd_g_ctrlreq+0x1>
    1652:	81 11       	cpse	r24, r1
    1654:	e4 c0       	rjmp	.+456    	; 0x181e <udc_process_setup+0x3d8>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1656:	22 30       	cpi	r18, 0x02	; 2
    1658:	31 05       	cpc	r19, r1
    165a:	09 f0       	breq	.+2      	; 0x165e <udc_process_setup+0x218>
    165c:	e7 c0       	rjmp	.+462    	; 0x182c <udc_process_setup+0x3e6>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    165e:	80 91 16 25 	lds	r24, 0x2516	; 0x802516 <udd_g_ctrlreq+0x4>
    1662:	df d5       	rcall	.+3006   	; 0x2222 <udd_ep_is_halted>
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	80 93 d8 22 	sts	0x22D8, r24	; 0x8022d8 <udc_ep_status.4671>
    166a:	90 93 d9 22 	sts	0x22D9, r25	; 0x8022d9 <udc_ep_status.4671+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    166e:	62 e0       	ldi	r22, 0x02	; 2
    1670:	70 e0       	ldi	r23, 0x00	; 0
    1672:	88 ed       	ldi	r24, 0xD8	; 216
    1674:	92 e2       	ldi	r25, 0x22	; 34
    1676:	46 d5       	rcall	.+2700   	; 0x2104 <udd_set_setup_payload>
    1678:	62 c1       	rjmp	.+708    	; 0x193e <udc_process_setup+0x4f8>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    167a:	8f 71       	andi	r24, 0x1F	; 31
    167c:	09 f0       	breq	.+2      	; 0x1680 <udc_process_setup+0x23a>
    167e:	83 c0       	rjmp	.+262    	; 0x1786 <udc_process_setup+0x340>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1680:	90 91 13 25 	lds	r25, 0x2513	; 0x802513 <udd_g_ctrlreq+0x1>
    1684:	93 30       	cpi	r25, 0x03	; 3
    1686:	09 f4       	brne	.+2      	; 0x168a <udc_process_setup+0x244>
    1688:	cc c0       	rjmp	.+408    	; 0x1822 <udc_process_setup+0x3dc>
    168a:	18 f4       	brcc	.+6      	; 0x1692 <udc_process_setup+0x24c>
    168c:	91 30       	cpi	r25, 0x01	; 1
    168e:	a1 f0       	breq	.+40     	; 0x16b8 <udc_process_setup+0x272>
    1690:	7a c0       	rjmp	.+244    	; 0x1786 <udc_process_setup+0x340>
    1692:	95 30       	cpi	r25, 0x05	; 5
    1694:	19 f0       	breq	.+6      	; 0x169c <udc_process_setup+0x256>
    1696:	99 30       	cpi	r25, 0x09	; 9
    1698:	39 f1       	breq	.+78     	; 0x16e8 <udc_process_setup+0x2a2>
    169a:	75 c0       	rjmp	.+234    	; 0x1786 <udc_process_setup+0x340>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    169c:	80 91 18 25 	lds	r24, 0x2518	; 0x802518 <udd_g_ctrlreq+0x6>
    16a0:	90 91 19 25 	lds	r25, 0x2519	; 0x802519 <udd_g_ctrlreq+0x7>
    16a4:	89 2b       	or	r24, r25
    16a6:	09 f0       	breq	.+2      	; 0x16aa <udc_process_setup+0x264>
    16a8:	c1 c0       	rjmp	.+386    	; 0x182c <udc_process_setup+0x3e6>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    16aa:	87 e1       	ldi	r24, 0x17	; 23
    16ac:	99 e0       	ldi	r25, 0x09	; 9
    16ae:	80 93 1e 25 	sts	0x251E, r24	; 0x80251e <udd_g_ctrlreq+0xc>
    16b2:	90 93 1f 25 	sts	0x251F, r25	; 0x80251f <udd_g_ctrlreq+0xd>
    16b6:	43 c1       	rjmp	.+646    	; 0x193e <udc_process_setup+0x4f8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    16b8:	80 91 18 25 	lds	r24, 0x2518	; 0x802518 <udd_g_ctrlreq+0x6>
    16bc:	90 91 19 25 	lds	r25, 0x2519	; 0x802519 <udd_g_ctrlreq+0x7>
    16c0:	89 2b       	or	r24, r25
    16c2:	09 f0       	breq	.+2      	; 0x16c6 <udc_process_setup+0x280>
    16c4:	b3 c0       	rjmp	.+358    	; 0x182c <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    16c6:	80 91 14 25 	lds	r24, 0x2514	; 0x802514 <udd_g_ctrlreq+0x2>
    16ca:	90 91 15 25 	lds	r25, 0x2515	; 0x802515 <udd_g_ctrlreq+0x3>
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	09 f0       	breq	.+2      	; 0x16d4 <udc_process_setup+0x28e>
    16d2:	ac c0       	rjmp	.+344    	; 0x182c <udc_process_setup+0x3e6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    16d4:	80 91 e2 22 	lds	r24, 0x22E2	; 0x8022e2 <udc_device_status>
    16d8:	90 91 e3 22 	lds	r25, 0x22E3	; 0x8022e3 <udc_device_status+0x1>
    16dc:	8d 7f       	andi	r24, 0xFD	; 253
    16de:	80 93 e2 22 	sts	0x22E2, r24	; 0x8022e2 <udc_device_status>
    16e2:	90 93 e3 22 	sts	0x22E3, r25	; 0x8022e3 <udc_device_status+0x1>
    16e6:	2b c1       	rjmp	.+598    	; 0x193e <udc_process_setup+0x4f8>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    16e8:	80 91 18 25 	lds	r24, 0x2518	; 0x802518 <udd_g_ctrlreq+0x6>
    16ec:	90 91 19 25 	lds	r25, 0x2519	; 0x802519 <udd_g_ctrlreq+0x7>
    16f0:	89 2b       	or	r24, r25
    16f2:	09 f0       	breq	.+2      	; 0x16f6 <udc_process_setup+0x2b0>
    16f4:	9b c0       	rjmp	.+310    	; 0x182c <udc_process_setup+0x3e6>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    16f6:	fb d4       	rcall	.+2550   	; 0x20ee <udd_getaddress>
    16f8:	88 23       	and	r24, r24
    16fa:	09 f4       	brne	.+2      	; 0x16fe <udc_process_setup+0x2b8>
    16fc:	97 c0       	rjmp	.+302    	; 0x182c <udc_process_setup+0x3e6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    16fe:	20 91 14 25 	lds	r18, 0x2514	; 0x802514 <udd_g_ctrlreq+0x2>
    1702:	30 91 15 25 	lds	r19, 0x2515	; 0x802515 <udd_g_ctrlreq+0x3>
    1706:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1708:	e0 91 72 20 	lds	r30, 0x2072	; 0x802072 <udc_config>
    170c:	f0 91 73 20 	lds	r31, 0x2073	; 0x802073 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1710:	81 89       	ldd	r24, Z+17	; 0x11
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	82 17       	cp	r24, r18
    1716:	93 07       	cpc	r25, r19
    1718:	08 f4       	brcc	.+2      	; 0x171c <udc_process_setup+0x2d6>
    171a:	88 c0       	rjmp	.+272    	; 0x182c <udc_process_setup+0x3e6>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    171c:	3d de       	rcall	.-902    	; 0x1398 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    171e:	80 91 14 25 	lds	r24, 0x2514	; 0x802514 <udd_g_ctrlreq+0x2>
    1722:	90 91 15 25 	lds	r25, 0x2515	; 0x802515 <udd_g_ctrlreq+0x3>
    1726:	80 93 de 22 	sts	0x22DE, r24	; 0x8022de <udc_num_configuration>
	if (udc_num_configuration == 0) {
    172a:	88 23       	and	r24, r24
    172c:	09 f4       	brne	.+2      	; 0x1730 <udc_process_setup+0x2ea>
    172e:	07 c1       	rjmp	.+526    	; 0x193e <udc_process_setup+0x4f8>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1730:	99 27       	eor	r25, r25
    1732:	81 50       	subi	r24, 0x01	; 1
    1734:	90 4c       	sbci	r25, 0xC0	; 192
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	e0 91 74 20 	lds	r30, 0x2074	; 0x802074 <udc_config+0x2>
    1742:	f0 91 75 20 	lds	r31, 0x2075	; 0x802075 <udc_config+0x3>
    1746:	e8 0f       	add	r30, r24
    1748:	f9 1f       	adc	r31, r25
    174a:	e0 93 dc 22 	sts	0x22DC, r30	; 0x8022dc <udc_ptr_conf>
    174e:	f0 93 dd 22 	sts	0x22DD, r31	; 0x8022dd <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1752:	01 90       	ld	r0, Z+
    1754:	f0 81       	ld	r31, Z
    1756:	e0 2d       	mov	r30, r0
    1758:	84 81       	ldd	r24, Z+4	; 0x04
    175a:	88 23       	and	r24, r24
    175c:	09 f4       	brne	.+2      	; 0x1760 <udc_process_setup+0x31a>
    175e:	ef c0       	rjmp	.+478    	; 0x193e <udc_process_setup+0x4f8>
    1760:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1762:	60 e0       	ldi	r22, 0x00	; 0
    1764:	8c 2f       	mov	r24, r28
    1766:	e4 dd       	rcall	.-1080   	; 0x1330 <udc_iface_enable>
    1768:	88 23       	and	r24, r24
    176a:	09 f4       	brne	.+2      	; 0x176e <udc_process_setup+0x328>
    176c:	5f c0       	rjmp	.+190    	; 0x182c <udc_process_setup+0x3e6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    176e:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1770:	e0 91 dc 22 	lds	r30, 0x22DC	; 0x8022dc <udc_ptr_conf>
    1774:	f0 91 dd 22 	lds	r31, 0x22DD	; 0x8022dd <udc_ptr_conf+0x1>
    1778:	01 90       	ld	r0, Z+
    177a:	f0 81       	ld	r31, Z
    177c:	e0 2d       	mov	r30, r0
    177e:	84 81       	ldd	r24, Z+4	; 0x04
    1780:	c8 17       	cp	r28, r24
    1782:	78 f3       	brcs	.-34     	; 0x1762 <udc_process_setup+0x31c>
    1784:	dc c0       	rjmp	.+440    	; 0x193e <udc_process_setup+0x4f8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	e1 f4       	brne	.+56     	; 0x17c2 <udc_process_setup+0x37c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    178a:	90 91 13 25 	lds	r25, 0x2513	; 0x802513 <udd_g_ctrlreq+0x1>
    178e:	9b 30       	cpi	r25, 0x0B	; 11
    1790:	c1 f4       	brne	.+48     	; 0x17c2 <udc_process_setup+0x37c>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1792:	80 91 18 25 	lds	r24, 0x2518	; 0x802518 <udd_g_ctrlreq+0x6>
    1796:	90 91 19 25 	lds	r25, 0x2519	; 0x802519 <udd_g_ctrlreq+0x7>
    179a:	89 2b       	or	r24, r25
    179c:	09 f0       	breq	.+2      	; 0x17a0 <udc_process_setup+0x35a>
    179e:	46 c0       	rjmp	.+140    	; 0x182c <udc_process_setup+0x3e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    17a0:	80 91 de 22 	lds	r24, 0x22DE	; 0x8022de <udc_num_configuration>
    17a4:	88 23       	and	r24, r24
    17a6:	09 f4       	brne	.+2      	; 0x17aa <udc_process_setup+0x364>
    17a8:	41 c0       	rjmp	.+130    	; 0x182c <udc_process_setup+0x3e6>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    17aa:	e2 e1       	ldi	r30, 0x12	; 18
    17ac:	f5 e2       	ldi	r31, 0x25	; 37
    17ae:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    17b0:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    17b2:	8c 2f       	mov	r24, r28
    17b4:	7b dd       	rcall	.-1290   	; 0x12ac <udc_iface_disable>
    17b6:	88 23       	and	r24, r24
    17b8:	c9 f1       	breq	.+114    	; 0x182c <udc_process_setup+0x3e6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    17ba:	6d 2f       	mov	r22, r29
    17bc:	8c 2f       	mov	r24, r28
    17be:	b8 dd       	rcall	.-1168   	; 0x1330 <udc_iface_enable>
    17c0:	33 c0       	rjmp	.+102    	; 0x1828 <udc_process_setup+0x3e2>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    17c2:	82 30       	cpi	r24, 0x02	; 2
    17c4:	99 f5       	brne	.+102    	; 0x182c <udc_process_setup+0x3e6>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    17c6:	80 91 13 25 	lds	r24, 0x2513	; 0x802513 <udd_g_ctrlreq+0x1>
    17ca:	81 30       	cpi	r24, 0x01	; 1
    17cc:	19 f0       	breq	.+6      	; 0x17d4 <udc_process_setup+0x38e>
    17ce:	83 30       	cpi	r24, 0x03	; 3
    17d0:	89 f0       	breq	.+34     	; 0x17f4 <udc_process_setup+0x3ae>
    17d2:	29 c0       	rjmp	.+82     	; 0x1826 <udc_process_setup+0x3e0>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    17d4:	80 91 18 25 	lds	r24, 0x2518	; 0x802518 <udd_g_ctrlreq+0x6>
    17d8:	90 91 19 25 	lds	r25, 0x2519	; 0x802519 <udd_g_ctrlreq+0x7>
    17dc:	89 2b       	or	r24, r25
    17de:	31 f5       	brne	.+76     	; 0x182c <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    17e0:	80 91 14 25 	lds	r24, 0x2514	; 0x802514 <udd_g_ctrlreq+0x2>
    17e4:	90 91 15 25 	lds	r25, 0x2515	; 0x802515 <udd_g_ctrlreq+0x3>
    17e8:	89 2b       	or	r24, r25
    17ea:	01 f5       	brne	.+64     	; 0x182c <udc_process_setup+0x3e6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    17ec:	80 91 16 25 	lds	r24, 0x2516	; 0x802516 <udd_g_ctrlreq+0x4>
    17f0:	33 d5       	rcall	.+2662   	; 0x2258 <udd_ep_clear_halt>
    17f2:	1a c0       	rjmp	.+52     	; 0x1828 <udc_process_setup+0x3e2>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    17f4:	80 91 18 25 	lds	r24, 0x2518	; 0x802518 <udd_g_ctrlreq+0x6>
    17f8:	90 91 19 25 	lds	r25, 0x2519	; 0x802519 <udd_g_ctrlreq+0x7>
    17fc:	89 2b       	or	r24, r25
    17fe:	b1 f4       	brne	.+44     	; 0x182c <udc_process_setup+0x3e6>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1800:	80 91 14 25 	lds	r24, 0x2514	; 0x802514 <udd_g_ctrlreq+0x2>
    1804:	90 91 15 25 	lds	r25, 0x2515	; 0x802515 <udd_g_ctrlreq+0x3>
    1808:	89 2b       	or	r24, r25
    180a:	81 f4       	brne	.+32     	; 0x182c <udc_process_setup+0x3e6>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    180c:	c2 e1       	ldi	r28, 0x12	; 18
    180e:	d5 e2       	ldi	r29, 0x25	; 37
    1810:	8c 81       	ldd	r24, Y+4	; 0x04
    1812:	20 d6       	rcall	.+3136   	; 0x2454 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1814:	8c 81       	ldd	r24, Y+4	; 0x04
    1816:	83 d6       	rcall	.+3334   	; 0x251e <udd_ep_set_halt>
    1818:	07 c0       	rjmp	.+14     	; 0x1828 <udc_process_setup+0x3e2>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	05 c0       	rjmp	.+10     	; 0x1828 <udc_process_setup+0x3e2>
				break;
			}
		}
#endif
	}
	return false;
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	03 c0       	rjmp	.+6      	; 0x1828 <udc_process_setup+0x3e2>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	01 c0       	rjmp	.+2      	; 0x1828 <udc_process_setup+0x3e2>
				break;
			}
		}
#endif
	}
	return false;
    1826:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1828:	81 11       	cpse	r24, r1
    182a:	8a c0       	rjmp	.+276    	; 0x1940 <udc_process_setup+0x4fa>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    182c:	80 91 12 25 	lds	r24, 0x2512	; 0x802512 <udd_g_ctrlreq>
    1830:	8f 71       	andi	r24, 0x1F	; 31
    1832:	81 30       	cpi	r24, 0x01	; 1
    1834:	71 f5       	brne	.+92     	; 0x1892 <udc_process_setup+0x44c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1836:	80 91 de 22 	lds	r24, 0x22DE	; 0x8022de <udc_num_configuration>
    183a:	88 23       	and	r24, r24
    183c:	51 f1       	breq	.+84     	; 0x1892 <udc_process_setup+0x44c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    183e:	00 91 16 25 	lds	r16, 0x2516	; 0x802516 <udd_g_ctrlreq+0x4>
    1842:	10 91 17 25 	lds	r17, 0x2517	; 0x802517 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1846:	c0 91 dc 22 	lds	r28, 0x22DC	; 0x8022dc <udc_ptr_conf>
    184a:	d0 91 dd 22 	lds	r29, 0x22DD	; 0x8022dd <udc_ptr_conf+0x1>
    184e:	e8 81       	ld	r30, Y
    1850:	f9 81       	ldd	r31, Y+1	; 0x01
    1852:	84 81       	ldd	r24, Z+4	; 0x04
    1854:	08 17       	cp	r16, r24
    1856:	e8 f4       	brcc	.+58     	; 0x1892 <udc_process_setup+0x44c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1858:	60 e0       	ldi	r22, 0x00	; 0
    185a:	80 2f       	mov	r24, r16
    185c:	ed dc       	rcall	.-1574   	; 0x1238 <udc_update_iface_desc>
    185e:	88 23       	and	r24, r24
    1860:	c1 f0       	breq	.+48     	; 0x1892 <udc_process_setup+0x44c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1862:	f8 01       	movw	r30, r16
    1864:	ff 27       	eor	r31, r31
    1866:	cf 01       	movw	r24, r30
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	ea 81       	ldd	r30, Y+2	; 0x02
    186e:	fb 81       	ldd	r31, Y+3	; 0x03
    1870:	e8 0f       	add	r30, r24
    1872:	f9 1f       	adc	r31, r25
    1874:	c0 81       	ld	r28, Z
    1876:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1878:	ee 81       	ldd	r30, Y+6	; 0x06
    187a:	ff 81       	ldd	r31, Y+7	; 0x07
    187c:	19 95       	eicall
    187e:	68 2f       	mov	r22, r24
    1880:	80 2f       	mov	r24, r16
    1882:	da dc       	rcall	.-1612   	; 0x1238 <udc_update_iface_desc>
    1884:	88 23       	and	r24, r24
    1886:	29 f0       	breq	.+10     	; 0x1892 <udc_process_setup+0x44c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1888:	ec 81       	ldd	r30, Y+4	; 0x04
    188a:	fd 81       	ldd	r31, Y+5	; 0x05
    188c:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    188e:	81 11       	cpse	r24, r1
    1890:	57 c0       	rjmp	.+174    	; 0x1940 <udc_process_setup+0x4fa>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1892:	80 91 12 25 	lds	r24, 0x2512	; 0x802512 <udd_g_ctrlreq>
    1896:	8f 71       	andi	r24, 0x1F	; 31
    1898:	82 30       	cpi	r24, 0x02	; 2
    189a:	09 f0       	breq	.+2      	; 0x189e <udc_process_setup+0x458>
    189c:	40 c0       	rjmp	.+128    	; 0x191e <udc_process_setup+0x4d8>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    189e:	80 91 de 22 	lds	r24, 0x22DE	; 0x8022de <udc_num_configuration>
    18a2:	88 23       	and	r24, r24
    18a4:	b1 f1       	breq	.+108    	; 0x1912 <udc_process_setup+0x4cc>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18a6:	a0 91 dc 22 	lds	r26, 0x22DC	; 0x8022dc <udc_ptr_conf>
    18aa:	b0 91 dd 22 	lds	r27, 0x22DD	; 0x8022dd <udc_ptr_conf+0x1>
    18ae:	ed 91       	ld	r30, X+
    18b0:	fc 91       	ld	r31, X
    18b2:	11 97       	sbiw	r26, 0x01	; 1
    18b4:	84 81       	ldd	r24, Z+4	; 0x04
    18b6:	88 23       	and	r24, r24
    18b8:	71 f1       	breq	.+92     	; 0x1916 <udc_process_setup+0x4d0>
    18ba:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    18bc:	ec 2f       	mov	r30, r28
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	ee 0f       	add	r30, r30
    18c2:	ff 1f       	adc	r31, r31
    18c4:	12 96       	adiw	r26, 0x02	; 2
    18c6:	8d 91       	ld	r24, X+
    18c8:	9c 91       	ld	r25, X
    18ca:	13 97       	sbiw	r26, 0x03	; 3
    18cc:	e8 0f       	add	r30, r24
    18ce:	f9 1f       	adc	r31, r25
    18d0:	00 81       	ld	r16, Z
    18d2:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    18d4:	d8 01       	movw	r26, r16
    18d6:	16 96       	adiw	r26, 0x06	; 6
    18d8:	ed 91       	ld	r30, X+
    18da:	fc 91       	ld	r31, X
    18dc:	17 97       	sbiw	r26, 0x07	; 7
    18de:	19 95       	eicall
    18e0:	68 2f       	mov	r22, r24
    18e2:	8c 2f       	mov	r24, r28
    18e4:	a9 dc       	rcall	.-1710   	; 0x1238 <udc_update_iface_desc>
    18e6:	88 23       	and	r24, r24
    18e8:	59 f1       	breq	.+86     	; 0x1940 <udc_process_setup+0x4fa>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    18ea:	d8 01       	movw	r26, r16
    18ec:	14 96       	adiw	r26, 0x04	; 4
    18ee:	ed 91       	ld	r30, X+
    18f0:	fc 91       	ld	r31, X
    18f2:	15 97       	sbiw	r26, 0x05	; 5
    18f4:	19 95       	eicall
    18f6:	81 11       	cpse	r24, r1
    18f8:	23 c0       	rjmp	.+70     	; 0x1940 <udc_process_setup+0x4fa>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    18fa:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18fc:	a0 91 dc 22 	lds	r26, 0x22DC	; 0x8022dc <udc_ptr_conf>
    1900:	b0 91 dd 22 	lds	r27, 0x22DD	; 0x8022dd <udc_ptr_conf+0x1>
    1904:	ed 91       	ld	r30, X+
    1906:	fc 91       	ld	r31, X
    1908:	11 97       	sbiw	r26, 0x01	; 1
    190a:	94 81       	ldd	r25, Z+4	; 0x04
    190c:	c9 17       	cp	r28, r25
    190e:	b0 f2       	brcs	.-84     	; 0x18bc <udc_process_setup+0x476>
    1910:	17 c0       	rjmp	.+46     	; 0x1940 <udc_process_setup+0x4fa>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	15 c0       	rjmp	.+42     	; 0x1940 <udc_process_setup+0x4fa>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	13 c0       	rjmp	.+38     	; 0x1940 <udc_process_setup+0x4fa>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	11 c0       	rjmp	.+34     	; 0x1940 <udc_process_setup+0x4fa>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	0f c0       	rjmp	.+30     	; 0x1940 <udc_process_setup+0x4fa>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1922:	98 2f       	mov	r25, r24
    1924:	90 76       	andi	r25, 0x60	; 96
    1926:	09 f0       	breq	.+2      	; 0x192a <udc_process_setup+0x4e4>
    1928:	81 cf       	rjmp	.-254    	; 0x182c <udc_process_setup+0x3e6>
    192a:	a6 cd       	rjmp	.-1204   	; 0x1478 <udc_process_setup+0x32>
    192c:	98 2f       	mov	r25, r24
    192e:	90 76       	andi	r25, 0x60	; 96
    1930:	09 f0       	breq	.+2      	; 0x1934 <udc_process_setup+0x4ee>
    1932:	7c cf       	rjmp	.-264    	; 0x182c <udc_process_setup+0x3e6>
    1934:	a2 ce       	rjmp	.-700    	; 0x167a <udc_process_setup+0x234>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1936:	22 e1       	ldi	r18, 0x12	; 18
		str = udc_string_product_name;
    1938:	88 e4       	ldi	r24, 0x48	; 72
    193a:	90 e2       	ldi	r25, 0x20	; 32
    193c:	18 ce       	rjmp	.-976    	; 0x156e <udc_process_setup+0x128>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    193e:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	1f 91       	pop	r17
    1946:	0f 91       	pop	r16
    1948:	08 95       	ret

0000194a <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	1f 92       	push	r1
    1950:	1f 92       	push	r1
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	81 11       	cpse	r24, r1
    1958:	26 c0       	rjmp	.+76     	; 0x19a6 <udd_sleep_mode+0x5c>
    195a:	90 91 10 24 	lds	r25, 0x2410	; 0x802410 <udd_b_idle>
    195e:	99 23       	and	r25, r25
    1960:	f9 f0       	breq	.+62     	; 0x19a0 <udd_sleep_mode+0x56>
    1962:	90 91 23 25 	lds	r25, 0x2523	; 0x802523 <sleepmgr_locks+0x1>
    1966:	91 11       	cpse	r25, r1
    1968:	01 c0       	rjmp	.+2      	; 0x196c <udd_sleep_mode+0x22>
    196a:	ff cf       	rjmp	.-2      	; 0x196a <udd_sleep_mode+0x20>
    196c:	9f b7       	in	r25, 0x3f	; 63
    196e:	9a 83       	std	Y+2, r25	; 0x02
    1970:	f8 94       	cli
    1972:	2a 81       	ldd	r18, Y+2	; 0x02
    1974:	e2 e2       	ldi	r30, 0x22	; 34
    1976:	f5 e2       	ldi	r31, 0x25	; 37
    1978:	91 81       	ldd	r25, Z+1	; 0x01
    197a:	91 50       	subi	r25, 0x01	; 1
    197c:	91 83       	std	Z+1, r25	; 0x01
    197e:	2f bf       	out	0x3f, r18	; 63
    1980:	0f c0       	rjmp	.+30     	; 0x19a0 <udd_sleep_mode+0x56>
    1982:	90 91 23 25 	lds	r25, 0x2523	; 0x802523 <sleepmgr_locks+0x1>
    1986:	9f 3f       	cpi	r25, 0xFF	; 255
    1988:	09 f4       	brne	.+2      	; 0x198c <udd_sleep_mode+0x42>
    198a:	ff cf       	rjmp	.-2      	; 0x198a <udd_sleep_mode+0x40>
    198c:	9f b7       	in	r25, 0x3f	; 63
    198e:	99 83       	std	Y+1, r25	; 0x01
    1990:	f8 94       	cli
    1992:	29 81       	ldd	r18, Y+1	; 0x01
    1994:	e2 e2       	ldi	r30, 0x22	; 34
    1996:	f5 e2       	ldi	r31, 0x25	; 37
    1998:	91 81       	ldd	r25, Z+1	; 0x01
    199a:	9f 5f       	subi	r25, 0xFF	; 255
    199c:	91 83       	std	Z+1, r25	; 0x01
    199e:	2f bf       	out	0x3f, r18	; 63
    19a0:	80 93 10 24 	sts	0x2410, r24	; 0x802410 <udd_b_idle>
    19a4:	05 c0       	rjmp	.+10     	; 0x19b0 <udd_sleep_mode+0x66>
    19a6:	90 91 10 24 	lds	r25, 0x2410	; 0x802410 <udd_b_idle>
    19aa:	99 23       	and	r25, r25
    19ac:	51 f3       	breq	.-44     	; 0x1982 <udd_sleep_mode+0x38>
    19ae:	f8 cf       	rjmp	.-16     	; 0x19a0 <udd_sleep_mode+0x56>
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	08 95       	ret

000019ba <udd_ctrl_init>:
    19ba:	0f 93       	push	r16
    19bc:	e8 ec       	ldi	r30, 0xC8	; 200
    19be:	f4 e0       	ldi	r31, 0x04	; 4
    19c0:	80 81       	ld	r24, Z
    19c2:	8f 7d       	andi	r24, 0xDF	; 223
    19c4:	80 83       	st	Z, r24
    19c6:	80 81       	ld	r24, Z
    19c8:	8f 7d       	andi	r24, 0xDF	; 223
    19ca:	80 83       	st	Z, r24
    19cc:	e4 ee       	ldi	r30, 0xE4	; 228
    19ce:	f3 e2       	ldi	r31, 0x23	; 35
    19d0:	02 e0       	ldi	r16, 0x02	; 2
    19d2:	05 93       	las	Z, r16
    19d4:	10 92 e6 23 	sts	0x23E6, r1	; 0x8023e6 <udd_sram+0x16>
    19d8:	10 92 e7 23 	sts	0x23E7, r1	; 0x8023e7 <udd_sram+0x17>
    19dc:	00 e2       	ldi	r16, 0x20	; 32
    19de:	06 93       	lac	Z, r16
    19e0:	00 e4       	ldi	r16, 0x40	; 64
    19e2:	06 93       	lac	Z, r16
    19e4:	ec ed       	ldi	r30, 0xDC	; 220
    19e6:	f3 e2       	ldi	r31, 0x23	; 35
    19e8:	00 e4       	ldi	r16, 0x40	; 64
    19ea:	06 93       	lac	Z, r16
    19ec:	e2 e1       	ldi	r30, 0x12	; 18
    19ee:	f5 e2       	ldi	r31, 0x25	; 37
    19f0:	14 86       	std	Z+12, r1	; 0x0c
    19f2:	15 86       	std	Z+13, r1	; 0x0d
    19f4:	16 86       	std	Z+14, r1	; 0x0e
    19f6:	17 86       	std	Z+15, r1	; 0x0f
    19f8:	12 86       	std	Z+10, r1	; 0x0a
    19fa:	13 86       	std	Z+11, r1	; 0x0b
    19fc:	10 92 cd 23 	sts	0x23CD, r1	; 0x8023cd <udd_ep_control_state>
    1a00:	0f 91       	pop	r16
    1a02:	08 95       	ret

00001a04 <udd_ctrl_stall_data>:
    1a04:	0f 93       	push	r16
    1a06:	85 e0       	ldi	r24, 0x05	; 5
    1a08:	80 93 cd 23 	sts	0x23CD, r24	; 0x8023cd <udd_ep_control_state>
    1a0c:	e5 ee       	ldi	r30, 0xE5	; 229
    1a0e:	f3 e2       	ldi	r31, 0x23	; 35
    1a10:	04 e0       	ldi	r16, 0x04	; 4
    1a12:	05 93       	las	Z, r16
    1a14:	ed ed       	ldi	r30, 0xDD	; 221
    1a16:	f3 e2       	ldi	r31, 0x23	; 35
    1a18:	04 e0       	ldi	r16, 0x04	; 4
    1a1a:	05 93       	las	Z, r16
    1a1c:	0f 91       	pop	r16
    1a1e:	08 95       	ret

00001a20 <udd_ctrl_send_zlp_in>:
    1a20:	0f 93       	push	r16
    1a22:	83 e0       	ldi	r24, 0x03	; 3
    1a24:	80 93 cd 23 	sts	0x23CD, r24	; 0x8023cd <udd_ep_control_state>
    1a28:	10 92 e6 23 	sts	0x23E6, r1	; 0x8023e6 <udd_sram+0x16>
    1a2c:	10 92 e7 23 	sts	0x23E7, r1	; 0x8023e7 <udd_sram+0x17>
    1a30:	e4 ee       	ldi	r30, 0xE4	; 228
    1a32:	f3 e2       	ldi	r31, 0x23	; 35
    1a34:	02 e0       	ldi	r16, 0x02	; 2
    1a36:	06 93       	lac	Z, r16
    1a38:	0f 91       	pop	r16
    1a3a:	08 95       	ret

00001a3c <udd_ctrl_endofrequest>:
    1a3c:	e0 91 1e 25 	lds	r30, 0x251E	; 0x80251e <udd_g_ctrlreq+0xc>
    1a40:	f0 91 1f 25 	lds	r31, 0x251F	; 0x80251f <udd_g_ctrlreq+0xd>
    1a44:	30 97       	sbiw	r30, 0x00	; 0
    1a46:	09 f0       	breq	.+2      	; 0x1a4a <udd_ctrl_endofrequest+0xe>
    1a48:	19 95       	eicall
    1a4a:	08 95       	ret

00001a4c <udd_ctrl_in_sent>:
    1a4c:	0f 93       	push	r16
    1a4e:	cf 93       	push	r28
    1a50:	df 93       	push	r29
    1a52:	80 91 cd 23 	lds	r24, 0x23CD	; 0x8023cd <udd_ep_control_state>
    1a56:	83 30       	cpi	r24, 0x03	; 3
    1a58:	19 f4       	brne	.+6      	; 0x1a60 <udd_ctrl_in_sent+0x14>
    1a5a:	f0 df       	rcall	.-32     	; 0x1a3c <udd_ctrl_endofrequest>
    1a5c:	ae df       	rcall	.-164    	; 0x19ba <udd_ctrl_init>
    1a5e:	5e c0       	rjmp	.+188    	; 0x1b1c <udd_ctrl_in_sent+0xd0>
    1a60:	80 91 c9 23 	lds	r24, 0x23C9	; 0x8023c9 <udd_ctrl_payload_nb_trans>
    1a64:	90 91 ca 23 	lds	r25, 0x23CA	; 0x8023ca <udd_ctrl_payload_nb_trans+0x1>
    1a68:	c0 91 1c 25 	lds	r28, 0x251C	; 0x80251c <udd_g_ctrlreq+0xa>
    1a6c:	d0 91 1d 25 	lds	r29, 0x251D	; 0x80251d <udd_g_ctrlreq+0xb>
    1a70:	c8 1b       	sub	r28, r24
    1a72:	d9 0b       	sbc	r29, r25
    1a74:	71 f5       	brne	.+92     	; 0x1ad2 <udd_ctrl_in_sent+0x86>
    1a76:	20 91 cb 23 	lds	r18, 0x23CB	; 0x8023cb <udd_ctrl_prev_payload_nb_trans>
    1a7a:	30 91 cc 23 	lds	r19, 0x23CC	; 0x8023cc <udd_ctrl_prev_payload_nb_trans+0x1>
    1a7e:	82 0f       	add	r24, r18
    1a80:	93 1f       	adc	r25, r19
    1a82:	80 93 cb 23 	sts	0x23CB, r24	; 0x8023cb <udd_ctrl_prev_payload_nb_trans>
    1a86:	90 93 cc 23 	sts	0x23CC, r25	; 0x8023cc <udd_ctrl_prev_payload_nb_trans+0x1>
    1a8a:	20 91 18 25 	lds	r18, 0x2518	; 0x802518 <udd_g_ctrlreq+0x6>
    1a8e:	30 91 19 25 	lds	r19, 0x2519	; 0x802519 <udd_g_ctrlreq+0x7>
    1a92:	82 17       	cp	r24, r18
    1a94:	93 07       	cpc	r25, r19
    1a96:	21 f0       	breq	.+8      	; 0x1aa0 <udd_ctrl_in_sent+0x54>
    1a98:	80 91 e4 22 	lds	r24, 0x22E4	; 0x8022e4 <b_shortpacket.5383>
    1a9c:	88 23       	and	r24, r24
    1a9e:	41 f0       	breq	.+16     	; 0x1ab0 <udd_ctrl_in_sent+0x64>
    1aa0:	84 e0       	ldi	r24, 0x04	; 4
    1aa2:	80 93 cd 23 	sts	0x23CD, r24	; 0x8023cd <udd_ep_control_state>
    1aa6:	ec ed       	ldi	r30, 0xDC	; 220
    1aa8:	f3 e2       	ldi	r31, 0x23	; 35
    1aaa:	02 e0       	ldi	r16, 0x02	; 2
    1aac:	06 93       	lac	Z, r16
    1aae:	36 c0       	rjmp	.+108    	; 0x1b1c <udd_ctrl_in_sent+0xd0>
    1ab0:	e0 91 20 25 	lds	r30, 0x2520	; 0x802520 <udd_g_ctrlreq+0xe>
    1ab4:	f0 91 21 25 	lds	r31, 0x2521	; 0x802521 <udd_g_ctrlreq+0xf>
    1ab8:	30 97       	sbiw	r30, 0x00	; 0
    1aba:	99 f0       	breq	.+38     	; 0x1ae2 <udd_ctrl_in_sent+0x96>
    1abc:	19 95       	eicall
    1abe:	88 23       	and	r24, r24
    1ac0:	81 f0       	breq	.+32     	; 0x1ae2 <udd_ctrl_in_sent+0x96>
    1ac2:	10 92 c9 23 	sts	0x23C9, r1	; 0x8023c9 <udd_ctrl_payload_nb_trans>
    1ac6:	10 92 ca 23 	sts	0x23CA, r1	; 0x8023ca <udd_ctrl_payload_nb_trans+0x1>
    1aca:	c0 91 1c 25 	lds	r28, 0x251C	; 0x80251c <udd_g_ctrlreq+0xa>
    1ace:	d0 91 1d 25 	lds	r29, 0x251D	; 0x80251d <udd_g_ctrlreq+0xb>
    1ad2:	c0 34       	cpi	r28, 0x40	; 64
    1ad4:	d1 05       	cpc	r29, r1
    1ad6:	28 f0       	brcs	.+10     	; 0x1ae2 <udd_ctrl_in_sent+0x96>
    1ad8:	10 92 e4 22 	sts	0x22E4, r1	; 0x8022e4 <b_shortpacket.5383>
    1adc:	c0 e4       	ldi	r28, 0x40	; 64
    1ade:	d0 e0       	ldi	r29, 0x00	; 0
    1ae0:	03 c0       	rjmp	.+6      	; 0x1ae8 <udd_ctrl_in_sent+0x9c>
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	80 93 e4 22 	sts	0x22E4, r24	; 0x8022e4 <b_shortpacket.5383>
    1ae8:	e0 ed       	ldi	r30, 0xD0	; 208
    1aea:	f3 e2       	ldi	r31, 0x23	; 35
    1aec:	c6 8b       	std	Z+22, r28	; 0x16
    1aee:	d7 8b       	std	Z+23, r29	; 0x17
    1af0:	80 91 c9 23 	lds	r24, 0x23C9	; 0x8023c9 <udd_ctrl_payload_nb_trans>
    1af4:	90 91 ca 23 	lds	r25, 0x23CA	; 0x8023ca <udd_ctrl_payload_nb_trans+0x1>
    1af8:	20 91 1a 25 	lds	r18, 0x251A	; 0x80251a <udd_g_ctrlreq+0x8>
    1afc:	30 91 1b 25 	lds	r19, 0x251B	; 0x80251b <udd_g_ctrlreq+0x9>
    1b00:	28 0f       	add	r18, r24
    1b02:	39 1f       	adc	r19, r25
    1b04:	20 8f       	std	Z+24, r18	; 0x18
    1b06:	31 8f       	std	Z+25, r19	; 0x19
    1b08:	c8 0f       	add	r28, r24
    1b0a:	d9 1f       	adc	r29, r25
    1b0c:	c0 93 c9 23 	sts	0x23C9, r28	; 0x8023c9 <udd_ctrl_payload_nb_trans>
    1b10:	d0 93 ca 23 	sts	0x23CA, r29	; 0x8023ca <udd_ctrl_payload_nb_trans+0x1>
    1b14:	e4 ee       	ldi	r30, 0xE4	; 228
    1b16:	f3 e2       	ldi	r31, 0x23	; 35
    1b18:	02 e0       	ldi	r16, 0x02	; 2
    1b1a:	06 93       	lac	Z, r16
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	0f 91       	pop	r16
    1b22:	08 95       	ret

00001b24 <udd_ep_get_size>:
    1b24:	fc 01       	movw	r30, r24
    1b26:	81 81       	ldd	r24, Z+1	; 0x01
    1b28:	e8 2f       	mov	r30, r24
    1b2a:	e7 70       	andi	r30, 0x07	; 7
    1b2c:	8e 2f       	mov	r24, r30
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	fc 01       	movw	r30, r24
    1b32:	31 97       	sbiw	r30, 0x01	; 1
    1b34:	e7 30       	cpi	r30, 0x07	; 7
    1b36:	f1 05       	cpc	r31, r1
    1b38:	d0 f4       	brcc	.+52     	; 0x1b6e <udd_ep_get_size+0x4a>
    1b3a:	88 27       	eor	r24, r24
    1b3c:	e2 50       	subi	r30, 0x02	; 2
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	8f 4f       	sbci	r24, 0xFF	; 255
    1b42:	93 c7       	rjmp	.+3878   	; 0x2a6a <__tablejump2__>
    1b44:	80 e1       	ldi	r24, 0x10	; 16
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	08 95       	ret
    1b4a:	80 e2       	ldi	r24, 0x20	; 32
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	08 95       	ret
    1b50:	80 e4       	ldi	r24, 0x40	; 64
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	08 95       	ret
    1b56:	80 e8       	ldi	r24, 0x80	; 128
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	08 95       	ret
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	91 e0       	ldi	r25, 0x01	; 1
    1b60:	08 95       	ret
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	92 e0       	ldi	r25, 0x02	; 2
    1b66:	08 95       	ret
    1b68:	8f ef       	ldi	r24, 0xFF	; 255
    1b6a:	93 e0       	ldi	r25, 0x03	; 3
    1b6c:	08 95       	ret
    1b6e:	88 e0       	ldi	r24, 0x08	; 8
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	08 95       	ret

00001b74 <udd_ep_get_job>:
    1b74:	28 2f       	mov	r18, r24
    1b76:	2f 70       	andi	r18, 0x0F	; 15
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	22 0f       	add	r18, r18
    1b7c:	33 1f       	adc	r19, r19
    1b7e:	08 2e       	mov	r0, r24
    1b80:	00 0c       	add	r0, r0
    1b82:	99 0b       	sbc	r25, r25
    1b84:	88 27       	eor	r24, r24
    1b86:	99 0f       	add	r25, r25
    1b88:	88 1f       	adc	r24, r24
    1b8a:	99 27       	eor	r25, r25
    1b8c:	82 0f       	add	r24, r18
    1b8e:	93 1f       	adc	r25, r19
    1b90:	02 97       	sbiw	r24, 0x02	; 2
    1b92:	9c 01       	movw	r18, r24
    1b94:	22 0f       	add	r18, r18
    1b96:	33 1f       	adc	r19, r19
    1b98:	22 0f       	add	r18, r18
    1b9a:	33 1f       	adc	r19, r19
    1b9c:	22 0f       	add	r18, r18
    1b9e:	33 1f       	adc	r19, r19
    1ba0:	82 0f       	add	r24, r18
    1ba2:	93 1f       	adc	r25, r19
    1ba4:	8b 59       	subi	r24, 0x9B	; 155
    1ba6:	9c 4d       	sbci	r25, 0xDC	; 220
    1ba8:	08 95       	ret

00001baa <udd_ctrl_interrupt_tc_setup>:
    1baa:	0f 93       	push	r16
    1bac:	cf 93       	push	r28
    1bae:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1bb2:	80 ff       	sbrs	r24, 0
    1bb4:	64 c0       	rjmp	.+200    	; 0x1c7e <udd_ctrl_interrupt_tc_setup+0xd4>
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1bbc:	ec ed       	ldi	r30, 0xDC	; 220
    1bbe:	f3 e2       	ldi	r31, 0x23	; 35
    1bc0:	00 e8       	ldi	r16, 0x80	; 128
    1bc2:	06 93       	lac	Z, r16
    1bc4:	e4 ee       	ldi	r30, 0xE4	; 228
    1bc6:	f3 e2       	ldi	r31, 0x23	; 35
    1bc8:	00 e8       	ldi	r16, 0x80	; 128
    1bca:	06 93       	lac	Z, r16
    1bcc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    1bd0:	ec ed       	ldi	r30, 0xDC	; 220
    1bd2:	f3 e2       	ldi	r31, 0x23	; 35
    1bd4:	00 e1       	ldi	r16, 0x10	; 16
    1bd6:	06 93       	lac	Z, r16
    1bd8:	80 91 cd 23 	lds	r24, 0x23CD	; 0x8023cd <udd_ep_control_state>
    1bdc:	88 23       	and	r24, r24
    1bde:	29 f0       	breq	.+10     	; 0x1bea <udd_ctrl_interrupt_tc_setup+0x40>
    1be0:	83 50       	subi	r24, 0x03	; 3
    1be2:	82 30       	cpi	r24, 0x02	; 2
    1be4:	08 f4       	brcc	.+2      	; 0x1be8 <udd_ctrl_interrupt_tc_setup+0x3e>
    1be6:	2a df       	rcall	.-428    	; 0x1a3c <udd_ctrl_endofrequest>
    1be8:	e8 de       	rcall	.-560    	; 0x19ba <udd_ctrl_init>
    1bea:	80 91 de 23 	lds	r24, 0x23DE	; 0x8023de <udd_sram+0xe>
    1bee:	90 91 df 23 	lds	r25, 0x23DF	; 0x8023df <udd_sram+0xf>
    1bf2:	08 97       	sbiw	r24, 0x08	; 8
    1bf4:	09 f0       	breq	.+2      	; 0x1bf8 <udd_ctrl_interrupt_tc_setup+0x4e>
    1bf6:	45 c0       	rjmp	.+138    	; 0x1c82 <udd_ctrl_interrupt_tc_setup+0xd8>
    1bf8:	88 e0       	ldi	r24, 0x08	; 8
    1bfa:	e9 e8       	ldi	r30, 0x89	; 137
    1bfc:	f3 e2       	ldi	r31, 0x23	; 35
    1bfe:	a2 e1       	ldi	r26, 0x12	; 18
    1c00:	b5 e2       	ldi	r27, 0x25	; 37
    1c02:	01 90       	ld	r0, Z+
    1c04:	0d 92       	st	X+, r0
    1c06:	8a 95       	dec	r24
    1c08:	e1 f7       	brne	.-8      	; 0x1c02 <udd_ctrl_interrupt_tc_setup+0x58>
    1c0a:	e8 ec       	ldi	r30, 0xC8	; 200
    1c0c:	f4 e0       	ldi	r31, 0x04	; 4
    1c0e:	80 81       	ld	r24, Z
    1c10:	80 62       	ori	r24, 0x20	; 32
    1c12:	80 83       	st	Z, r24
    1c14:	80 81       	ld	r24, Z
    1c16:	80 62       	ori	r24, 0x20	; 32
    1c18:	80 83       	st	Z, r24
    1c1a:	15 dc       	rcall	.-2006   	; 0x1446 <udc_process_setup>
    1c1c:	c8 2f       	mov	r28, r24
    1c1e:	81 11       	cpse	r24, r1
    1c20:	03 c0       	rjmp	.+6      	; 0x1c28 <udd_ctrl_interrupt_tc_setup+0x7e>
    1c22:	f0 de       	rcall	.-544    	; 0x1a04 <udd_ctrl_stall_data>
    1c24:	c1 e0       	ldi	r28, 0x01	; 1
    1c26:	2e c0       	rjmp	.+92     	; 0x1c84 <udd_ctrl_interrupt_tc_setup+0xda>
    1c28:	80 91 12 25 	lds	r24, 0x2512	; 0x802512 <udd_g_ctrlreq>
    1c2c:	88 23       	and	r24, r24
    1c2e:	6c f4       	brge	.+26     	; 0x1c4a <udd_ctrl_interrupt_tc_setup+0xa0>
    1c30:	10 92 cb 23 	sts	0x23CB, r1	; 0x8023cb <udd_ctrl_prev_payload_nb_trans>
    1c34:	10 92 cc 23 	sts	0x23CC, r1	; 0x8023cc <udd_ctrl_prev_payload_nb_trans+0x1>
    1c38:	10 92 c9 23 	sts	0x23C9, r1	; 0x8023c9 <udd_ctrl_payload_nb_trans>
    1c3c:	10 92 ca 23 	sts	0x23CA, r1	; 0x8023ca <udd_ctrl_payload_nb_trans+0x1>
    1c40:	82 e0       	ldi	r24, 0x02	; 2
    1c42:	80 93 cd 23 	sts	0x23CD, r24	; 0x8023cd <udd_ep_control_state>
    1c46:	02 df       	rcall	.-508    	; 0x1a4c <udd_ctrl_in_sent>
    1c48:	1d c0       	rjmp	.+58     	; 0x1c84 <udd_ctrl_interrupt_tc_setup+0xda>
    1c4a:	80 91 18 25 	lds	r24, 0x2518	; 0x802518 <udd_g_ctrlreq+0x6>
    1c4e:	90 91 19 25 	lds	r25, 0x2519	; 0x802519 <udd_g_ctrlreq+0x7>
    1c52:	89 2b       	or	r24, r25
    1c54:	11 f4       	brne	.+4      	; 0x1c5a <udd_ctrl_interrupt_tc_setup+0xb0>
    1c56:	e4 de       	rcall	.-568    	; 0x1a20 <udd_ctrl_send_zlp_in>
    1c58:	15 c0       	rjmp	.+42     	; 0x1c84 <udd_ctrl_interrupt_tc_setup+0xda>
    1c5a:	10 92 cb 23 	sts	0x23CB, r1	; 0x8023cb <udd_ctrl_prev_payload_nb_trans>
    1c5e:	10 92 cc 23 	sts	0x23CC, r1	; 0x8023cc <udd_ctrl_prev_payload_nb_trans+0x1>
    1c62:	10 92 c9 23 	sts	0x23C9, r1	; 0x8023c9 <udd_ctrl_payload_nb_trans>
    1c66:	10 92 ca 23 	sts	0x23CA, r1	; 0x8023ca <udd_ctrl_payload_nb_trans+0x1>
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	80 93 cd 23 	sts	0x23CD, r24	; 0x8023cd <udd_ep_control_state>
    1c70:	ec ed       	ldi	r30, 0xDC	; 220
    1c72:	f3 e2       	ldi	r31, 0x23	; 35
    1c74:	02 e0       	ldi	r16, 0x02	; 2
    1c76:	06 93       	lac	Z, r16
    1c78:	00 e2       	ldi	r16, 0x20	; 32
    1c7a:	06 93       	lac	Z, r16
    1c7c:	03 c0       	rjmp	.+6      	; 0x1c84 <udd_ctrl_interrupt_tc_setup+0xda>
    1c7e:	c0 e0       	ldi	r28, 0x00	; 0
    1c80:	01 c0       	rjmp	.+2      	; 0x1c84 <udd_ctrl_interrupt_tc_setup+0xda>
    1c82:	c1 e0       	ldi	r28, 0x01	; 1
    1c84:	8c 2f       	mov	r24, r28
    1c86:	cf 91       	pop	r28
    1c88:	0f 91       	pop	r16
    1c8a:	08 95       	ret

00001c8c <udd_ep_trans_complet>:
    1c8c:	8f 92       	push	r8
    1c8e:	9f 92       	push	r9
    1c90:	af 92       	push	r10
    1c92:	bf 92       	push	r11
    1c94:	df 92       	push	r13
    1c96:	ef 92       	push	r14
    1c98:	ff 92       	push	r15
    1c9a:	0f 93       	push	r16
    1c9c:	1f 93       	push	r17
    1c9e:	cf 93       	push	r28
    1ca0:	df 93       	push	r29
    1ca2:	d8 2e       	mov	r13, r24
    1ca4:	67 df       	rcall	.-306    	; 0x1b74 <udd_ep_get_job>
    1ca6:	8c 01       	movw	r16, r24
    1ca8:	bd 2c       	mov	r11, r13
    1caa:	bb 1c       	adc	r11, r11
    1cac:	bb 24       	eor	r11, r11
    1cae:	bb 1c       	adc	r11, r11
    1cb0:	cd 2d       	mov	r28, r13
    1cb2:	cf 70       	andi	r28, 0x0F	; 15
    1cb4:	d0 e0       	ldi	r29, 0x00	; 0
    1cb6:	cc 0f       	add	r28, r28
    1cb8:	dd 1f       	adc	r29, r29
    1cba:	cb 0d       	add	r28, r11
    1cbc:	d1 1d       	adc	r29, r1
    1cbe:	ce 01       	movw	r24, r28
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	9c 01       	movw	r18, r24
    1cce:	24 52       	subi	r18, 0x24	; 36
    1cd0:	3c 4d       	sbci	r19, 0xDC	; 220
    1cd2:	79 01       	movw	r14, r18
    1cd4:	c9 01       	movw	r24, r18
    1cd6:	26 df       	rcall	.-436    	; 0x1b24 <udd_ep_get_size>
    1cd8:	4c 01       	movw	r8, r24
    1cda:	bb 20       	and	r11, r11
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <udd_ep_trans_complet+0x54>
    1cde:	79 c0       	rjmp	.+242    	; 0x1dd2 <udd_ep_trans_complet+0x146>
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	ee 0f       	add	r30, r30
    1ce4:	ff 1f       	adc	r31, r31
    1ce6:	ee 0f       	add	r30, r30
    1ce8:	ff 1f       	adc	r31, r31
    1cea:	ee 0f       	add	r30, r30
    1cec:	ff 1f       	adc	r31, r31
    1cee:	e0 53       	subi	r30, 0x30	; 48
    1cf0:	fc 4d       	sbci	r31, 0xDC	; 220
    1cf2:	22 89       	ldd	r18, Z+18	; 0x12
    1cf4:	33 89       	ldd	r19, Z+19	; 0x13
    1cf6:	d8 01       	movw	r26, r16
    1cf8:	15 96       	adiw	r26, 0x05	; 5
    1cfa:	8d 91       	ld	r24, X+
    1cfc:	9c 91       	ld	r25, X
    1cfe:	16 97       	sbiw	r26, 0x06	; 6
    1d00:	82 0f       	add	r24, r18
    1d02:	93 1f       	adc	r25, r19
    1d04:	15 96       	adiw	r26, 0x05	; 5
    1d06:	8d 93       	st	X+, r24
    1d08:	9c 93       	st	X, r25
    1d0a:	16 97       	sbiw	r26, 0x06	; 6
    1d0c:	13 96       	adiw	r26, 0x03	; 3
    1d0e:	2d 91       	ld	r18, X+
    1d10:	3c 91       	ld	r19, X
    1d12:	14 97       	sbiw	r26, 0x04	; 4
    1d14:	82 17       	cp	r24, r18
    1d16:	93 07       	cpc	r25, r19
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <udd_ep_trans_complet+0x90>
    1d1a:	45 c0       	rjmp	.+138    	; 0x1da6 <udd_ep_trans_complet+0x11a>
    1d1c:	28 1b       	sub	r18, r24
    1d1e:	39 0b       	sbc	r19, r25
    1d20:	21 15       	cp	r18, r1
    1d22:	b4 e0       	ldi	r27, 0x04	; 4
    1d24:	3b 07       	cpc	r19, r27
    1d26:	38 f0       	brcs	.+14     	; 0x1d36 <udd_ep_trans_complet+0xaa>
    1d28:	2f ef       	ldi	r18, 0xFF	; 255
    1d2a:	33 e0       	ldi	r19, 0x03	; 3
    1d2c:	c9 01       	movw	r24, r18
    1d2e:	b4 01       	movw	r22, r8
    1d30:	88 d6       	rcall	.+3344   	; 0x2a42 <__udivmodhi4>
    1d32:	28 1b       	sub	r18, r24
    1d34:	39 0b       	sbc	r19, r25
    1d36:	f8 01       	movw	r30, r16
    1d38:	80 81       	ld	r24, Z
    1d3a:	81 ff       	sbrs	r24, 1
    1d3c:	09 c0       	rjmp	.+18     	; 0x1d50 <udd_ep_trans_complet+0xc4>
    1d3e:	c9 01       	movw	r24, r18
    1d40:	b4 01       	movw	r22, r8
    1d42:	7f d6       	rcall	.+3326   	; 0x2a42 <__udivmodhi4>
    1d44:	41 e0       	ldi	r20, 0x01	; 1
    1d46:	89 2b       	or	r24, r25
    1d48:	09 f0       	breq	.+2      	; 0x1d4c <udd_ep_trans_complet+0xc0>
    1d4a:	40 e0       	ldi	r20, 0x00	; 0
    1d4c:	84 2f       	mov	r24, r20
    1d4e:	01 c0       	rjmp	.+2      	; 0x1d52 <udd_ep_trans_complet+0xc6>
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	d8 01       	movw	r26, r16
    1d54:	9c 91       	ld	r25, X
    1d56:	80 fb       	bst	r24, 0
    1d58:	91 f9       	bld	r25, 1
    1d5a:	9c 93       	st	X, r25
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	ee 0f       	add	r30, r30
    1d60:	ff 1f       	adc	r31, r31
    1d62:	ee 0f       	add	r30, r30
    1d64:	ff 1f       	adc	r31, r31
    1d66:	ee 0f       	add	r30, r30
    1d68:	ff 1f       	adc	r31, r31
    1d6a:	e0 53       	subi	r30, 0x30	; 48
    1d6c:	fc 4d       	sbci	r31, 0xDC	; 220
    1d6e:	12 8a       	std	Z+18, r1	; 0x12
    1d70:	13 8a       	std	Z+19, r1	; 0x13
    1d72:	26 87       	std	Z+14, r18	; 0x0e
    1d74:	37 87       	std	Z+15, r19	; 0x0f
    1d76:	11 96       	adiw	r26, 0x01	; 1
    1d78:	2d 91       	ld	r18, X+
    1d7a:	3c 91       	ld	r19, X
    1d7c:	12 97       	sbiw	r26, 0x02	; 2
    1d7e:	15 96       	adiw	r26, 0x05	; 5
    1d80:	8d 91       	ld	r24, X+
    1d82:	9c 91       	ld	r25, X
    1d84:	16 97       	sbiw	r26, 0x06	; 6
    1d86:	82 0f       	add	r24, r18
    1d88:	93 1f       	adc	r25, r19
    1d8a:	cc 0f       	add	r28, r28
    1d8c:	dd 1f       	adc	r29, r29
    1d8e:	cc 0f       	add	r28, r28
    1d90:	dd 1f       	adc	r29, r29
    1d92:	cc 0f       	add	r28, r28
    1d94:	dd 1f       	adc	r29, r29
    1d96:	c0 52       	subi	r28, 0x20	; 32
    1d98:	dc 4d       	sbci	r29, 0xDC	; 220
    1d9a:	88 83       	st	Y, r24
    1d9c:	99 83       	std	Y+1, r25	; 0x01
    1d9e:	f7 01       	movw	r30, r14
    1da0:	02 e0       	ldi	r16, 0x02	; 2
    1da2:	06 93       	lac	Z, r16
    1da4:	e4 c0       	rjmp	.+456    	; 0x1f6e <udd_ep_trans_complet+0x2e2>
    1da6:	d8 01       	movw	r26, r16
    1da8:	8c 91       	ld	r24, X
    1daa:	81 ff       	sbrs	r24, 1
    1dac:	cd c0       	rjmp	.+410    	; 0x1f48 <udd_ep_trans_complet+0x2bc>
    1dae:	8d 7f       	andi	r24, 0xFD	; 253
    1db0:	8c 93       	st	X, r24
    1db2:	cc 0f       	add	r28, r28
    1db4:	dd 1f       	adc	r29, r29
    1db6:	cc 0f       	add	r28, r28
    1db8:	dd 1f       	adc	r29, r29
    1dba:	cc 0f       	add	r28, r28
    1dbc:	dd 1f       	adc	r29, r29
    1dbe:	c0 53       	subi	r28, 0x30	; 48
    1dc0:	dc 4d       	sbci	r29, 0xDC	; 220
    1dc2:	1a 8a       	std	Y+18, r1	; 0x12
    1dc4:	1b 8a       	std	Y+19, r1	; 0x13
    1dc6:	1e 86       	std	Y+14, r1	; 0x0e
    1dc8:	1f 86       	std	Y+15, r1	; 0x0f
    1dca:	f7 01       	movw	r30, r14
    1dcc:	02 e0       	ldi	r16, 0x02	; 2
    1dce:	06 93       	lac	Z, r16
    1dd0:	ce c0       	rjmp	.+412    	; 0x1f6e <udd_ep_trans_complet+0x2e2>
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	ee 0f       	add	r30, r30
    1dd6:	ff 1f       	adc	r31, r31
    1dd8:	ee 0f       	add	r30, r30
    1dda:	ff 1f       	adc	r31, r31
    1ddc:	ee 0f       	add	r30, r30
    1dde:	ff 1f       	adc	r31, r31
    1de0:	e0 53       	subi	r30, 0x30	; 48
    1de2:	fc 4d       	sbci	r31, 0xDC	; 220
    1de4:	a6 84       	ldd	r10, Z+14	; 0x0e
    1de6:	b7 84       	ldd	r11, Z+15	; 0x0f
    1de8:	d8 01       	movw	r26, r16
    1dea:	8c 91       	ld	r24, X
    1dec:	82 ff       	sbrs	r24, 2
    1dee:	19 c0       	rjmp	.+50     	; 0x1e22 <udd_ep_trans_complet+0x196>
    1df0:	11 96       	adiw	r26, 0x01	; 1
    1df2:	ed 91       	ld	r30, X+
    1df4:	fc 91       	ld	r31, X
    1df6:	12 97       	sbiw	r26, 0x02	; 2
    1df8:	15 96       	adiw	r26, 0x05	; 5
    1dfa:	2d 91       	ld	r18, X+
    1dfc:	3c 91       	ld	r19, X
    1dfe:	16 97       	sbiw	r26, 0x06	; 6
    1e00:	13 96       	adiw	r26, 0x03	; 3
    1e02:	8d 91       	ld	r24, X+
    1e04:	9c 91       	ld	r25, X
    1e06:	14 97       	sbiw	r26, 0x04	; 4
    1e08:	b4 01       	movw	r22, r8
    1e0a:	1b d6       	rcall	.+3126   	; 0x2a42 <__udivmodhi4>
    1e0c:	b0 e4       	ldi	r27, 0x40	; 64
    1e0e:	db 9e       	mul	r13, r27
    1e10:	b0 01       	movw	r22, r0
    1e12:	11 24       	eor	r1, r1
    1e14:	6b 55       	subi	r22, 0x5B	; 91
    1e16:	7d 4d       	sbci	r23, 0xDD	; 221
    1e18:	ac 01       	movw	r20, r24
    1e1a:	cf 01       	movw	r24, r30
    1e1c:	82 0f       	add	r24, r18
    1e1e:	93 1f       	adc	r25, r19
    1e20:	2d d6       	rcall	.+3162   	; 0x2a7c <memcpy>
    1e22:	f8 01       	movw	r30, r16
    1e24:	25 81       	ldd	r18, Z+5	; 0x05
    1e26:	36 81       	ldd	r19, Z+6	; 0x06
    1e28:	2a 0d       	add	r18, r10
    1e2a:	3b 1d       	adc	r19, r11
    1e2c:	25 83       	std	Z+5, r18	; 0x05
    1e2e:	36 83       	std	Z+6, r19	; 0x06
    1e30:	83 81       	ldd	r24, Z+3	; 0x03
    1e32:	94 81       	ldd	r25, Z+4	; 0x04
    1e34:	82 17       	cp	r24, r18
    1e36:	93 07       	cpc	r25, r19
    1e38:	68 f4       	brcc	.+26     	; 0x1e54 <udd_ep_trans_complet+0x1c8>
    1e3a:	85 83       	std	Z+5, r24	; 0x05
    1e3c:	96 83       	std	Z+6, r25	; 0x06
    1e3e:	cc 0f       	add	r28, r28
    1e40:	dd 1f       	adc	r29, r29
    1e42:	cc 0f       	add	r28, r28
    1e44:	dd 1f       	adc	r29, r29
    1e46:	cc 0f       	add	r28, r28
    1e48:	dd 1f       	adc	r29, r29
    1e4a:	c0 53       	subi	r28, 0x30	; 48
    1e4c:	dc 4d       	sbci	r29, 0xDC	; 220
    1e4e:	8a 89       	ldd	r24, Y+18	; 0x12
    1e50:	9b 89       	ldd	r25, Y+19	; 0x13
    1e52:	7a c0       	rjmp	.+244    	; 0x1f48 <udd_ep_trans_complet+0x2bc>
    1e54:	fe 01       	movw	r30, r28
    1e56:	ee 0f       	add	r30, r30
    1e58:	ff 1f       	adc	r31, r31
    1e5a:	ee 0f       	add	r30, r30
    1e5c:	ff 1f       	adc	r31, r31
    1e5e:	ee 0f       	add	r30, r30
    1e60:	ff 1f       	adc	r31, r31
    1e62:	e0 53       	subi	r30, 0x30	; 48
    1e64:	fc 4d       	sbci	r31, 0xDC	; 220
    1e66:	42 89       	ldd	r20, Z+18	; 0x12
    1e68:	53 89       	ldd	r21, Z+19	; 0x13
    1e6a:	4a 15       	cp	r20, r10
    1e6c:	5b 05       	cpc	r21, r11
    1e6e:	09 f0       	breq	.+2      	; 0x1e72 <udd_ep_trans_complet+0x1e6>
    1e70:	6b c0       	rjmp	.+214    	; 0x1f48 <udd_ep_trans_complet+0x2bc>
    1e72:	28 17       	cp	r18, r24
    1e74:	39 07       	cpc	r19, r25
    1e76:	09 f4       	brne	.+2      	; 0x1e7a <udd_ep_trans_complet+0x1ee>
    1e78:	67 c0       	rjmp	.+206    	; 0x1f48 <udd_ep_trans_complet+0x2bc>
    1e7a:	ac 01       	movw	r20, r24
    1e7c:	42 1b       	sub	r20, r18
    1e7e:	53 0b       	sbc	r21, r19
    1e80:	9a 01       	movw	r18, r20
    1e82:	21 15       	cp	r18, r1
    1e84:	54 e0       	ldi	r21, 0x04	; 4
    1e86:	35 07       	cpc	r19, r21
    1e88:	50 f0       	brcs	.+20     	; 0x1e9e <udd_ep_trans_complet+0x212>
    1e8a:	2f ef       	ldi	r18, 0xFF	; 255
    1e8c:	33 e0       	ldi	r19, 0x03	; 3
    1e8e:	c9 01       	movw	r24, r18
    1e90:	b4 01       	movw	r22, r8
    1e92:	d7 d5       	rcall	.+2990   	; 0x2a42 <__udivmodhi4>
    1e94:	d9 01       	movw	r26, r18
    1e96:	a8 1b       	sub	r26, r24
    1e98:	b9 0b       	sbc	r27, r25
    1e9a:	cd 01       	movw	r24, r26
    1e9c:	07 c0       	rjmp	.+14     	; 0x1eac <udd_ep_trans_complet+0x220>
    1e9e:	c9 01       	movw	r24, r18
    1ea0:	b4 01       	movw	r22, r8
    1ea2:	cf d5       	rcall	.+2974   	; 0x2a42 <__udivmodhi4>
    1ea4:	f9 01       	movw	r30, r18
    1ea6:	e8 1b       	sub	r30, r24
    1ea8:	f9 0b       	sbc	r31, r25
    1eaa:	cf 01       	movw	r24, r30
    1eac:	fe 01       	movw	r30, r28
    1eae:	ee 0f       	add	r30, r30
    1eb0:	ff 1f       	adc	r31, r31
    1eb2:	ee 0f       	add	r30, r30
    1eb4:	ff 1f       	adc	r31, r31
    1eb6:	ee 0f       	add	r30, r30
    1eb8:	ff 1f       	adc	r31, r31
    1eba:	e0 53       	subi	r30, 0x30	; 48
    1ebc:	fc 4d       	sbci	r31, 0xDC	; 220
    1ebe:	16 86       	std	Z+14, r1	; 0x0e
    1ec0:	17 86       	std	Z+15, r1	; 0x0f
    1ec2:	88 15       	cp	r24, r8
    1ec4:	99 05       	cpc	r25, r9
    1ec6:	00 f5       	brcc	.+64     	; 0x1f08 <udd_ep_trans_complet+0x27c>
    1ec8:	d8 01       	movw	r26, r16
    1eca:	8c 91       	ld	r24, X
    1ecc:	84 60       	ori	r24, 0x04	; 4
    1ece:	8c 93       	st	X, r24
    1ed0:	b0 e4       	ldi	r27, 0x40	; 64
    1ed2:	db 9e       	mul	r13, r27
    1ed4:	c0 01       	movw	r24, r0
    1ed6:	11 24       	eor	r1, r1
    1ed8:	8b 55       	subi	r24, 0x5B	; 91
    1eda:	9d 4d       	sbci	r25, 0xDD	; 221
    1edc:	fe 01       	movw	r30, r28
    1ede:	ee 0f       	add	r30, r30
    1ee0:	ff 1f       	adc	r31, r31
    1ee2:	ee 0f       	add	r30, r30
    1ee4:	ff 1f       	adc	r31, r31
    1ee6:	ee 0f       	add	r30, r30
    1ee8:	ff 1f       	adc	r31, r31
    1eea:	e0 52       	subi	r30, 0x20	; 32
    1eec:	fc 4d       	sbci	r31, 0xDC	; 220
    1eee:	80 83       	st	Z, r24
    1ef0:	91 83       	std	Z+1, r25	; 0x01
    1ef2:	cc 0f       	add	r28, r28
    1ef4:	dd 1f       	adc	r29, r29
    1ef6:	cc 0f       	add	r28, r28
    1ef8:	dd 1f       	adc	r29, r29
    1efa:	cc 0f       	add	r28, r28
    1efc:	dd 1f       	adc	r29, r29
    1efe:	c0 53       	subi	r28, 0x30	; 48
    1f00:	dc 4d       	sbci	r29, 0xDC	; 220
    1f02:	8a 8a       	std	Y+18, r8	; 0x12
    1f04:	9b 8a       	std	Y+19, r9	; 0x13
    1f06:	1c c0       	rjmp	.+56     	; 0x1f40 <udd_ep_trans_complet+0x2b4>
    1f08:	f8 01       	movw	r30, r16
    1f0a:	41 81       	ldd	r20, Z+1	; 0x01
    1f0c:	52 81       	ldd	r21, Z+2	; 0x02
    1f0e:	25 81       	ldd	r18, Z+5	; 0x05
    1f10:	36 81       	ldd	r19, Z+6	; 0x06
    1f12:	24 0f       	add	r18, r20
    1f14:	35 1f       	adc	r19, r21
    1f16:	fe 01       	movw	r30, r28
    1f18:	ee 0f       	add	r30, r30
    1f1a:	ff 1f       	adc	r31, r31
    1f1c:	ee 0f       	add	r30, r30
    1f1e:	ff 1f       	adc	r31, r31
    1f20:	ee 0f       	add	r30, r30
    1f22:	ff 1f       	adc	r31, r31
    1f24:	e0 52       	subi	r30, 0x20	; 32
    1f26:	fc 4d       	sbci	r31, 0xDC	; 220
    1f28:	20 83       	st	Z, r18
    1f2a:	31 83       	std	Z+1, r19	; 0x01
    1f2c:	cc 0f       	add	r28, r28
    1f2e:	dd 1f       	adc	r29, r29
    1f30:	cc 0f       	add	r28, r28
    1f32:	dd 1f       	adc	r29, r29
    1f34:	cc 0f       	add	r28, r28
    1f36:	dd 1f       	adc	r29, r29
    1f38:	c0 53       	subi	r28, 0x30	; 48
    1f3a:	dc 4d       	sbci	r29, 0xDC	; 220
    1f3c:	8a 8b       	std	Y+18, r24	; 0x12
    1f3e:	9b 8b       	std	Y+19, r25	; 0x13
    1f40:	f7 01       	movw	r30, r14
    1f42:	02 e0       	ldi	r16, 0x02	; 2
    1f44:	06 93       	lac	Z, r16
    1f46:	13 c0       	rjmp	.+38     	; 0x1f6e <udd_ep_trans_complet+0x2e2>
    1f48:	d8 01       	movw	r26, r16
    1f4a:	8c 91       	ld	r24, X
    1f4c:	80 ff       	sbrs	r24, 0
    1f4e:	0f c0       	rjmp	.+30     	; 0x1f6e <udd_ep_trans_complet+0x2e2>
    1f50:	8e 7f       	andi	r24, 0xFE	; 254
    1f52:	8c 93       	st	X, r24
    1f54:	17 96       	adiw	r26, 0x07	; 7
    1f56:	ed 91       	ld	r30, X+
    1f58:	fc 91       	ld	r31, X
    1f5a:	18 97       	sbiw	r26, 0x08	; 8
    1f5c:	30 97       	sbiw	r30, 0x00	; 0
    1f5e:	39 f0       	breq	.+14     	; 0x1f6e <udd_ep_trans_complet+0x2e2>
    1f60:	15 96       	adiw	r26, 0x05	; 5
    1f62:	6d 91       	ld	r22, X+
    1f64:	7c 91       	ld	r23, X
    1f66:	16 97       	sbiw	r26, 0x06	; 6
    1f68:	4d 2d       	mov	r20, r13
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	19 95       	eicall
    1f6e:	df 91       	pop	r29
    1f70:	cf 91       	pop	r28
    1f72:	1f 91       	pop	r17
    1f74:	0f 91       	pop	r16
    1f76:	ff 90       	pop	r15
    1f78:	ef 90       	pop	r14
    1f7a:	df 90       	pop	r13
    1f7c:	bf 90       	pop	r11
    1f7e:	af 90       	pop	r10
    1f80:	9f 90       	pop	r9
    1f82:	8f 90       	pop	r8
    1f84:	08 95       	ret

00001f86 <udd_attach>:
    1f86:	1f 93       	push	r17
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	1f 92       	push	r1
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    1f92:	8f b7       	in	r24, 0x3f	; 63
    1f94:	89 83       	std	Y+1, r24	; 0x01
    1f96:	f8 94       	cli
    1f98:	19 81       	ldd	r17, Y+1	; 0x01
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	d6 dc       	rcall	.-1620   	; 0x194a <udd_sleep_mode>
    1f9e:	ea ec       	ldi	r30, 0xCA	; 202
    1fa0:	f4 e0       	ldi	r31, 0x04	; 4
    1fa2:	80 e4       	ldi	r24, 0x40	; 64
    1fa4:	80 83       	st	Z, r24
    1fa6:	80 e2       	ldi	r24, 0x20	; 32
    1fa8:	80 83       	st	Z, r24
    1faa:	e1 ec       	ldi	r30, 0xC1	; 193
    1fac:	f4 e0       	ldi	r31, 0x04	; 4
    1fae:	80 81       	ld	r24, Z
    1fb0:	81 60       	ori	r24, 0x01	; 1
    1fb2:	80 83       	st	Z, r24
    1fb4:	a9 ec       	ldi	r26, 0xC9	; 201
    1fb6:	b4 e0       	ldi	r27, 0x04	; 4
    1fb8:	8c 91       	ld	r24, X
    1fba:	82 60       	ori	r24, 0x02	; 2
    1fbc:	8c 93       	st	X, r24
    1fbe:	e8 ec       	ldi	r30, 0xC8	; 200
    1fc0:	f4 e0       	ldi	r31, 0x04	; 4
    1fc2:	80 81       	ld	r24, Z
    1fc4:	80 64       	ori	r24, 0x40	; 64
    1fc6:	80 83       	st	Z, r24
    1fc8:	8c 91       	ld	r24, X
    1fca:	81 60       	ori	r24, 0x01	; 1
    1fcc:	8c 93       	st	X, r24
    1fce:	80 81       	ld	r24, Z
    1fd0:	80 68       	ori	r24, 0x80	; 128
    1fd2:	80 83       	st	Z, r24
    1fd4:	1f bf       	out	0x3f, r17	; 63
    1fd6:	0f 90       	pop	r0
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	1f 91       	pop	r17
    1fde:	08 95       	ret

00001fe0 <udd_enable>:
    1fe0:	0f 93       	push	r16
    1fe2:	1f 93       	push	r17
    1fe4:	cf 93       	push	r28
    1fe6:	df 93       	push	r29
    1fe8:	1f 92       	push	r1
    1fea:	1f 92       	push	r1
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	00 e6       	ldi	r16, 0x60	; 96
    1ff2:	10 e0       	ldi	r17, 0x00	; 0
    1ff4:	f8 01       	movw	r30, r16
    1ff6:	10 82       	st	Z, r1
    1ff8:	80 e3       	ldi	r24, 0x30	; 48
    1ffa:	ce d4       	rcall	.+2460   	; 0x2998 <sysclk_enable_usb>
    1ffc:	e0 ec       	ldi	r30, 0xC0	; 192
    1ffe:	f4 e0       	ldi	r31, 0x04	; 4
    2000:	80 81       	ld	r24, Z
    2002:	80 64       	ori	r24, 0x40	; 64
    2004:	80 83       	st	Z, r24
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	f8 01       	movw	r30, r16
    200a:	80 83       	st	Z, r24
    200c:	8f b7       	in	r24, 0x3f	; 63
    200e:	8a 83       	std	Y+2, r24	; 0x02
    2010:	f8 94       	cli
    2012:	1a 81       	ldd	r17, Y+2	; 0x02
    2014:	e0 ed       	ldi	r30, 0xD0	; 208
    2016:	f3 e2       	ldi	r31, 0x23	; 35
    2018:	15 86       	std	Z+13, r1	; 0x0d
    201a:	15 8a       	std	Z+21, r1	; 0x15
    201c:	15 8e       	std	Z+29, r1	; 0x1d
    201e:	15 a2       	std	Z+37, r1	; 0x25
    2020:	15 a6       	std	Z+45, r1	; 0x2d
    2022:	15 aa       	std	Z+53, r1	; 0x35
    2024:	e5 e6       	ldi	r30, 0x65	; 101
    2026:	f3 e2       	ldi	r31, 0x23	; 35
    2028:	80 81       	ld	r24, Z
    202a:	8e 7f       	andi	r24, 0xFE	; 254
    202c:	80 83       	st	Z, r24
    202e:	ee e6       	ldi	r30, 0x6E	; 110
    2030:	f3 e2       	ldi	r31, 0x23	; 35
    2032:	80 81       	ld	r24, Z
    2034:	8e 7f       	andi	r24, 0xFE	; 254
    2036:	80 83       	st	Z, r24
    2038:	e7 e7       	ldi	r30, 0x77	; 119
    203a:	f3 e2       	ldi	r31, 0x23	; 35
    203c:	80 81       	ld	r24, Z
    203e:	8e 7f       	andi	r24, 0xFE	; 254
    2040:	80 83       	st	Z, r24
    2042:	e0 e8       	ldi	r30, 0x80	; 128
    2044:	f3 e2       	ldi	r31, 0x23	; 35
    2046:	80 81       	ld	r24, Z
    2048:	8e 7f       	andi	r24, 0xFE	; 254
    204a:	80 83       	st	Z, r24
    204c:	6a e1       	ldi	r22, 0x1A	; 26
    204e:	70 e0       	ldi	r23, 0x00	; 0
    2050:	82 e0       	ldi	r24, 0x02	; 2
    2052:	e7 d4       	rcall	.+2510   	; 0x2a22 <nvm_read_byte>
    2054:	8f 3f       	cpi	r24, 0xFF	; 255
    2056:	19 f0       	breq	.+6      	; 0x205e <udd_enable+0x7e>
    2058:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    205c:	03 c0       	rjmp	.+6      	; 0x2064 <udd_enable+0x84>
    205e:	8f e1       	ldi	r24, 0x1F	; 31
    2060:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2064:	6b e1       	ldi	r22, 0x1B	; 27
    2066:	70 e0       	ldi	r23, 0x00	; 0
    2068:	82 e0       	ldi	r24, 0x02	; 2
    206a:	db d4       	rcall	.+2486   	; 0x2a22 <nvm_read_byte>
    206c:	8f 3f       	cpi	r24, 0xFF	; 255
    206e:	19 f0       	breq	.+6      	; 0x2076 <udd_enable+0x96>
    2070:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2074:	03 c0       	rjmp	.+6      	; 0x207c <udd_enable+0x9c>
    2076:	8f e1       	ldi	r24, 0x1F	; 31
    2078:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    207c:	e0 ec       	ldi	r30, 0xC0	; 192
    207e:	f4 e0       	ldi	r31, 0x04	; 4
    2080:	80 81       	ld	r24, Z
    2082:	82 60       	ori	r24, 0x02	; 2
    2084:	80 83       	st	Z, r24
    2086:	80 81       	ld	r24, Z
    2088:	80 68       	ori	r24, 0x80	; 128
    208a:	80 83       	st	Z, r24
    208c:	80 81       	ld	r24, Z
    208e:	80 61       	ori	r24, 0x10	; 16
    2090:	80 83       	st	Z, r24
    2092:	8c ed       	ldi	r24, 0xDC	; 220
    2094:	93 e2       	ldi	r25, 0x23	; 35
    2096:	86 83       	std	Z+6, r24	; 0x06
    2098:	97 83       	std	Z+7, r25	; 0x07
    209a:	80 81       	ld	r24, Z
    209c:	80 62       	ori	r24, 0x20	; 32
    209e:	80 83       	st	Z, r24
    20a0:	8f ef       	ldi	r24, 0xFF	; 255
    20a2:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    20a6:	e8 ec       	ldi	r30, 0xC8	; 200
    20a8:	f4 e0       	ldi	r31, 0x04	; 4
    20aa:	80 81       	ld	r24, Z
    20ac:	81 60       	ori	r24, 0x01	; 1
    20ae:	80 83       	st	Z, r24
    20b0:	10 92 10 24 	sts	0x2410, r1	; 0x802410 <udd_b_idle>
    20b4:	80 91 27 25 	lds	r24, 0x2527	; 0x802527 <sleepmgr_locks+0x5>
    20b8:	8f 3f       	cpi	r24, 0xFF	; 255
    20ba:	09 f4       	brne	.+2      	; 0x20be <udd_enable+0xde>
    20bc:	ff cf       	rjmp	.-2      	; 0x20bc <udd_enable+0xdc>
    20be:	8f b7       	in	r24, 0x3f	; 63
    20c0:	89 83       	std	Y+1, r24	; 0x01
    20c2:	f8 94       	cli
    20c4:	99 81       	ldd	r25, Y+1	; 0x01
    20c6:	e2 e2       	ldi	r30, 0x22	; 34
    20c8:	f5 e2       	ldi	r31, 0x25	; 37
    20ca:	85 81       	ldd	r24, Z+5	; 0x05
    20cc:	8f 5f       	subi	r24, 0xFF	; 255
    20ce:	85 83       	std	Z+5, r24	; 0x05
    20d0:	9f bf       	out	0x3f, r25	; 63
    20d2:	59 df       	rcall	.-334    	; 0x1f86 <udd_attach>
    20d4:	1f bf       	out	0x3f, r17	; 63
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	df 91       	pop	r29
    20dc:	cf 91       	pop	r28
    20de:	1f 91       	pop	r17
    20e0:	0f 91       	pop	r16
    20e2:	08 95       	ret

000020e4 <udd_is_high_speed>:
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	08 95       	ret

000020e8 <udd_set_address>:
    20e8:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    20ec:	08 95       	ret

000020ee <udd_getaddress>:
    20ee:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    20f2:	08 95       	ret

000020f4 <udd_get_frame_number>:
    20f4:	80 91 0c 24 	lds	r24, 0x240C	; 0x80240c <udd_sram+0x3c>
    20f8:	90 91 0d 24 	lds	r25, 0x240D	; 0x80240d <udd_sram+0x3d>
    20fc:	08 95       	ret

000020fe <udd_get_micro_frame_number>:
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	08 95       	ret

00002104 <udd_set_setup_payload>:
    2104:	e2 e1       	ldi	r30, 0x12	; 18
    2106:	f5 e2       	ldi	r31, 0x25	; 37
    2108:	80 87       	std	Z+8, r24	; 0x08
    210a:	91 87       	std	Z+9, r25	; 0x09
    210c:	62 87       	std	Z+10, r22	; 0x0a
    210e:	73 87       	std	Z+11, r23	; 0x0b
    2110:	08 95       	ret

00002112 <udd_ep_alloc>:
    2112:	28 2f       	mov	r18, r24
    2114:	2f 70       	andi	r18, 0x0F	; 15
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	22 0f       	add	r18, r18
    211a:	33 1f       	adc	r19, r19
    211c:	08 2e       	mov	r0, r24
    211e:	00 0c       	add	r0, r0
    2120:	99 0b       	sbc	r25, r25
    2122:	88 27       	eor	r24, r24
    2124:	99 0f       	add	r25, r25
    2126:	88 1f       	adc	r24, r24
    2128:	99 27       	eor	r25, r25
    212a:	82 0f       	add	r24, r18
    212c:	93 1f       	adc	r25, r19
    212e:	fc 01       	movw	r30, r24
    2130:	ee 0f       	add	r30, r30
    2132:	ff 1f       	adc	r31, r31
    2134:	ee 0f       	add	r30, r30
    2136:	ff 1f       	adc	r31, r31
    2138:	ee 0f       	add	r30, r30
    213a:	ff 1f       	adc	r31, r31
    213c:	e0 53       	subi	r30, 0x30	; 48
    213e:	fc 4d       	sbci	r31, 0xDC	; 220
    2140:	25 85       	ldd	r18, Z+13	; 0x0d
    2142:	20 7c       	andi	r18, 0xC0	; 192
    2144:	09 f0       	breq	.+2      	; 0x2148 <udd_ep_alloc+0x36>
    2146:	69 c0       	rjmp	.+210    	; 0x221a <udd_ep_alloc+0x108>
    2148:	63 70       	andi	r22, 0x03	; 3
    214a:	61 30       	cpi	r22, 0x01	; 1
    214c:	11 f0       	breq	.+4      	; 0x2152 <udd_ep_alloc+0x40>
    214e:	18 f4       	brcc	.+6      	; 0x2156 <udd_ep_alloc+0x44>
    2150:	04 c0       	rjmp	.+8      	; 0x215a <udd_ep_alloc+0x48>
    2152:	20 ec       	ldi	r18, 0xC0	; 192
    2154:	03 c0       	rjmp	.+6      	; 0x215c <udd_ep_alloc+0x4a>
    2156:	20 e8       	ldi	r18, 0x80	; 128
    2158:	01 c0       	rjmp	.+2      	; 0x215c <udd_ep_alloc+0x4a>
    215a:	20 e4       	ldi	r18, 0x40	; 64
    215c:	40 38       	cpi	r20, 0x80	; 128
    215e:	51 05       	cpc	r21, r1
    2160:	e9 f0       	breq	.+58     	; 0x219c <udd_ep_alloc+0x8a>
    2162:	50 f4       	brcc	.+20     	; 0x2178 <udd_ep_alloc+0x66>
    2164:	40 32       	cpi	r20, 0x20	; 32
    2166:	51 05       	cpc	r21, r1
    2168:	a9 f0       	breq	.+42     	; 0x2194 <udd_ep_alloc+0x82>
    216a:	40 34       	cpi	r20, 0x40	; 64
    216c:	51 05       	cpc	r21, r1
    216e:	a1 f0       	breq	.+40     	; 0x2198 <udd_ep_alloc+0x86>
    2170:	40 31       	cpi	r20, 0x10	; 16
    2172:	51 05       	cpc	r21, r1
    2174:	d9 f4       	brne	.+54     	; 0x21ac <udd_ep_alloc+0x9a>
    2176:	0c c0       	rjmp	.+24     	; 0x2190 <udd_ep_alloc+0x7e>
    2178:	41 15       	cp	r20, r1
    217a:	32 e0       	ldi	r19, 0x02	; 2
    217c:	53 07       	cpc	r21, r19
    217e:	91 f0       	breq	.+36     	; 0x21a4 <udd_ep_alloc+0x92>
    2180:	4f 3f       	cpi	r20, 0xFF	; 255
    2182:	33 e0       	ldi	r19, 0x03	; 3
    2184:	53 07       	cpc	r21, r19
    2186:	81 f0       	breq	.+32     	; 0x21a8 <udd_ep_alloc+0x96>
    2188:	41 15       	cp	r20, r1
    218a:	51 40       	sbci	r21, 0x01	; 1
    218c:	79 f4       	brne	.+30     	; 0x21ac <udd_ep_alloc+0x9a>
    218e:	08 c0       	rjmp	.+16     	; 0x21a0 <udd_ep_alloc+0x8e>
    2190:	41 e0       	ldi	r20, 0x01	; 1
    2192:	0d c0       	rjmp	.+26     	; 0x21ae <udd_ep_alloc+0x9c>
    2194:	42 e0       	ldi	r20, 0x02	; 2
    2196:	0b c0       	rjmp	.+22     	; 0x21ae <udd_ep_alloc+0x9c>
    2198:	43 e0       	ldi	r20, 0x03	; 3
    219a:	09 c0       	rjmp	.+18     	; 0x21ae <udd_ep_alloc+0x9c>
    219c:	44 e0       	ldi	r20, 0x04	; 4
    219e:	07 c0       	rjmp	.+14     	; 0x21ae <udd_ep_alloc+0x9c>
    21a0:	45 e0       	ldi	r20, 0x05	; 5
    21a2:	05 c0       	rjmp	.+10     	; 0x21ae <udd_ep_alloc+0x9c>
    21a4:	46 e0       	ldi	r20, 0x06	; 6
    21a6:	03 c0       	rjmp	.+6      	; 0x21ae <udd_ep_alloc+0x9c>
    21a8:	47 e0       	ldi	r20, 0x07	; 7
    21aa:	01 c0       	rjmp	.+2      	; 0x21ae <udd_ep_alloc+0x9c>
    21ac:	40 e0       	ldi	r20, 0x00	; 0
    21ae:	fc 01       	movw	r30, r24
    21b0:	ee 0f       	add	r30, r30
    21b2:	ff 1f       	adc	r31, r31
    21b4:	ee 0f       	add	r30, r30
    21b6:	ff 1f       	adc	r31, r31
    21b8:	ee 0f       	add	r30, r30
    21ba:	ff 1f       	adc	r31, r31
    21bc:	e0 53       	subi	r30, 0x30	; 48
    21be:	fc 4d       	sbci	r31, 0xDC	; 220
    21c0:	15 86       	std	Z+13, r1	; 0x0d
    21c2:	36 e0       	ldi	r19, 0x06	; 6
    21c4:	34 87       	std	Z+12, r19	; 0x0c
    21c6:	24 2b       	or	r18, r20
    21c8:	25 87       	std	Z+13, r18	; 0x0d
    21ca:	fc 01       	movw	r30, r24
    21cc:	ee 0f       	add	r30, r30
    21ce:	ff 1f       	adc	r31, r31
    21d0:	ee 0f       	add	r30, r30
    21d2:	ff 1f       	adc	r31, r31
    21d4:	ee 0f       	add	r30, r30
    21d6:	ff 1f       	adc	r31, r31
    21d8:	e0 53       	subi	r30, 0x30	; 48
    21da:	fc 4d       	sbci	r31, 0xDC	; 220
    21dc:	25 85       	ldd	r18, Z+13	; 0x0d
    21de:	20 7c       	andi	r18, 0xC0	; 192
    21e0:	20 3c       	cpi	r18, 0xC0	; 192
    21e2:	69 f4       	brne	.+26     	; 0x21fe <udd_ep_alloc+0xec>
    21e4:	fc 01       	movw	r30, r24
    21e6:	ee 0f       	add	r30, r30
    21e8:	ff 1f       	adc	r31, r31
    21ea:	ee 0f       	add	r30, r30
    21ec:	ff 1f       	adc	r31, r31
    21ee:	ee 0f       	add	r30, r30
    21f0:	ff 1f       	adc	r31, r31
    21f2:	e0 53       	subi	r30, 0x30	; 48
    21f4:	fc 4d       	sbci	r31, 0xDC	; 220
    21f6:	25 85       	ldd	r18, Z+13	; 0x0d
    21f8:	27 70       	andi	r18, 0x07	; 7
    21fa:	27 30       	cpi	r18, 0x07	; 7
    21fc:	81 f0       	breq	.+32     	; 0x221e <udd_ep_alloc+0x10c>
    21fe:	88 0f       	add	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	88 0f       	add	r24, r24
    2208:	99 1f       	adc	r25, r25
    220a:	fc 01       	movw	r30, r24
    220c:	e0 53       	subi	r30, 0x30	; 48
    220e:	fc 4d       	sbci	r31, 0xDC	; 220
    2210:	85 85       	ldd	r24, Z+13	; 0x0d
    2212:	80 62       	ori	r24, 0x20	; 32
    2214:	85 87       	std	Z+13, r24	; 0x0d
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	08 95       	ret
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	08 95       	ret
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	08 95       	ret

00002222 <udd_ep_is_halted>:
    2222:	e8 2f       	mov	r30, r24
    2224:	ef 70       	andi	r30, 0x0F	; 15
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	ee 0f       	add	r30, r30
    222a:	ff 1f       	adc	r31, r31
    222c:	08 2e       	mov	r0, r24
    222e:	00 0c       	add	r0, r0
    2230:	99 0b       	sbc	r25, r25
    2232:	88 27       	eor	r24, r24
    2234:	99 0f       	add	r25, r25
    2236:	88 1f       	adc	r24, r24
    2238:	99 27       	eor	r25, r25
    223a:	e8 0f       	add	r30, r24
    223c:	f9 1f       	adc	r31, r25
    223e:	ee 0f       	add	r30, r30
    2240:	ff 1f       	adc	r31, r31
    2242:	ee 0f       	add	r30, r30
    2244:	ff 1f       	adc	r31, r31
    2246:	ee 0f       	add	r30, r30
    2248:	ff 1f       	adc	r31, r31
    224a:	e0 53       	subi	r30, 0x30	; 48
    224c:	fc 4d       	sbci	r31, 0xDC	; 220
    224e:	85 85       	ldd	r24, Z+13	; 0x0d
    2250:	82 fb       	bst	r24, 2
    2252:	88 27       	eor	r24, r24
    2254:	80 f9       	bld	r24, 0
    2256:	08 95       	ret

00002258 <udd_ep_clear_halt>:
    2258:	0f 93       	push	r16
    225a:	28 2f       	mov	r18, r24
    225c:	2f 70       	andi	r18, 0x0F	; 15
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	a9 01       	movw	r20, r18
    2262:	44 0f       	add	r20, r20
    2264:	55 1f       	adc	r21, r21
    2266:	28 2f       	mov	r18, r24
    2268:	08 2e       	mov	r0, r24
    226a:	00 0c       	add	r0, r0
    226c:	33 0b       	sbc	r19, r19
    226e:	22 27       	eor	r18, r18
    2270:	33 0f       	add	r19, r19
    2272:	22 1f       	adc	r18, r18
    2274:	33 27       	eor	r19, r19
    2276:	24 0f       	add	r18, r20
    2278:	35 1f       	adc	r19, r21
    227a:	a9 01       	movw	r20, r18
    227c:	44 0f       	add	r20, r20
    227e:	55 1f       	adc	r21, r21
    2280:	44 0f       	add	r20, r20
    2282:	55 1f       	adc	r21, r21
    2284:	44 0f       	add	r20, r20
    2286:	55 1f       	adc	r21, r21
    2288:	fa 01       	movw	r30, r20
    228a:	e4 52       	subi	r30, 0x24	; 36
    228c:	fc 4d       	sbci	r31, 0xDC	; 220
    228e:	01 e0       	ldi	r16, 0x01	; 1
    2290:	06 93       	lac	Z, r16
    2292:	fa 01       	movw	r30, r20
    2294:	e0 53       	subi	r30, 0x30	; 48
    2296:	fc 4d       	sbci	r31, 0xDC	; 220
    2298:	95 85       	ldd	r25, Z+13	; 0x0d
    229a:	92 ff       	sbrs	r25, 2
    229c:	11 c0       	rjmp	.+34     	; 0x22c0 <udd_ep_clear_halt+0x68>
    229e:	fa 01       	movw	r30, r20
    22a0:	e0 53       	subi	r30, 0x30	; 48
    22a2:	fc 4d       	sbci	r31, 0xDC	; 220
    22a4:	95 85       	ldd	r25, Z+13	; 0x0d
    22a6:	9b 7f       	andi	r25, 0xFB	; 251
    22a8:	95 87       	std	Z+13, r25	; 0x0d
    22aa:	64 dc       	rcall	.-1848   	; 0x1b74 <udd_ep_get_job>
    22ac:	fc 01       	movw	r30, r24
    22ae:	80 81       	ld	r24, Z
    22b0:	80 ff       	sbrs	r24, 0
    22b2:	06 c0       	rjmp	.+12     	; 0x22c0 <udd_ep_clear_halt+0x68>
    22b4:	8e 7f       	andi	r24, 0xFE	; 254
    22b6:	80 83       	st	Z, r24
    22b8:	07 80       	ldd	r0, Z+7	; 0x07
    22ba:	f0 85       	ldd	r31, Z+8	; 0x08
    22bc:	e0 2d       	mov	r30, r0
    22be:	19 95       	eicall
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	0f 91       	pop	r16
    22c4:	08 95       	ret

000022c6 <udd_ep_run>:
    22c6:	5f 92       	push	r5
    22c8:	6f 92       	push	r6
    22ca:	7f 92       	push	r7
    22cc:	8f 92       	push	r8
    22ce:	9f 92       	push	r9
    22d0:	af 92       	push	r10
    22d2:	bf 92       	push	r11
    22d4:	cf 92       	push	r12
    22d6:	df 92       	push	r13
    22d8:	ef 92       	push	r14
    22da:	ff 92       	push	r15
    22dc:	0f 93       	push	r16
    22de:	1f 93       	push	r17
    22e0:	cf 93       	push	r28
    22e2:	df 93       	push	r29
    22e4:	1f 92       	push	r1
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	78 2e       	mov	r7, r24
    22ec:	66 2e       	mov	r6, r22
    22ee:	4a 01       	movw	r8, r20
    22f0:	59 01       	movw	r10, r18
    22f2:	40 dc       	rcall	.-1920   	; 0x1b74 <udd_ep_get_job>
    22f4:	6c 01       	movw	r12, r24
    22f6:	57 2c       	mov	r5, r7
    22f8:	55 1c       	adc	r5, r5
    22fa:	55 24       	eor	r5, r5
    22fc:	55 1c       	adc	r5, r5
    22fe:	87 2d       	mov	r24, r7
    2300:	8f 70       	andi	r24, 0x0F	; 15
    2302:	e8 2e       	mov	r14, r24
    2304:	f1 2c       	mov	r15, r1
    2306:	ee 0c       	add	r14, r14
    2308:	ff 1c       	adc	r15, r15
    230a:	e5 0c       	add	r14, r5
    230c:	f1 1c       	adc	r15, r1
    230e:	f7 01       	movw	r30, r14
    2310:	ee 0f       	add	r30, r30
    2312:	ff 1f       	adc	r31, r31
    2314:	ee 0f       	add	r30, r30
    2316:	ff 1f       	adc	r31, r31
    2318:	ee 0f       	add	r30, r30
    231a:	ff 1f       	adc	r31, r31
    231c:	e0 53       	subi	r30, 0x30	; 48
    231e:	fc 4d       	sbci	r31, 0xDC	; 220
    2320:	85 85       	ldd	r24, Z+13	; 0x0d
    2322:	80 7c       	andi	r24, 0xC0	; 192
    2324:	09 f4       	brne	.+2      	; 0x2328 <udd_ep_run+0x62>
    2326:	81 c0       	rjmp	.+258    	; 0x242a <udd_ep_run+0x164>
    2328:	f7 01       	movw	r30, r14
    232a:	ee 0f       	add	r30, r30
    232c:	ff 1f       	adc	r31, r31
    232e:	ee 0f       	add	r30, r30
    2330:	ff 1f       	adc	r31, r31
    2332:	ee 0f       	add	r30, r30
    2334:	ff 1f       	adc	r31, r31
    2336:	e0 53       	subi	r30, 0x30	; 48
    2338:	fc 4d       	sbci	r31, 0xDC	; 220
    233a:	85 85       	ldd	r24, Z+13	; 0x0d
    233c:	80 7c       	andi	r24, 0xC0	; 192
    233e:	80 3c       	cpi	r24, 0xC0	; 192
    2340:	61 f0       	breq	.+24     	; 0x235a <udd_ep_run+0x94>
    2342:	f7 01       	movw	r30, r14
    2344:	ee 0f       	add	r30, r30
    2346:	ff 1f       	adc	r31, r31
    2348:	ee 0f       	add	r30, r30
    234a:	ff 1f       	adc	r31, r31
    234c:	ee 0f       	add	r30, r30
    234e:	ff 1f       	adc	r31, r31
    2350:	e0 53       	subi	r30, 0x30	; 48
    2352:	fc 4d       	sbci	r31, 0xDC	; 220
    2354:	85 85       	ldd	r24, Z+13	; 0x0d
    2356:	82 fd       	sbrc	r24, 2
    2358:	6a c0       	rjmp	.+212    	; 0x242e <udd_ep_run+0x168>
    235a:	8f b7       	in	r24, 0x3f	; 63
    235c:	89 83       	std	Y+1, r24	; 0x01
    235e:	f8 94       	cli
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	f6 01       	movw	r30, r12
    2364:	90 81       	ld	r25, Z
    2366:	90 ff       	sbrs	r25, 0
    2368:	03 c0       	rjmp	.+6      	; 0x2370 <udd_ep_run+0xaa>
    236a:	8f bf       	out	0x3f, r24	; 63
    236c:	51 2c       	mov	r5, r1
    236e:	60 c0       	rjmp	.+192    	; 0x2430 <udd_ep_run+0x16a>
    2370:	f6 01       	movw	r30, r12
    2372:	90 81       	ld	r25, Z
    2374:	91 60       	ori	r25, 0x01	; 1
    2376:	90 83       	st	Z, r25
    2378:	8f bf       	out	0x3f, r24	; 63
    237a:	81 82       	std	Z+1, r8	; 0x01
    237c:	92 82       	std	Z+2, r9	; 0x02
    237e:	a3 82       	std	Z+3, r10	; 0x03
    2380:	b4 82       	std	Z+4, r11	; 0x04
    2382:	15 82       	std	Z+5, r1	; 0x05
    2384:	16 82       	std	Z+6, r1	; 0x06
    2386:	07 83       	std	Z+7, r16	; 0x07
    2388:	10 87       	std	Z+8, r17	; 0x08
    238a:	61 10       	cpse	r6, r1
    238c:	06 c0       	rjmp	.+12     	; 0x239a <udd_ep_run+0xd4>
    238e:	91 e0       	ldi	r25, 0x01	; 1
    2390:	a1 14       	cp	r10, r1
    2392:	b1 04       	cpc	r11, r1
    2394:	19 f0       	breq	.+6      	; 0x239c <udd_ep_run+0xd6>
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	01 c0       	rjmp	.+2      	; 0x239c <udd_ep_run+0xd6>
    239a:	91 e0       	ldi	r25, 0x01	; 1
    239c:	f6 01       	movw	r30, r12
    239e:	80 81       	ld	r24, Z
    23a0:	90 fb       	bst	r25, 0
    23a2:	81 f9       	bld	r24, 1
    23a4:	8b 7f       	andi	r24, 0xFB	; 251
    23a6:	80 83       	st	Z, r24
    23a8:	55 20       	and	r5, r5
    23aa:	61 f0       	breq	.+24     	; 0x23c4 <udd_ep_run+0xfe>
    23ac:	f7 01       	movw	r30, r14
    23ae:	ee 0f       	add	r30, r30
    23b0:	ff 1f       	adc	r31, r31
    23b2:	ee 0f       	add	r30, r30
    23b4:	ff 1f       	adc	r31, r31
    23b6:	ee 0f       	add	r30, r30
    23b8:	ff 1f       	adc	r31, r31
    23ba:	e0 53       	subi	r30, 0x30	; 48
    23bc:	fc 4d       	sbci	r31, 0xDC	; 220
    23be:	12 8a       	std	Z+18, r1	; 0x12
    23c0:	13 8a       	std	Z+19, r1	; 0x13
    23c2:	2e c0       	rjmp	.+92     	; 0x2420 <udd_ep_run+0x15a>
    23c4:	f7 01       	movw	r30, r14
    23c6:	ee 0f       	add	r30, r30
    23c8:	ff 1f       	adc	r31, r31
    23ca:	ee 0f       	add	r30, r30
    23cc:	ff 1f       	adc	r31, r31
    23ce:	ee 0f       	add	r30, r30
    23d0:	ff 1f       	adc	r31, r31
    23d2:	e0 53       	subi	r30, 0x30	; 48
    23d4:	fc 4d       	sbci	r31, 0xDC	; 220
    23d6:	85 85       	ldd	r24, Z+13	; 0x0d
    23d8:	80 7c       	andi	r24, 0xC0	; 192
    23da:	80 3c       	cpi	r24, 0xC0	; 192
    23dc:	a1 f4       	brne	.+40     	; 0x2406 <udd_ep_run+0x140>
    23de:	c7 01       	movw	r24, r14
    23e0:	88 0f       	add	r24, r24
    23e2:	99 1f       	adc	r25, r25
    23e4:	88 0f       	add	r24, r24
    23e6:	99 1f       	adc	r25, r25
    23e8:	88 0f       	add	r24, r24
    23ea:	99 1f       	adc	r25, r25
    23ec:	84 52       	subi	r24, 0x24	; 36
    23ee:	9c 4d       	sbci	r25, 0xDC	; 220
    23f0:	99 db       	rcall	.-2254   	; 0x1b24 <udd_ep_get_size>
    23f2:	bc 01       	movw	r22, r24
    23f4:	c5 01       	movw	r24, r10
    23f6:	25 d3       	rcall	.+1610   	; 0x2a42 <__udivmodhi4>
    23f8:	89 2b       	or	r24, r25
    23fa:	29 f0       	breq	.+10     	; 0x2406 <udd_ep_run+0x140>
    23fc:	f6 01       	movw	r30, r12
    23fe:	80 81       	ld	r24, Z
    2400:	8e 7f       	andi	r24, 0xFE	; 254
    2402:	80 83       	st	Z, r24
    2404:	15 c0       	rjmp	.+42     	; 0x2430 <udd_ep_run+0x16a>
    2406:	f7 01       	movw	r30, r14
    2408:	ee 0f       	add	r30, r30
    240a:	ff 1f       	adc	r31, r31
    240c:	ee 0f       	add	r30, r30
    240e:	ff 1f       	adc	r31, r31
    2410:	ee 0f       	add	r30, r30
    2412:	ff 1f       	adc	r31, r31
    2414:	e0 53       	subi	r30, 0x30	; 48
    2416:	fc 4d       	sbci	r31, 0xDC	; 220
    2418:	16 86       	std	Z+14, r1	; 0x0e
    241a:	17 86       	std	Z+15, r1	; 0x0f
    241c:	12 8a       	std	Z+18, r1	; 0x12
    241e:	13 8a       	std	Z+19, r1	; 0x13
    2420:	87 2d       	mov	r24, r7
    2422:	34 dc       	rcall	.-1944   	; 0x1c8c <udd_ep_trans_complet>
    2424:	55 24       	eor	r5, r5
    2426:	53 94       	inc	r5
    2428:	03 c0       	rjmp	.+6      	; 0x2430 <udd_ep_run+0x16a>
    242a:	51 2c       	mov	r5, r1
    242c:	01 c0       	rjmp	.+2      	; 0x2430 <udd_ep_run+0x16a>
    242e:	51 2c       	mov	r5, r1
    2430:	85 2d       	mov	r24, r5
    2432:	0f 90       	pop	r0
    2434:	df 91       	pop	r29
    2436:	cf 91       	pop	r28
    2438:	1f 91       	pop	r17
    243a:	0f 91       	pop	r16
    243c:	ff 90       	pop	r15
    243e:	ef 90       	pop	r14
    2440:	df 90       	pop	r13
    2442:	cf 90       	pop	r12
    2444:	bf 90       	pop	r11
    2446:	af 90       	pop	r10
    2448:	9f 90       	pop	r9
    244a:	8f 90       	pop	r8
    244c:	7f 90       	pop	r7
    244e:	6f 90       	pop	r6
    2450:	5f 90       	pop	r5
    2452:	08 95       	ret

00002454 <udd_ep_abort>:
    2454:	ff 92       	push	r15
    2456:	0f 93       	push	r16
    2458:	1f 93       	push	r17
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	18 2f       	mov	r17, r24
    2460:	f8 2e       	mov	r15, r24
    2462:	ff 1c       	adc	r15, r15
    2464:	ff 24       	eor	r15, r15
    2466:	ff 1c       	adc	r15, r15
    2468:	c8 2f       	mov	r28, r24
    246a:	cf 70       	andi	r28, 0x0F	; 15
    246c:	d0 e0       	ldi	r29, 0x00	; 0
    246e:	cc 0f       	add	r28, r28
    2470:	dd 1f       	adc	r29, r29
    2472:	cf 0d       	add	r28, r15
    2474:	d1 1d       	adc	r29, r1
    2476:	7e db       	rcall	.-2308   	; 0x1b74 <udd_ep_get_job>
    2478:	dc 01       	movw	r26, r24
    247a:	fe 01       	movw	r30, r28
    247c:	ee 0f       	add	r30, r30
    247e:	ff 1f       	adc	r31, r31
    2480:	ee 0f       	add	r30, r30
    2482:	ff 1f       	adc	r31, r31
    2484:	ee 0f       	add	r30, r30
    2486:	ff 1f       	adc	r31, r31
    2488:	e4 52       	subi	r30, 0x24	; 36
    248a:	fc 4d       	sbci	r31, 0xDC	; 220
    248c:	02 e0       	ldi	r16, 0x02	; 2
    248e:	05 93       	las	Z, r16
    2490:	8c 91       	ld	r24, X
    2492:	80 ff       	sbrs	r24, 0
    2494:	22 c0       	rjmp	.+68     	; 0x24da <udd_ep_abort+0x86>
    2496:	8e 7f       	andi	r24, 0xFE	; 254
    2498:	8c 93       	st	X, r24
    249a:	17 96       	adiw	r26, 0x07	; 7
    249c:	ed 91       	ld	r30, X+
    249e:	fc 91       	ld	r31, X
    24a0:	18 97       	sbiw	r26, 0x08	; 8
    24a2:	30 97       	sbiw	r30, 0x00	; 0
    24a4:	d1 f0       	breq	.+52     	; 0x24da <udd_ep_abort+0x86>
    24a6:	ff 20       	and	r15, r15
    24a8:	59 f0       	breq	.+22     	; 0x24c0 <udd_ep_abort+0x6c>
    24aa:	cc 0f       	add	r28, r28
    24ac:	dd 1f       	adc	r29, r29
    24ae:	cc 0f       	add	r28, r28
    24b0:	dd 1f       	adc	r29, r29
    24b2:	cc 0f       	add	r28, r28
    24b4:	dd 1f       	adc	r29, r29
    24b6:	c0 53       	subi	r28, 0x30	; 48
    24b8:	dc 4d       	sbci	r29, 0xDC	; 220
    24ba:	6a 89       	ldd	r22, Y+18	; 0x12
    24bc:	7b 89       	ldd	r23, Y+19	; 0x13
    24be:	0a c0       	rjmp	.+20     	; 0x24d4 <udd_ep_abort+0x80>
    24c0:	cc 0f       	add	r28, r28
    24c2:	dd 1f       	adc	r29, r29
    24c4:	cc 0f       	add	r28, r28
    24c6:	dd 1f       	adc	r29, r29
    24c8:	cc 0f       	add	r28, r28
    24ca:	dd 1f       	adc	r29, r29
    24cc:	c0 53       	subi	r28, 0x30	; 48
    24ce:	dc 4d       	sbci	r29, 0xDC	; 220
    24d0:	6e 85       	ldd	r22, Y+14	; 0x0e
    24d2:	7f 85       	ldd	r23, Y+15	; 0x0f
    24d4:	41 2f       	mov	r20, r17
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	19 95       	eicall
    24da:	df 91       	pop	r29
    24dc:	cf 91       	pop	r28
    24de:	1f 91       	pop	r17
    24e0:	0f 91       	pop	r16
    24e2:	ff 90       	pop	r15
    24e4:	08 95       	ret

000024e6 <udd_ep_free>:
    24e6:	cf 93       	push	r28
    24e8:	c8 2f       	mov	r28, r24
    24ea:	b4 df       	rcall	.-152    	; 0x2454 <udd_ep_abort>
    24ec:	ec 2f       	mov	r30, r28
    24ee:	ef 70       	andi	r30, 0x0F	; 15
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	ee 0f       	add	r30, r30
    24f4:	ff 1f       	adc	r31, r31
    24f6:	8c 2f       	mov	r24, r28
    24f8:	cc 0f       	add	r28, r28
    24fa:	99 0b       	sbc	r25, r25
    24fc:	88 27       	eor	r24, r24
    24fe:	99 0f       	add	r25, r25
    2500:	88 1f       	adc	r24, r24
    2502:	99 27       	eor	r25, r25
    2504:	e8 0f       	add	r30, r24
    2506:	f9 1f       	adc	r31, r25
    2508:	ee 0f       	add	r30, r30
    250a:	ff 1f       	adc	r31, r31
    250c:	ee 0f       	add	r30, r30
    250e:	ff 1f       	adc	r31, r31
    2510:	ee 0f       	add	r30, r30
    2512:	ff 1f       	adc	r31, r31
    2514:	e0 53       	subi	r30, 0x30	; 48
    2516:	fc 4d       	sbci	r31, 0xDC	; 220
    2518:	15 86       	std	Z+13, r1	; 0x0d
    251a:	cf 91       	pop	r28
    251c:	08 95       	ret

0000251e <udd_ep_set_halt>:
    251e:	e8 2f       	mov	r30, r24
    2520:	ef 70       	andi	r30, 0x0F	; 15
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	ee 0f       	add	r30, r30
    2526:	ff 1f       	adc	r31, r31
    2528:	28 2f       	mov	r18, r24
    252a:	08 2e       	mov	r0, r24
    252c:	00 0c       	add	r0, r0
    252e:	33 0b       	sbc	r19, r19
    2530:	22 27       	eor	r18, r18
    2532:	33 0f       	add	r19, r19
    2534:	22 1f       	adc	r18, r18
    2536:	33 27       	eor	r19, r19
    2538:	e2 0f       	add	r30, r18
    253a:	f3 1f       	adc	r31, r19
    253c:	ee 0f       	add	r30, r30
    253e:	ff 1f       	adc	r31, r31
    2540:	ee 0f       	add	r30, r30
    2542:	ff 1f       	adc	r31, r31
    2544:	ee 0f       	add	r30, r30
    2546:	ff 1f       	adc	r31, r31
    2548:	e0 53       	subi	r30, 0x30	; 48
    254a:	fc 4d       	sbci	r31, 0xDC	; 220
    254c:	95 85       	ldd	r25, Z+13	; 0x0d
    254e:	94 60       	ori	r25, 0x04	; 4
    2550:	95 87       	std	Z+13, r25	; 0x0d
    2552:	80 df       	rcall	.-256    	; 0x2454 <udd_ep_abort>
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	08 95       	ret

00002558 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2558:	1f 92       	push	r1
    255a:	0f 92       	push	r0
    255c:	0f b6       	in	r0, 0x3f	; 63
    255e:	0f 92       	push	r0
    2560:	11 24       	eor	r1, r1
    2562:	08 b6       	in	r0, 0x38	; 56
    2564:	0f 92       	push	r0
    2566:	18 be       	out	0x38, r1	; 56
    2568:	09 b6       	in	r0, 0x39	; 57
    256a:	0f 92       	push	r0
    256c:	19 be       	out	0x39, r1	; 57
    256e:	0b b6       	in	r0, 0x3b	; 59
    2570:	0f 92       	push	r0
    2572:	1b be       	out	0x3b, r1	; 59
    2574:	0f 93       	push	r16
    2576:	2f 93       	push	r18
    2578:	3f 93       	push	r19
    257a:	4f 93       	push	r20
    257c:	5f 93       	push	r21
    257e:	6f 93       	push	r22
    2580:	7f 93       	push	r23
    2582:	8f 93       	push	r24
    2584:	9f 93       	push	r25
    2586:	af 93       	push	r26
    2588:	bf 93       	push	r27
    258a:	ef 93       	push	r30
    258c:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    258e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2592:	88 23       	and	r24, r24
    2594:	34 f4       	brge	.+12     	; 0x25a2 <__vector_125+0x4a>
		udd_ack_start_of_frame_event();
    2596:	80 e8       	ldi	r24, 0x80	; 128
    2598:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    259c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    25a0:	86 c0       	rjmp	.+268    	; 0x26ae <__vector_125+0x156>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    25a2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    25a6:	82 ff       	sbrs	r24, 2
    25a8:	20 c0       	rjmp	.+64     	; 0x25ea <__vector_125+0x92>
		udd_ack_underflow_event();
    25aa:	84 e0       	ldi	r24, 0x04	; 4
    25ac:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    25b0:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <udd_sram+0x14>
    25b4:	86 ff       	sbrs	r24, 6
    25b6:	7b c0       	rjmp	.+246    	; 0x26ae <__vector_125+0x156>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    25b8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    25bc:	81 fd       	sbrc	r24, 1
    25be:	77 c0       	rjmp	.+238    	; 0x26ae <__vector_125+0x156>
    25c0:	f4 da       	rcall	.-2584   	; 0x1baa <udd_ctrl_interrupt_tc_setup>
    25c2:	81 11       	cpse	r24, r1
    25c4:	74 c0       	rjmp	.+232    	; 0x26ae <__vector_125+0x156>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    25c6:	80 91 cd 23 	lds	r24, 0x23CD	; 0x8023cd <udd_ep_control_state>
    25ca:	81 30       	cpi	r24, 0x01	; 1
    25cc:	11 f4       	brne	.+4      	; 0x25d2 <__vector_125+0x7a>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    25ce:	28 da       	rcall	.-2992   	; 0x1a20 <udd_ctrl_send_zlp_in>
    25d0:	6e c0       	rjmp	.+220    	; 0x26ae <__vector_125+0x156>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    25d2:	84 30       	cpi	r24, 0x04	; 4
    25d4:	09 f0       	breq	.+2      	; 0x25d8 <__vector_125+0x80>
    25d6:	6b c0       	rjmp	.+214    	; 0x26ae <__vector_125+0x156>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    25d8:	e5 ee       	ldi	r30, 0xE5	; 229
    25da:	f3 e2       	ldi	r31, 0x23	; 35
    25dc:	04 e0       	ldi	r16, 0x04	; 4
    25de:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    25e0:	ed ed       	ldi	r30, 0xDD	; 221
    25e2:	f3 e2       	ldi	r31, 0x23	; 35
    25e4:	04 e0       	ldi	r16, 0x04	; 4
    25e6:	05 93       	las	Z, r16
    25e8:	62 c0       	rjmp	.+196    	; 0x26ae <__vector_125+0x156>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    25ea:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    25ee:	81 ff       	sbrs	r24, 1
    25f0:	59 c0       	rjmp	.+178    	; 0x26a4 <__vector_125+0x14c>
		udd_ack_overflow_event();
    25f2:	82 e0       	ldi	r24, 0x02	; 2
    25f4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    25f8:	80 91 dc 23 	lds	r24, 0x23DC	; 0x8023dc <udd_sram+0xc>
    25fc:	86 ff       	sbrs	r24, 6
    25fe:	57 c0       	rjmp	.+174    	; 0x26ae <__vector_125+0x156>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2600:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2604:	81 fd       	sbrc	r24, 1
    2606:	53 c0       	rjmp	.+166    	; 0x26ae <__vector_125+0x156>
    2608:	d0 da       	rcall	.-2656   	; 0x1baa <udd_ctrl_interrupt_tc_setup>
    260a:	81 11       	cpse	r24, r1
    260c:	50 c0       	rjmp	.+160    	; 0x26ae <__vector_125+0x156>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    260e:	80 91 cd 23 	lds	r24, 0x23CD	; 0x8023cd <udd_ep_control_state>
    2612:	82 30       	cpi	r24, 0x02	; 2
    2614:	41 f4       	brne	.+16     	; 0x2626 <__vector_125+0xce>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2616:	84 e0       	ldi	r24, 0x04	; 4
    2618:	80 93 cd 23 	sts	0x23CD, r24	; 0x8023cd <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    261c:	ec ed       	ldi	r30, 0xDC	; 220
    261e:	f3 e2       	ldi	r31, 0x23	; 35
    2620:	02 e0       	ldi	r16, 0x02	; 2
    2622:	06 93       	lac	Z, r16
    2624:	44 c0       	rjmp	.+136    	; 0x26ae <__vector_125+0x156>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2626:	83 30       	cpi	r24, 0x03	; 3
    2628:	09 f0       	breq	.+2      	; 0x262c <__vector_125+0xd4>
    262a:	41 c0       	rjmp	.+130    	; 0x26ae <__vector_125+0x156>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    262c:	e5 ee       	ldi	r30, 0xE5	; 229
    262e:	f3 e2       	ldi	r31, 0x23	; 35
    2630:	04 e0       	ldi	r16, 0x04	; 4
    2632:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2634:	ed ed       	ldi	r30, 0xDD	; 221
    2636:	f3 e2       	ldi	r31, 0x23	; 35
    2638:	04 e0       	ldi	r16, 0x04	; 4
    263a:	05 93       	las	Z, r16
    263c:	38 c0       	rjmp	.+112    	; 0x26ae <__vector_125+0x156>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    263e:	80 e1       	ldi	r24, 0x10	; 16
    2640:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	06 df       	rcall	.-500    	; 0x2454 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2648:	81 e8       	ldi	r24, 0x81	; 129
    264a:	04 df       	rcall	.-504    	; 0x2454 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    264c:	82 e0       	ldi	r24, 0x02	; 2
    264e:	02 df       	rcall	.-508    	; 0x2454 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2650:	82 e8       	ldi	r24, 0x82	; 130
    2652:	00 df       	rcall	.-512    	; 0x2454 <udd_ep_abort>
		}
#endif
		udc_reset();
    2654:	0e 94 cc 09 	call	0x1398	; 0x1398 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2658:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    265c:	e0 ed       	ldi	r30, 0xD0	; 208
    265e:	f3 e2       	ldi	r31, 0x23	; 35
    2660:	15 86       	std	Z+13, r1	; 0x0d
	udd_endpoint_clear_status(ep_ctrl);
    2662:	96 e0       	ldi	r25, 0x06	; 6
    2664:	94 87       	std	Z+12, r25	; 0x0c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2666:	83 e4       	ldi	r24, 0x43	; 67
    2668:	85 87       	std	Z+13, r24	; 0x0d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    266a:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    266c:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    266e:	85 8b       	std	Z+21, r24	; 0x15
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2670:	89 e8       	ldi	r24, 0x89	; 137
    2672:	93 e2       	ldi	r25, 0x23	; 35
    2674:	80 8b       	std	Z+16, r24	; 0x10
    2676:	91 8b       	std	Z+17, r25	; 0x11
		// Reset endpoint control management
		udd_ctrl_init();
    2678:	a0 d9       	rcall	.-3264   	; 0x19ba <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    267a:	19 c0       	rjmp	.+50     	; 0x26ae <__vector_125+0x156>
	}

	if (udd_is_suspend_event()) {
    267c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2680:	86 ff       	sbrs	r24, 6
    2682:	06 c0       	rjmp	.+12     	; 0x2690 <__vector_125+0x138>
		udd_ack_suspend_event();
    2684:	80 e4       	ldi	r24, 0x40	; 64
    2686:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	5e d9       	rcall	.-3396   	; 0x194a <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    268e:	0f c0       	rjmp	.+30     	; 0x26ae <__vector_125+0x156>
	}

	if (udd_is_resume_event()) {
    2690:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2694:	85 ff       	sbrs	r24, 5
    2696:	0b c0       	rjmp	.+22     	; 0x26ae <__vector_125+0x156>
		udd_ack_resume_event();
    2698:	80 e2       	ldi	r24, 0x20	; 32
    269a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	54 d9       	rcall	.-3416   	; 0x194a <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    26a2:	05 c0       	rjmp	.+10     	; 0x26ae <__vector_125+0x156>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    26a4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    26a8:	84 fd       	sbrc	r24, 4
    26aa:	c9 cf       	rjmp	.-110    	; 0x263e <__vector_125+0xe6>
    26ac:	e7 cf       	rjmp	.-50     	; 0x267c <__vector_125+0x124>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    26ae:	ff 91       	pop	r31
    26b0:	ef 91       	pop	r30
    26b2:	bf 91       	pop	r27
    26b4:	af 91       	pop	r26
    26b6:	9f 91       	pop	r25
    26b8:	8f 91       	pop	r24
    26ba:	7f 91       	pop	r23
    26bc:	6f 91       	pop	r22
    26be:	5f 91       	pop	r21
    26c0:	4f 91       	pop	r20
    26c2:	3f 91       	pop	r19
    26c4:	2f 91       	pop	r18
    26c6:	0f 91       	pop	r16
    26c8:	0f 90       	pop	r0
    26ca:	0b be       	out	0x3b, r0	; 59
    26cc:	0f 90       	pop	r0
    26ce:	09 be       	out	0x39, r0	; 57
    26d0:	0f 90       	pop	r0
    26d2:	08 be       	out	0x38, r0	; 56
    26d4:	0f 90       	pop	r0
    26d6:	0f be       	out	0x3f, r0	; 63
    26d8:	0f 90       	pop	r0
    26da:	1f 90       	pop	r1
    26dc:	18 95       	reti

000026de <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    26de:	1f 92       	push	r1
    26e0:	0f 92       	push	r0
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	0f 92       	push	r0
    26e6:	11 24       	eor	r1, r1
    26e8:	08 b6       	in	r0, 0x38	; 56
    26ea:	0f 92       	push	r0
    26ec:	18 be       	out	0x38, r1	; 56
    26ee:	09 b6       	in	r0, 0x39	; 57
    26f0:	0f 92       	push	r0
    26f2:	19 be       	out	0x39, r1	; 57
    26f4:	0a b6       	in	r0, 0x3a	; 58
    26f6:	0f 92       	push	r0
    26f8:	1a be       	out	0x3a, r1	; 58
    26fa:	0b b6       	in	r0, 0x3b	; 59
    26fc:	0f 92       	push	r0
    26fe:	1b be       	out	0x3b, r1	; 59
    2700:	0f 93       	push	r16
    2702:	1f 93       	push	r17
    2704:	2f 93       	push	r18
    2706:	3f 93       	push	r19
    2708:	4f 93       	push	r20
    270a:	5f 93       	push	r21
    270c:	6f 93       	push	r22
    270e:	7f 93       	push	r23
    2710:	8f 93       	push	r24
    2712:	9f 93       	push	r25
    2714:	af 93       	push	r26
    2716:	bf 93       	push	r27
    2718:	cf 93       	push	r28
    271a:	df 93       	push	r29
    271c:	ef 93       	push	r30
    271e:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2720:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2724:	81 fd       	sbrc	r24, 1
    2726:	03 c0       	rjmp	.+6      	; 0x272e <__vector_126+0x50>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2728:	40 da       	rcall	.-2944   	; 0x1baa <udd_ctrl_interrupt_tc_setup>
    272a:	81 11       	cpse	r24, r1
    272c:	c3 c0       	rjmp	.+390    	; 0x28b4 <__vector_126+0x1d6>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    272e:	82 e0       	ldi	r24, 0x02	; 2
    2730:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2734:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2738:	81 95       	neg	r24
    273a:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    273c:	ec ed       	ldi	r30, 0xDC	; 220
    273e:	f3 e2       	ldi	r31, 0x23	; 35
    2740:	e8 1b       	sub	r30, r24
    2742:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2744:	20 81       	ld	r18, Z
    2746:	31 81       	ldd	r19, Z+1	; 0x01
    2748:	2c 5d       	subi	r18, 0xDC	; 220
    274a:	33 42       	sbci	r19, 0x23	; 35
    274c:	36 95       	lsr	r19
    274e:	27 95       	ror	r18
    2750:	36 95       	lsr	r19
    2752:	27 95       	ror	r18
    2754:	36 95       	lsr	r19
    2756:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2758:	82 2f       	mov	r24, r18
    275a:	86 95       	lsr	r24
    275c:	20 fd       	sbrc	r18, 0
    275e:	02 c0       	rjmp	.+4      	; 0x2764 <__vector_126+0x86>
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	01 c0       	rjmp	.+2      	; 0x2766 <__vector_126+0x88>
    2764:	90 e8       	ldi	r25, 0x80	; 128
    2766:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2768:	e8 2f       	mov	r30, r24
    276a:	ef 70       	andi	r30, 0x0F	; 15
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	ee 0f       	add	r30, r30
    2770:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2772:	28 2f       	mov	r18, r24
    2774:	08 2e       	mov	r0, r24
    2776:	00 0c       	add	r0, r0
    2778:	33 0b       	sbc	r19, r19
    277a:	22 27       	eor	r18, r18
    277c:	33 0f       	add	r19, r19
    277e:	22 1f       	adc	r18, r18
    2780:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2782:	e2 0f       	add	r30, r18
    2784:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2786:	df 01       	movw	r26, r30
    2788:	aa 0f       	add	r26, r26
    278a:	bb 1f       	adc	r27, r27
    278c:	aa 0f       	add	r26, r26
    278e:	bb 1f       	adc	r27, r27
    2790:	aa 0f       	add	r26, r26
    2792:	bb 1f       	adc	r27, r27
    2794:	a0 53       	subi	r26, 0x30	; 48
    2796:	bc 4d       	sbci	r27, 0xDC	; 220
    2798:	1c 96       	adiw	r26, 0x0c	; 12
    279a:	9c 91       	ld	r25, X
    279c:	95 ff       	sbrs	r25, 5
    279e:	8a c0       	rjmp	.+276    	; 0x28b4 <__vector_126+0x1d6>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    27a0:	ee 0f       	add	r30, r30
    27a2:	ff 1f       	adc	r31, r31
    27a4:	ee 0f       	add	r30, r30
    27a6:	ff 1f       	adc	r31, r31
    27a8:	ee 0f       	add	r30, r30
    27aa:	ff 1f       	adc	r31, r31
    27ac:	e4 52       	subi	r30, 0x24	; 36
    27ae:	fc 4d       	sbci	r31, 0xDC	; 220
    27b0:	00 e2       	ldi	r16, 0x20	; 32
    27b2:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    27b4:	81 11       	cpse	r24, r1
    27b6:	79 c0       	rjmp	.+242    	; 0x28aa <__vector_126+0x1cc>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    27b8:	80 91 cd 23 	lds	r24, 0x23CD	; 0x8023cd <udd_ep_control_state>
    27bc:	84 30       	cpi	r24, 0x04	; 4
    27be:	19 f4       	brne	.+6      	; 0x27c6 <__vector_126+0xe8>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    27c0:	3d d9       	rcall	.-3462   	; 0x1a3c <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    27c2:	fb d8       	rcall	.-3594   	; 0x19ba <udd_ctrl_init>
    27c4:	77 c0       	rjmp	.+238    	; 0x28b4 <__vector_126+0x1d6>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    27c6:	00 91 de 23 	lds	r16, 0x23DE	; 0x8023de <udd_sram+0xe>
    27ca:	10 91 df 23 	lds	r17, 0x23DF	; 0x8023df <udd_sram+0xf>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    27ce:	80 91 1c 25 	lds	r24, 0x251C	; 0x80251c <udd_g_ctrlreq+0xa>
    27d2:	90 91 1d 25 	lds	r25, 0x251D	; 0x80251d <udd_g_ctrlreq+0xb>
    27d6:	c0 91 c9 23 	lds	r28, 0x23C9	; 0x8023c9 <udd_ctrl_payload_nb_trans>
    27da:	d0 91 ca 23 	lds	r29, 0x23CA	; 0x8023ca <udd_ctrl_payload_nb_trans+0x1>
    27de:	9e 01       	movw	r18, r28
    27e0:	20 0f       	add	r18, r16
    27e2:	31 1f       	adc	r19, r17
    27e4:	82 17       	cp	r24, r18
    27e6:	93 07       	cpc	r25, r19
    27e8:	18 f4       	brcc	.+6      	; 0x27f0 <__vector_126+0x112>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    27ea:	8c 01       	movw	r16, r24
    27ec:	0c 1b       	sub	r16, r28
    27ee:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    27f0:	80 91 1a 25 	lds	r24, 0x251A	; 0x80251a <udd_g_ctrlreq+0x8>
    27f4:	90 91 1b 25 	lds	r25, 0x251B	; 0x80251b <udd_g_ctrlreq+0x9>
    27f8:	a8 01       	movw	r20, r16
    27fa:	69 e8       	ldi	r22, 0x89	; 137
    27fc:	73 e2       	ldi	r23, 0x23	; 35
    27fe:	8c 0f       	add	r24, r28
    2800:	9d 1f       	adc	r25, r29
    2802:	3c d1       	rcall	.+632    	; 0x2a7c <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2804:	c0 0f       	add	r28, r16
    2806:	d1 1f       	adc	r29, r17
    2808:	c0 93 c9 23 	sts	0x23C9, r28	; 0x8023c9 <udd_ctrl_payload_nb_trans>
    280c:	d0 93 ca 23 	sts	0x23CA, r29	; 0x8023ca <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2810:	00 34       	cpi	r16, 0x40	; 64
    2812:	11 05       	cpc	r17, r1
    2814:	69 f4       	brne	.+26     	; 0x2830 <__vector_126+0x152>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2816:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <udd_ctrl_prev_payload_nb_trans>
    281a:	90 91 cc 23 	lds	r25, 0x23CC	; 0x8023cc <udd_ctrl_prev_payload_nb_trans+0x1>
    281e:	8c 0f       	add	r24, r28
    2820:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2822:	20 91 18 25 	lds	r18, 0x2518	; 0x802518 <udd_g_ctrlreq+0x6>
    2826:	30 91 19 25 	lds	r19, 0x2519	; 0x802519 <udd_g_ctrlreq+0x7>
    282a:	82 17       	cp	r24, r18
    282c:	93 07       	cpc	r25, r19
    282e:	80 f0       	brcs	.+32     	; 0x2850 <__vector_126+0x172>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2830:	e2 e1       	ldi	r30, 0x12	; 18
    2832:	f5 e2       	ldi	r31, 0x25	; 37
    2834:	c2 87       	std	Z+10, r28	; 0x0a
    2836:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2838:	06 84       	ldd	r0, Z+14	; 0x0e
    283a:	f7 85       	ldd	r31, Z+15	; 0x0f
    283c:	e0 2d       	mov	r30, r0
    283e:	30 97       	sbiw	r30, 0x00	; 0
    2840:	29 f0       	breq	.+10     	; 0x284c <__vector_126+0x16e>
			if (!udd_g_ctrlreq.over_under_run()) {
    2842:	19 95       	eicall
    2844:	81 11       	cpse	r24, r1
    2846:	02 c0       	rjmp	.+4      	; 0x284c <__vector_126+0x16e>
				// Stall ZLP
				udd_ctrl_stall_data();
    2848:	dd d8       	rcall	.-3654   	; 0x1a04 <udd_ctrl_stall_data>
    284a:	34 c0       	rjmp	.+104    	; 0x28b4 <__vector_126+0x1d6>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    284c:	e9 d8       	rcall	.-3630   	; 0x1a20 <udd_ctrl_send_zlp_in>
    284e:	32 c0       	rjmp	.+100    	; 0x28b4 <__vector_126+0x1d6>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2850:	80 91 1c 25 	lds	r24, 0x251C	; 0x80251c <udd_g_ctrlreq+0xa>
    2854:	90 91 1d 25 	lds	r25, 0x251D	; 0x80251d <udd_g_ctrlreq+0xb>
    2858:	c8 17       	cp	r28, r24
    285a:	d9 07       	cpc	r29, r25
    285c:	f9 f4       	brne	.+62     	; 0x289c <__vector_126+0x1be>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    285e:	e0 91 20 25 	lds	r30, 0x2520	; 0x802520 <udd_g_ctrlreq+0xe>
    2862:	f0 91 21 25 	lds	r31, 0x2521	; 0x802521 <udd_g_ctrlreq+0xf>
    2866:	30 97       	sbiw	r30, 0x00	; 0
    2868:	11 f4       	brne	.+4      	; 0x286e <__vector_126+0x190>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    286a:	cc d8       	rcall	.-3688   	; 0x1a04 <udd_ctrl_stall_data>
    286c:	23 c0       	rjmp	.+70     	; 0x28b4 <__vector_126+0x1d6>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    286e:	19 95       	eicall
    2870:	81 11       	cpse	r24, r1
    2872:	02 c0       	rjmp	.+4      	; 0x2878 <__vector_126+0x19a>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2874:	c7 d8       	rcall	.-3698   	; 0x1a04 <udd_ctrl_stall_data>
    2876:	1e c0       	rjmp	.+60     	; 0x28b4 <__vector_126+0x1d6>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2878:	20 91 cb 23 	lds	r18, 0x23CB	; 0x8023cb <udd_ctrl_prev_payload_nb_trans>
    287c:	30 91 cc 23 	lds	r19, 0x23CC	; 0x8023cc <udd_ctrl_prev_payload_nb_trans+0x1>
    2880:	80 91 c9 23 	lds	r24, 0x23C9	; 0x8023c9 <udd_ctrl_payload_nb_trans>
    2884:	90 91 ca 23 	lds	r25, 0x23CA	; 0x8023ca <udd_ctrl_payload_nb_trans+0x1>
    2888:	82 0f       	add	r24, r18
    288a:	93 1f       	adc	r25, r19
    288c:	80 93 cb 23 	sts	0x23CB, r24	; 0x8023cb <udd_ctrl_prev_payload_nb_trans>
    2890:	90 93 cc 23 	sts	0x23CC, r25	; 0x8023cc <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2894:	10 92 c9 23 	sts	0x23C9, r1	; 0x8023c9 <udd_ctrl_payload_nb_trans>
    2898:	10 92 ca 23 	sts	0x23CA, r1	; 0x8023ca <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    289c:	ec ed       	ldi	r30, 0xDC	; 220
    289e:	f3 e2       	ldi	r31, 0x23	; 35
    28a0:	02 e0       	ldi	r16, 0x02	; 2
    28a2:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    28a4:	00 e2       	ldi	r16, 0x20	; 32
    28a6:	06 93       	lac	Z, r16
    28a8:	05 c0       	rjmp	.+10     	; 0x28b4 <__vector_126+0x1d6>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    28aa:	80 38       	cpi	r24, 0x80	; 128
    28ac:	11 f4       	brne	.+4      	; 0x28b2 <__vector_126+0x1d4>
		udd_ctrl_in_sent();
    28ae:	ce d8       	rcall	.-3684   	; 0x1a4c <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    28b0:	01 c0       	rjmp	.+2      	; 0x28b4 <__vector_126+0x1d6>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    28b2:	ec d9       	rcall	.-3112   	; 0x1c8c <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    28b4:	ff 91       	pop	r31
    28b6:	ef 91       	pop	r30
    28b8:	df 91       	pop	r29
    28ba:	cf 91       	pop	r28
    28bc:	bf 91       	pop	r27
    28be:	af 91       	pop	r26
    28c0:	9f 91       	pop	r25
    28c2:	8f 91       	pop	r24
    28c4:	7f 91       	pop	r23
    28c6:	6f 91       	pop	r22
    28c8:	5f 91       	pop	r21
    28ca:	4f 91       	pop	r20
    28cc:	3f 91       	pop	r19
    28ce:	2f 91       	pop	r18
    28d0:	1f 91       	pop	r17
    28d2:	0f 91       	pop	r16
    28d4:	0f 90       	pop	r0
    28d6:	0b be       	out	0x3b, r0	; 59
    28d8:	0f 90       	pop	r0
    28da:	0a be       	out	0x3a, r0	; 58
    28dc:	0f 90       	pop	r0
    28de:	09 be       	out	0x39, r0	; 57
    28e0:	0f 90       	pop	r0
    28e2:	08 be       	out	0x38, r0	; 56
    28e4:	0f 90       	pop	r0
    28e6:	0f be       	out	0x3f, r0	; 63
    28e8:	0f 90       	pop	r0
    28ea:	1f 90       	pop	r1
    28ec:	18 95       	reti

000028ee <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
    28ee:	cf 93       	push	r28
    28f0:	df 93       	push	r29
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
    28f6:	25 97       	sbiw	r28, 0x05	; 5
    28f8:	cd bf       	out	0x3d, r28	; 61
    28fa:	de bf       	out	0x3e, r29	; 62
    28fc:	6c e1       	ldi	r22, 0x1C	; 28
    28fe:	70 e0       	ldi	r23, 0x00	; 0
    2900:	82 e0       	ldi	r24, 0x02	; 2
    2902:	8f d0       	rcall	.+286    	; 0x2a22 <nvm_read_byte>
    2904:	8a 83       	std	Y+2, r24	; 0x02
    2906:	6d e1       	ldi	r22, 0x1D	; 29
    2908:	70 e0       	ldi	r23, 0x00	; 0
    290a:	82 e0       	ldi	r24, 0x02	; 2
    290c:	8a d0       	rcall	.+276    	; 0x2a22 <nvm_read_byte>
    290e:	89 83       	std	Y+1, r24	; 0x01
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	9a 81       	ldd	r25, Y+2	; 0x02
    2914:	01 96       	adiw	r24, 0x01	; 1
    2916:	21 f4       	brne	.+8      	; 0x2920 <sysclk_init+0x32>
    2918:	80 e4       	ldi	r24, 0x40	; 64
    291a:	93 e2       	ldi	r25, 0x23	; 35
    291c:	89 83       	std	Y+1, r24	; 0x01
    291e:	9a 83       	std	Y+2, r25	; 0x02
    2920:	89 81       	ldd	r24, Y+1	; 0x01
    2922:	9a 81       	ldd	r25, Y+2	; 0x02
    2924:	8b 83       	std	Y+3, r24	; 0x03
    2926:	9c 83       	std	Y+4, r25	; 0x04
    2928:	e0 e6       	ldi	r30, 0x60	; 96
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	82 83       	std	Z+2, r24	; 0x02
    292e:	8c 81       	ldd	r24, Y+4	; 0x04
    2930:	83 83       	std	Z+3, r24	; 0x03
    2932:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    2936:	84 fd       	sbrc	r24, 4
    2938:	0f c0       	rjmp	.+30     	; 0x2958 <sysclk_init+0x6a>
    293a:	8f b7       	in	r24, 0x3f	; 63
    293c:	8d 83       	std	Y+5, r24	; 0x05
    293e:	f8 94       	cli
    2940:	9d 81       	ldd	r25, Y+5	; 0x05
    2942:	e0 e5       	ldi	r30, 0x50	; 80
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 e1       	ldi	r24, 0x10	; 16
    2948:	85 83       	std	Z+5, r24	; 0x05
    294a:	80 81       	ld	r24, Z
    294c:	80 61       	ori	r24, 0x10	; 16
    294e:	80 83       	st	Z, r24
    2950:	9f bf       	out	0x3f, r25	; 63
    2952:	81 81       	ldd	r24, Z+1	; 0x01
    2954:	84 ff       	sbrs	r24, 4
    2956:	fd cf       	rjmp	.-6      	; 0x2952 <sysclk_init+0x64>
    2958:	64 e0       	ldi	r22, 0x04	; 4
    295a:	80 e4       	ldi	r24, 0x40	; 64
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	6b d0       	rcall	.+214    	; 0x2a36 <ccp_write_io>
    2960:	25 96       	adiw	r28, 0x05	; 5
    2962:	cd bf       	out	0x3d, r28	; 61
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	df 91       	pop	r29
    2968:	cf 91       	pop	r28
    296a:	08 95       	ret

0000296c <sysclk_enable_module>:
    296c:	cf 93       	push	r28
    296e:	df 93       	push	r29
    2970:	1f 92       	push	r1
    2972:	cd b7       	in	r28, 0x3d	; 61
    2974:	de b7       	in	r29, 0x3e	; 62
    2976:	9f b7       	in	r25, 0x3f	; 63
    2978:	99 83       	std	Y+1, r25	; 0x01
    297a:	f8 94       	cli
    297c:	99 81       	ldd	r25, Y+1	; 0x01
    297e:	e8 2f       	mov	r30, r24
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	e0 59       	subi	r30, 0x90	; 144
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	60 95       	com	r22
    2988:	80 81       	ld	r24, Z
    298a:	68 23       	and	r22, r24
    298c:	60 83       	st	Z, r22
    298e:	9f bf       	out	0x3f, r25	; 63
    2990:	0f 90       	pop	r0
    2992:	df 91       	pop	r29
    2994:	cf 91       	pop	r28
    2996:	08 95       	ret

00002998 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    2998:	cf 93       	push	r28
    299a:	df 93       	push	r29
    299c:	1f 92       	push	r1
    299e:	1f 92       	push	r1
    29a0:	cd b7       	in	r28, 0x3d	; 61
    29a2:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    29a4:	86 30       	cpi	r24, 0x06	; 6
    29a6:	11 f0       	breq	.+4      	; 0x29ac <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    29a8:	60 e0       	ldi	r22, 0x00	; 0
    29aa:	01 c0       	rjmp	.+2      	; 0x29ae <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    29ac:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    29ae:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    29b2:	81 fd       	sbrc	r24, 1
    29b4:	2a c0       	rjmp	.+84     	; 0x2a0a <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    29b6:	8f b7       	in	r24, 0x3f	; 63
    29b8:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    29ba:	f8 94       	cli
	return flags;
    29bc:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    29be:	e0 e5       	ldi	r30, 0x50	; 80
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	82 60       	ori	r24, 0x02	; 2
    29c6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    29c8:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    29ca:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    29cc:	81 ff       	sbrs	r24, 1
    29ce:	fd cf       	rjmp	.-6      	; 0x29ca <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    29d0:	8f b7       	in	r24, 0x3f	; 63
    29d2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    29d4:	f8 94       	cli
	return flags;
    29d6:	99 81       	ldd	r25, Y+1	; 0x01
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    29d8:	a0 e5       	ldi	r26, 0x50	; 80
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	16 96       	adiw	r26, 0x06	; 6
    29de:	8c 91       	ld	r24, X
    29e0:	16 97       	sbiw	r26, 0x06	; 6
    29e2:	89 7f       	andi	r24, 0xF9	; 249
    29e4:	16 96       	adiw	r26, 0x06	; 6
    29e6:	8c 93       	st	X, r24
    29e8:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    29ea:	e0 e6       	ldi	r30, 0x60	; 96
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	80 e8       	ldi	r24, 0x80	; 128
    29f0:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    29f2:	8b eb       	ldi	r24, 0xBB	; 187
    29f4:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    29f6:	16 96       	adiw	r26, 0x06	; 6
    29f8:	8c 91       	ld	r24, X
    29fa:	16 97       	sbiw	r26, 0x06	; 6
    29fc:	84 60       	ori	r24, 0x04	; 4
    29fe:	16 96       	adiw	r26, 0x06	; 6
    2a00:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    2a02:	80 81       	ld	r24, Z
    2a04:	81 60       	ori	r24, 0x01	; 1
    2a06:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2a08:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    2a0a:	63 60       	ori	r22, 0x03	; 3
    2a0c:	84 e4       	ldi	r24, 0x44	; 68
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	12 d0       	rcall	.+36     	; 0x2a36 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    2a12:	60 e4       	ldi	r22, 0x40	; 64
    2a14:	80 e0       	ldi	r24, 0x00	; 0
    2a16:	aa df       	rcall	.-172    	; 0x296c <sysclk_enable_module>
}
    2a18:	0f 90       	pop	r0
    2a1a:	0f 90       	pop	r0
    2a1c:	df 91       	pop	r29
    2a1e:	cf 91       	pop	r28
    2a20:	08 95       	ret

00002a22 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    2a22:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    2a26:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    2a28:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    2a2a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    2a2e:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    2a30:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    2a34:	08 95       	ret

00002a36 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2a36:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    2a38:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    2a3a:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    2a3c:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2a3e:	60 83       	st	Z, r22
	ret                             // Return to caller
    2a40:	08 95       	ret

00002a42 <__udivmodhi4>:
    2a42:	aa 1b       	sub	r26, r26
    2a44:	bb 1b       	sub	r27, r27
    2a46:	51 e1       	ldi	r21, 0x11	; 17
    2a48:	07 c0       	rjmp	.+14     	; 0x2a58 <__udivmodhi4_ep>

00002a4a <__udivmodhi4_loop>:
    2a4a:	aa 1f       	adc	r26, r26
    2a4c:	bb 1f       	adc	r27, r27
    2a4e:	a6 17       	cp	r26, r22
    2a50:	b7 07       	cpc	r27, r23
    2a52:	10 f0       	brcs	.+4      	; 0x2a58 <__udivmodhi4_ep>
    2a54:	a6 1b       	sub	r26, r22
    2a56:	b7 0b       	sbc	r27, r23

00002a58 <__udivmodhi4_ep>:
    2a58:	88 1f       	adc	r24, r24
    2a5a:	99 1f       	adc	r25, r25
    2a5c:	5a 95       	dec	r21
    2a5e:	a9 f7       	brne	.-22     	; 0x2a4a <__udivmodhi4_loop>
    2a60:	80 95       	com	r24
    2a62:	90 95       	com	r25
    2a64:	bc 01       	movw	r22, r24
    2a66:	cd 01       	movw	r24, r26
    2a68:	08 95       	ret

00002a6a <__tablejump2__>:
    2a6a:	ee 0f       	add	r30, r30
    2a6c:	ff 1f       	adc	r31, r31
    2a6e:	88 1f       	adc	r24, r24
    2a70:	8b bf       	out	0x3b, r24	; 59
    2a72:	07 90       	elpm	r0, Z+
    2a74:	f6 91       	elpm	r31, Z
    2a76:	e0 2d       	mov	r30, r0
    2a78:	1b be       	out	0x3b, r1	; 59
    2a7a:	19 94       	eijmp

00002a7c <memcpy>:
    2a7c:	fb 01       	movw	r30, r22
    2a7e:	dc 01       	movw	r26, r24
    2a80:	02 c0       	rjmp	.+4      	; 0x2a86 <memcpy+0xa>
    2a82:	01 90       	ld	r0, Z+
    2a84:	0d 92       	st	X+, r0
    2a86:	41 50       	subi	r20, 0x01	; 1
    2a88:	50 40       	sbci	r21, 0x00	; 0
    2a8a:	d8 f7       	brcc	.-10     	; 0x2a82 <memcpy+0x6>
    2a8c:	08 95       	ret

00002a8e <printf>:
    2a8e:	cf 93       	push	r28
    2a90:	df 93       	push	r29
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
    2a96:	ae 01       	movw	r20, r28
    2a98:	4a 5f       	subi	r20, 0xFA	; 250
    2a9a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a9c:	fa 01       	movw	r30, r20
    2a9e:	61 91       	ld	r22, Z+
    2aa0:	71 91       	ld	r23, Z+
    2aa2:	af 01       	movw	r20, r30
    2aa4:	80 91 2a 25 	lds	r24, 0x252A	; 0x80252a <__iob+0x2>
    2aa8:	90 91 2b 25 	lds	r25, 0x252B	; 0x80252b <__iob+0x3>
    2aac:	38 d0       	rcall	.+112    	; 0x2b1e <vfprintf>
    2aae:	df 91       	pop	r29
    2ab0:	cf 91       	pop	r28
    2ab2:	08 95       	ret

00002ab4 <putchar>:
    2ab4:	60 91 2a 25 	lds	r22, 0x252A	; 0x80252a <__iob+0x2>
    2ab8:	70 91 2b 25 	lds	r23, 0x252B	; 0x80252b <__iob+0x3>
    2abc:	2e c2       	rjmp	.+1116   	; 0x2f1a <fputc>

00002abe <puts>:
    2abe:	0f 93       	push	r16
    2ac0:	1f 93       	push	r17
    2ac2:	cf 93       	push	r28
    2ac4:	df 93       	push	r29
    2ac6:	e0 91 2a 25 	lds	r30, 0x252A	; 0x80252a <__iob+0x2>
    2aca:	f0 91 2b 25 	lds	r31, 0x252B	; 0x80252b <__iob+0x3>
    2ace:	23 81       	ldd	r18, Z+3	; 0x03
    2ad0:	21 ff       	sbrs	r18, 1
    2ad2:	1b c0       	rjmp	.+54     	; 0x2b0a <puts+0x4c>
    2ad4:	8c 01       	movw	r16, r24
    2ad6:	d0 e0       	ldi	r29, 0x00	; 0
    2ad8:	c0 e0       	ldi	r28, 0x00	; 0
    2ada:	f8 01       	movw	r30, r16
    2adc:	81 91       	ld	r24, Z+
    2ade:	8f 01       	movw	r16, r30
    2ae0:	60 91 2a 25 	lds	r22, 0x252A	; 0x80252a <__iob+0x2>
    2ae4:	70 91 2b 25 	lds	r23, 0x252B	; 0x80252b <__iob+0x3>
    2ae8:	db 01       	movw	r26, r22
    2aea:	18 96       	adiw	r26, 0x08	; 8
    2aec:	ed 91       	ld	r30, X+
    2aee:	fc 91       	ld	r31, X
    2af0:	19 97       	sbiw	r26, 0x09	; 9
    2af2:	88 23       	and	r24, r24
    2af4:	31 f0       	breq	.+12     	; 0x2b02 <puts+0x44>
    2af6:	19 95       	eicall
    2af8:	89 2b       	or	r24, r25
    2afa:	79 f3       	breq	.-34     	; 0x2ada <puts+0x1c>
    2afc:	df ef       	ldi	r29, 0xFF	; 255
    2afe:	cf ef       	ldi	r28, 0xFF	; 255
    2b00:	ec cf       	rjmp	.-40     	; 0x2ada <puts+0x1c>
    2b02:	8a e0       	ldi	r24, 0x0A	; 10
    2b04:	19 95       	eicall
    2b06:	89 2b       	or	r24, r25
    2b08:	19 f0       	breq	.+6      	; 0x2b10 <puts+0x52>
    2b0a:	8f ef       	ldi	r24, 0xFF	; 255
    2b0c:	9f ef       	ldi	r25, 0xFF	; 255
    2b0e:	02 c0       	rjmp	.+4      	; 0x2b14 <puts+0x56>
    2b10:	8d 2f       	mov	r24, r29
    2b12:	9c 2f       	mov	r25, r28
    2b14:	df 91       	pop	r29
    2b16:	cf 91       	pop	r28
    2b18:	1f 91       	pop	r17
    2b1a:	0f 91       	pop	r16
    2b1c:	08 95       	ret

00002b1e <vfprintf>:
    2b1e:	2f 92       	push	r2
    2b20:	3f 92       	push	r3
    2b22:	4f 92       	push	r4
    2b24:	5f 92       	push	r5
    2b26:	6f 92       	push	r6
    2b28:	7f 92       	push	r7
    2b2a:	8f 92       	push	r8
    2b2c:	9f 92       	push	r9
    2b2e:	af 92       	push	r10
    2b30:	bf 92       	push	r11
    2b32:	cf 92       	push	r12
    2b34:	df 92       	push	r13
    2b36:	ef 92       	push	r14
    2b38:	ff 92       	push	r15
    2b3a:	0f 93       	push	r16
    2b3c:	1f 93       	push	r17
    2b3e:	cf 93       	push	r28
    2b40:	df 93       	push	r29
    2b42:	cd b7       	in	r28, 0x3d	; 61
    2b44:	de b7       	in	r29, 0x3e	; 62
    2b46:	2c 97       	sbiw	r28, 0x0c	; 12
    2b48:	cd bf       	out	0x3d, r28	; 61
    2b4a:	de bf       	out	0x3e, r29	; 62
    2b4c:	7c 01       	movw	r14, r24
    2b4e:	6b 01       	movw	r12, r22
    2b50:	8a 01       	movw	r16, r20
    2b52:	fc 01       	movw	r30, r24
    2b54:	16 82       	std	Z+6, r1	; 0x06
    2b56:	17 82       	std	Z+7, r1	; 0x07
    2b58:	83 81       	ldd	r24, Z+3	; 0x03
    2b5a:	81 ff       	sbrs	r24, 1
    2b5c:	b0 c1       	rjmp	.+864    	; 0x2ebe <vfprintf+0x3a0>
    2b5e:	ce 01       	movw	r24, r28
    2b60:	01 96       	adiw	r24, 0x01	; 1
    2b62:	4c 01       	movw	r8, r24
    2b64:	f7 01       	movw	r30, r14
    2b66:	93 81       	ldd	r25, Z+3	; 0x03
    2b68:	f6 01       	movw	r30, r12
    2b6a:	93 fd       	sbrc	r25, 3
    2b6c:	85 91       	lpm	r24, Z+
    2b6e:	93 ff       	sbrs	r25, 3
    2b70:	81 91       	ld	r24, Z+
    2b72:	6f 01       	movw	r12, r30
    2b74:	88 23       	and	r24, r24
    2b76:	09 f4       	brne	.+2      	; 0x2b7a <vfprintf+0x5c>
    2b78:	9e c1       	rjmp	.+828    	; 0x2eb6 <vfprintf+0x398>
    2b7a:	85 32       	cpi	r24, 0x25	; 37
    2b7c:	39 f4       	brne	.+14     	; 0x2b8c <vfprintf+0x6e>
    2b7e:	93 fd       	sbrc	r25, 3
    2b80:	85 91       	lpm	r24, Z+
    2b82:	93 ff       	sbrs	r25, 3
    2b84:	81 91       	ld	r24, Z+
    2b86:	6f 01       	movw	r12, r30
    2b88:	85 32       	cpi	r24, 0x25	; 37
    2b8a:	21 f4       	brne	.+8      	; 0x2b94 <vfprintf+0x76>
    2b8c:	b7 01       	movw	r22, r14
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	c4 d1       	rcall	.+904    	; 0x2f1a <fputc>
    2b92:	e8 cf       	rjmp	.-48     	; 0x2b64 <vfprintf+0x46>
    2b94:	51 2c       	mov	r5, r1
    2b96:	31 2c       	mov	r3, r1
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	20 32       	cpi	r18, 0x20	; 32
    2b9c:	a0 f4       	brcc	.+40     	; 0x2bc6 <vfprintf+0xa8>
    2b9e:	8b 32       	cpi	r24, 0x2B	; 43
    2ba0:	69 f0       	breq	.+26     	; 0x2bbc <vfprintf+0x9e>
    2ba2:	30 f4       	brcc	.+12     	; 0x2bb0 <vfprintf+0x92>
    2ba4:	80 32       	cpi	r24, 0x20	; 32
    2ba6:	59 f0       	breq	.+22     	; 0x2bbe <vfprintf+0xa0>
    2ba8:	83 32       	cpi	r24, 0x23	; 35
    2baa:	69 f4       	brne	.+26     	; 0x2bc6 <vfprintf+0xa8>
    2bac:	20 61       	ori	r18, 0x10	; 16
    2bae:	2c c0       	rjmp	.+88     	; 0x2c08 <vfprintf+0xea>
    2bb0:	8d 32       	cpi	r24, 0x2D	; 45
    2bb2:	39 f0       	breq	.+14     	; 0x2bc2 <vfprintf+0xa4>
    2bb4:	80 33       	cpi	r24, 0x30	; 48
    2bb6:	39 f4       	brne	.+14     	; 0x2bc6 <vfprintf+0xa8>
    2bb8:	21 60       	ori	r18, 0x01	; 1
    2bba:	26 c0       	rjmp	.+76     	; 0x2c08 <vfprintf+0xea>
    2bbc:	22 60       	ori	r18, 0x02	; 2
    2bbe:	24 60       	ori	r18, 0x04	; 4
    2bc0:	23 c0       	rjmp	.+70     	; 0x2c08 <vfprintf+0xea>
    2bc2:	28 60       	ori	r18, 0x08	; 8
    2bc4:	21 c0       	rjmp	.+66     	; 0x2c08 <vfprintf+0xea>
    2bc6:	27 fd       	sbrc	r18, 7
    2bc8:	27 c0       	rjmp	.+78     	; 0x2c18 <vfprintf+0xfa>
    2bca:	30 ed       	ldi	r19, 0xD0	; 208
    2bcc:	38 0f       	add	r19, r24
    2bce:	3a 30       	cpi	r19, 0x0A	; 10
    2bd0:	78 f4       	brcc	.+30     	; 0x2bf0 <vfprintf+0xd2>
    2bd2:	26 ff       	sbrs	r18, 6
    2bd4:	06 c0       	rjmp	.+12     	; 0x2be2 <vfprintf+0xc4>
    2bd6:	fa e0       	ldi	r31, 0x0A	; 10
    2bd8:	5f 9e       	mul	r5, r31
    2bda:	30 0d       	add	r19, r0
    2bdc:	11 24       	eor	r1, r1
    2bde:	53 2e       	mov	r5, r19
    2be0:	13 c0       	rjmp	.+38     	; 0x2c08 <vfprintf+0xea>
    2be2:	8a e0       	ldi	r24, 0x0A	; 10
    2be4:	38 9e       	mul	r3, r24
    2be6:	30 0d       	add	r19, r0
    2be8:	11 24       	eor	r1, r1
    2bea:	33 2e       	mov	r3, r19
    2bec:	20 62       	ori	r18, 0x20	; 32
    2bee:	0c c0       	rjmp	.+24     	; 0x2c08 <vfprintf+0xea>
    2bf0:	8e 32       	cpi	r24, 0x2E	; 46
    2bf2:	21 f4       	brne	.+8      	; 0x2bfc <vfprintf+0xde>
    2bf4:	26 fd       	sbrc	r18, 6
    2bf6:	5f c1       	rjmp	.+702    	; 0x2eb6 <vfprintf+0x398>
    2bf8:	20 64       	ori	r18, 0x40	; 64
    2bfa:	06 c0       	rjmp	.+12     	; 0x2c08 <vfprintf+0xea>
    2bfc:	8c 36       	cpi	r24, 0x6C	; 108
    2bfe:	11 f4       	brne	.+4      	; 0x2c04 <vfprintf+0xe6>
    2c00:	20 68       	ori	r18, 0x80	; 128
    2c02:	02 c0       	rjmp	.+4      	; 0x2c08 <vfprintf+0xea>
    2c04:	88 36       	cpi	r24, 0x68	; 104
    2c06:	41 f4       	brne	.+16     	; 0x2c18 <vfprintf+0xfa>
    2c08:	f6 01       	movw	r30, r12
    2c0a:	93 fd       	sbrc	r25, 3
    2c0c:	85 91       	lpm	r24, Z+
    2c0e:	93 ff       	sbrs	r25, 3
    2c10:	81 91       	ld	r24, Z+
    2c12:	6f 01       	movw	r12, r30
    2c14:	81 11       	cpse	r24, r1
    2c16:	c1 cf       	rjmp	.-126    	; 0x2b9a <vfprintf+0x7c>
    2c18:	98 2f       	mov	r25, r24
    2c1a:	9f 7d       	andi	r25, 0xDF	; 223
    2c1c:	95 54       	subi	r25, 0x45	; 69
    2c1e:	93 30       	cpi	r25, 0x03	; 3
    2c20:	28 f4       	brcc	.+10     	; 0x2c2c <vfprintf+0x10e>
    2c22:	0c 5f       	subi	r16, 0xFC	; 252
    2c24:	1f 4f       	sbci	r17, 0xFF	; 255
    2c26:	ff e3       	ldi	r31, 0x3F	; 63
    2c28:	f9 83       	std	Y+1, r31	; 0x01
    2c2a:	0d c0       	rjmp	.+26     	; 0x2c46 <vfprintf+0x128>
    2c2c:	83 36       	cpi	r24, 0x63	; 99
    2c2e:	31 f0       	breq	.+12     	; 0x2c3c <vfprintf+0x11e>
    2c30:	83 37       	cpi	r24, 0x73	; 115
    2c32:	71 f0       	breq	.+28     	; 0x2c50 <vfprintf+0x132>
    2c34:	83 35       	cpi	r24, 0x53	; 83
    2c36:	09 f0       	breq	.+2      	; 0x2c3a <vfprintf+0x11c>
    2c38:	57 c0       	rjmp	.+174    	; 0x2ce8 <vfprintf+0x1ca>
    2c3a:	21 c0       	rjmp	.+66     	; 0x2c7e <vfprintf+0x160>
    2c3c:	f8 01       	movw	r30, r16
    2c3e:	80 81       	ld	r24, Z
    2c40:	89 83       	std	Y+1, r24	; 0x01
    2c42:	0e 5f       	subi	r16, 0xFE	; 254
    2c44:	1f 4f       	sbci	r17, 0xFF	; 255
    2c46:	44 24       	eor	r4, r4
    2c48:	43 94       	inc	r4
    2c4a:	51 2c       	mov	r5, r1
    2c4c:	54 01       	movw	r10, r8
    2c4e:	14 c0       	rjmp	.+40     	; 0x2c78 <vfprintf+0x15a>
    2c50:	38 01       	movw	r6, r16
    2c52:	f2 e0       	ldi	r31, 0x02	; 2
    2c54:	6f 0e       	add	r6, r31
    2c56:	71 1c       	adc	r7, r1
    2c58:	f8 01       	movw	r30, r16
    2c5a:	a0 80       	ld	r10, Z
    2c5c:	b1 80       	ldd	r11, Z+1	; 0x01
    2c5e:	26 ff       	sbrs	r18, 6
    2c60:	03 c0       	rjmp	.+6      	; 0x2c68 <vfprintf+0x14a>
    2c62:	65 2d       	mov	r22, r5
    2c64:	70 e0       	ldi	r23, 0x00	; 0
    2c66:	02 c0       	rjmp	.+4      	; 0x2c6c <vfprintf+0x14e>
    2c68:	6f ef       	ldi	r22, 0xFF	; 255
    2c6a:	7f ef       	ldi	r23, 0xFF	; 255
    2c6c:	c5 01       	movw	r24, r10
    2c6e:	2c 87       	std	Y+12, r18	; 0x0c
    2c70:	49 d1       	rcall	.+658    	; 0x2f04 <strnlen>
    2c72:	2c 01       	movw	r4, r24
    2c74:	83 01       	movw	r16, r6
    2c76:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c78:	2f 77       	andi	r18, 0x7F	; 127
    2c7a:	22 2e       	mov	r2, r18
    2c7c:	16 c0       	rjmp	.+44     	; 0x2caa <vfprintf+0x18c>
    2c7e:	38 01       	movw	r6, r16
    2c80:	f2 e0       	ldi	r31, 0x02	; 2
    2c82:	6f 0e       	add	r6, r31
    2c84:	71 1c       	adc	r7, r1
    2c86:	f8 01       	movw	r30, r16
    2c88:	a0 80       	ld	r10, Z
    2c8a:	b1 80       	ldd	r11, Z+1	; 0x01
    2c8c:	26 ff       	sbrs	r18, 6
    2c8e:	03 c0       	rjmp	.+6      	; 0x2c96 <vfprintf+0x178>
    2c90:	65 2d       	mov	r22, r5
    2c92:	70 e0       	ldi	r23, 0x00	; 0
    2c94:	02 c0       	rjmp	.+4      	; 0x2c9a <vfprintf+0x17c>
    2c96:	6f ef       	ldi	r22, 0xFF	; 255
    2c98:	7f ef       	ldi	r23, 0xFF	; 255
    2c9a:	c5 01       	movw	r24, r10
    2c9c:	2c 87       	std	Y+12, r18	; 0x0c
    2c9e:	27 d1       	rcall	.+590    	; 0x2eee <strnlen_P>
    2ca0:	2c 01       	movw	r4, r24
    2ca2:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ca4:	20 68       	ori	r18, 0x80	; 128
    2ca6:	22 2e       	mov	r2, r18
    2ca8:	83 01       	movw	r16, r6
    2caa:	23 fc       	sbrc	r2, 3
    2cac:	19 c0       	rjmp	.+50     	; 0x2ce0 <vfprintf+0x1c2>
    2cae:	83 2d       	mov	r24, r3
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	48 16       	cp	r4, r24
    2cb4:	59 06       	cpc	r5, r25
    2cb6:	a0 f4       	brcc	.+40     	; 0x2ce0 <vfprintf+0x1c2>
    2cb8:	b7 01       	movw	r22, r14
    2cba:	80 e2       	ldi	r24, 0x20	; 32
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	2d d1       	rcall	.+602    	; 0x2f1a <fputc>
    2cc0:	3a 94       	dec	r3
    2cc2:	f5 cf       	rjmp	.-22     	; 0x2cae <vfprintf+0x190>
    2cc4:	f5 01       	movw	r30, r10
    2cc6:	27 fc       	sbrc	r2, 7
    2cc8:	85 91       	lpm	r24, Z+
    2cca:	27 fe       	sbrs	r2, 7
    2ccc:	81 91       	ld	r24, Z+
    2cce:	5f 01       	movw	r10, r30
    2cd0:	b7 01       	movw	r22, r14
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	22 d1       	rcall	.+580    	; 0x2f1a <fputc>
    2cd6:	31 10       	cpse	r3, r1
    2cd8:	3a 94       	dec	r3
    2cda:	f1 e0       	ldi	r31, 0x01	; 1
    2cdc:	4f 1a       	sub	r4, r31
    2cde:	51 08       	sbc	r5, r1
    2ce0:	41 14       	cp	r4, r1
    2ce2:	51 04       	cpc	r5, r1
    2ce4:	79 f7       	brne	.-34     	; 0x2cc4 <vfprintf+0x1a6>
    2ce6:	de c0       	rjmp	.+444    	; 0x2ea4 <vfprintf+0x386>
    2ce8:	84 36       	cpi	r24, 0x64	; 100
    2cea:	11 f0       	breq	.+4      	; 0x2cf0 <vfprintf+0x1d2>
    2cec:	89 36       	cpi	r24, 0x69	; 105
    2cee:	31 f5       	brne	.+76     	; 0x2d3c <vfprintf+0x21e>
    2cf0:	f8 01       	movw	r30, r16
    2cf2:	27 ff       	sbrs	r18, 7
    2cf4:	07 c0       	rjmp	.+14     	; 0x2d04 <vfprintf+0x1e6>
    2cf6:	60 81       	ld	r22, Z
    2cf8:	71 81       	ldd	r23, Z+1	; 0x01
    2cfa:	82 81       	ldd	r24, Z+2	; 0x02
    2cfc:	93 81       	ldd	r25, Z+3	; 0x03
    2cfe:	0c 5f       	subi	r16, 0xFC	; 252
    2d00:	1f 4f       	sbci	r17, 0xFF	; 255
    2d02:	08 c0       	rjmp	.+16     	; 0x2d14 <vfprintf+0x1f6>
    2d04:	60 81       	ld	r22, Z
    2d06:	71 81       	ldd	r23, Z+1	; 0x01
    2d08:	07 2e       	mov	r0, r23
    2d0a:	00 0c       	add	r0, r0
    2d0c:	88 0b       	sbc	r24, r24
    2d0e:	99 0b       	sbc	r25, r25
    2d10:	0e 5f       	subi	r16, 0xFE	; 254
    2d12:	1f 4f       	sbci	r17, 0xFF	; 255
    2d14:	2f 76       	andi	r18, 0x6F	; 111
    2d16:	72 2e       	mov	r7, r18
    2d18:	97 ff       	sbrs	r25, 7
    2d1a:	09 c0       	rjmp	.+18     	; 0x2d2e <vfprintf+0x210>
    2d1c:	90 95       	com	r25
    2d1e:	80 95       	com	r24
    2d20:	70 95       	com	r23
    2d22:	61 95       	neg	r22
    2d24:	7f 4f       	sbci	r23, 0xFF	; 255
    2d26:	8f 4f       	sbci	r24, 0xFF	; 255
    2d28:	9f 4f       	sbci	r25, 0xFF	; 255
    2d2a:	20 68       	ori	r18, 0x80	; 128
    2d2c:	72 2e       	mov	r7, r18
    2d2e:	2a e0       	ldi	r18, 0x0A	; 10
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	a4 01       	movw	r20, r8
    2d34:	2a d1       	rcall	.+596    	; 0x2f8a <__ultoa_invert>
    2d36:	a8 2e       	mov	r10, r24
    2d38:	a8 18       	sub	r10, r8
    2d3a:	43 c0       	rjmp	.+134    	; 0x2dc2 <vfprintf+0x2a4>
    2d3c:	85 37       	cpi	r24, 0x75	; 117
    2d3e:	29 f4       	brne	.+10     	; 0x2d4a <vfprintf+0x22c>
    2d40:	2f 7e       	andi	r18, 0xEF	; 239
    2d42:	b2 2e       	mov	r11, r18
    2d44:	2a e0       	ldi	r18, 0x0A	; 10
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	25 c0       	rjmp	.+74     	; 0x2d94 <vfprintf+0x276>
    2d4a:	f2 2f       	mov	r31, r18
    2d4c:	f9 7f       	andi	r31, 0xF9	; 249
    2d4e:	bf 2e       	mov	r11, r31
    2d50:	8f 36       	cpi	r24, 0x6F	; 111
    2d52:	c1 f0       	breq	.+48     	; 0x2d84 <vfprintf+0x266>
    2d54:	18 f4       	brcc	.+6      	; 0x2d5c <vfprintf+0x23e>
    2d56:	88 35       	cpi	r24, 0x58	; 88
    2d58:	79 f0       	breq	.+30     	; 0x2d78 <vfprintf+0x25a>
    2d5a:	ad c0       	rjmp	.+346    	; 0x2eb6 <vfprintf+0x398>
    2d5c:	80 37       	cpi	r24, 0x70	; 112
    2d5e:	19 f0       	breq	.+6      	; 0x2d66 <vfprintf+0x248>
    2d60:	88 37       	cpi	r24, 0x78	; 120
    2d62:	21 f0       	breq	.+8      	; 0x2d6c <vfprintf+0x24e>
    2d64:	a8 c0       	rjmp	.+336    	; 0x2eb6 <vfprintf+0x398>
    2d66:	2f 2f       	mov	r18, r31
    2d68:	20 61       	ori	r18, 0x10	; 16
    2d6a:	b2 2e       	mov	r11, r18
    2d6c:	b4 fe       	sbrs	r11, 4
    2d6e:	0d c0       	rjmp	.+26     	; 0x2d8a <vfprintf+0x26c>
    2d70:	8b 2d       	mov	r24, r11
    2d72:	84 60       	ori	r24, 0x04	; 4
    2d74:	b8 2e       	mov	r11, r24
    2d76:	09 c0       	rjmp	.+18     	; 0x2d8a <vfprintf+0x26c>
    2d78:	24 ff       	sbrs	r18, 4
    2d7a:	0a c0       	rjmp	.+20     	; 0x2d90 <vfprintf+0x272>
    2d7c:	9f 2f       	mov	r25, r31
    2d7e:	96 60       	ori	r25, 0x06	; 6
    2d80:	b9 2e       	mov	r11, r25
    2d82:	06 c0       	rjmp	.+12     	; 0x2d90 <vfprintf+0x272>
    2d84:	28 e0       	ldi	r18, 0x08	; 8
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	05 c0       	rjmp	.+10     	; 0x2d94 <vfprintf+0x276>
    2d8a:	20 e1       	ldi	r18, 0x10	; 16
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	02 c0       	rjmp	.+4      	; 0x2d94 <vfprintf+0x276>
    2d90:	20 e1       	ldi	r18, 0x10	; 16
    2d92:	32 e0       	ldi	r19, 0x02	; 2
    2d94:	f8 01       	movw	r30, r16
    2d96:	b7 fe       	sbrs	r11, 7
    2d98:	07 c0       	rjmp	.+14     	; 0x2da8 <vfprintf+0x28a>
    2d9a:	60 81       	ld	r22, Z
    2d9c:	71 81       	ldd	r23, Z+1	; 0x01
    2d9e:	82 81       	ldd	r24, Z+2	; 0x02
    2da0:	93 81       	ldd	r25, Z+3	; 0x03
    2da2:	0c 5f       	subi	r16, 0xFC	; 252
    2da4:	1f 4f       	sbci	r17, 0xFF	; 255
    2da6:	06 c0       	rjmp	.+12     	; 0x2db4 <vfprintf+0x296>
    2da8:	60 81       	ld	r22, Z
    2daa:	71 81       	ldd	r23, Z+1	; 0x01
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	0e 5f       	subi	r16, 0xFE	; 254
    2db2:	1f 4f       	sbci	r17, 0xFF	; 255
    2db4:	a4 01       	movw	r20, r8
    2db6:	e9 d0       	rcall	.+466    	; 0x2f8a <__ultoa_invert>
    2db8:	a8 2e       	mov	r10, r24
    2dba:	a8 18       	sub	r10, r8
    2dbc:	fb 2d       	mov	r31, r11
    2dbe:	ff 77       	andi	r31, 0x7F	; 127
    2dc0:	7f 2e       	mov	r7, r31
    2dc2:	76 fe       	sbrs	r7, 6
    2dc4:	0b c0       	rjmp	.+22     	; 0x2ddc <vfprintf+0x2be>
    2dc6:	37 2d       	mov	r19, r7
    2dc8:	3e 7f       	andi	r19, 0xFE	; 254
    2dca:	a5 14       	cp	r10, r5
    2dcc:	50 f4       	brcc	.+20     	; 0x2de2 <vfprintf+0x2c4>
    2dce:	74 fe       	sbrs	r7, 4
    2dd0:	0a c0       	rjmp	.+20     	; 0x2de6 <vfprintf+0x2c8>
    2dd2:	72 fc       	sbrc	r7, 2
    2dd4:	08 c0       	rjmp	.+16     	; 0x2de6 <vfprintf+0x2c8>
    2dd6:	37 2d       	mov	r19, r7
    2dd8:	3e 7e       	andi	r19, 0xEE	; 238
    2dda:	05 c0       	rjmp	.+10     	; 0x2de6 <vfprintf+0x2c8>
    2ddc:	ba 2c       	mov	r11, r10
    2dde:	37 2d       	mov	r19, r7
    2de0:	03 c0       	rjmp	.+6      	; 0x2de8 <vfprintf+0x2ca>
    2de2:	ba 2c       	mov	r11, r10
    2de4:	01 c0       	rjmp	.+2      	; 0x2de8 <vfprintf+0x2ca>
    2de6:	b5 2c       	mov	r11, r5
    2de8:	34 ff       	sbrs	r19, 4
    2dea:	0d c0       	rjmp	.+26     	; 0x2e06 <vfprintf+0x2e8>
    2dec:	fe 01       	movw	r30, r28
    2dee:	ea 0d       	add	r30, r10
    2df0:	f1 1d       	adc	r31, r1
    2df2:	80 81       	ld	r24, Z
    2df4:	80 33       	cpi	r24, 0x30	; 48
    2df6:	11 f4       	brne	.+4      	; 0x2dfc <vfprintf+0x2de>
    2df8:	39 7e       	andi	r19, 0xE9	; 233
    2dfa:	09 c0       	rjmp	.+18     	; 0x2e0e <vfprintf+0x2f0>
    2dfc:	32 ff       	sbrs	r19, 2
    2dfe:	06 c0       	rjmp	.+12     	; 0x2e0c <vfprintf+0x2ee>
    2e00:	b3 94       	inc	r11
    2e02:	b3 94       	inc	r11
    2e04:	04 c0       	rjmp	.+8      	; 0x2e0e <vfprintf+0x2f0>
    2e06:	83 2f       	mov	r24, r19
    2e08:	86 78       	andi	r24, 0x86	; 134
    2e0a:	09 f0       	breq	.+2      	; 0x2e0e <vfprintf+0x2f0>
    2e0c:	b3 94       	inc	r11
    2e0e:	33 fd       	sbrc	r19, 3
    2e10:	12 c0       	rjmp	.+36     	; 0x2e36 <vfprintf+0x318>
    2e12:	30 ff       	sbrs	r19, 0
    2e14:	06 c0       	rjmp	.+12     	; 0x2e22 <vfprintf+0x304>
    2e16:	5a 2c       	mov	r5, r10
    2e18:	b3 14       	cp	r11, r3
    2e1a:	18 f4       	brcc	.+6      	; 0x2e22 <vfprintf+0x304>
    2e1c:	53 0c       	add	r5, r3
    2e1e:	5b 18       	sub	r5, r11
    2e20:	b3 2c       	mov	r11, r3
    2e22:	b3 14       	cp	r11, r3
    2e24:	60 f4       	brcc	.+24     	; 0x2e3e <vfprintf+0x320>
    2e26:	b7 01       	movw	r22, r14
    2e28:	80 e2       	ldi	r24, 0x20	; 32
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	3c 87       	std	Y+12, r19	; 0x0c
    2e2e:	75 d0       	rcall	.+234    	; 0x2f1a <fputc>
    2e30:	b3 94       	inc	r11
    2e32:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e34:	f6 cf       	rjmp	.-20     	; 0x2e22 <vfprintf+0x304>
    2e36:	b3 14       	cp	r11, r3
    2e38:	10 f4       	brcc	.+4      	; 0x2e3e <vfprintf+0x320>
    2e3a:	3b 18       	sub	r3, r11
    2e3c:	01 c0       	rjmp	.+2      	; 0x2e40 <vfprintf+0x322>
    2e3e:	31 2c       	mov	r3, r1
    2e40:	34 ff       	sbrs	r19, 4
    2e42:	11 c0       	rjmp	.+34     	; 0x2e66 <vfprintf+0x348>
    2e44:	b7 01       	movw	r22, r14
    2e46:	80 e3       	ldi	r24, 0x30	; 48
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	3c 87       	std	Y+12, r19	; 0x0c
    2e4c:	66 d0       	rcall	.+204    	; 0x2f1a <fputc>
    2e4e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e50:	32 ff       	sbrs	r19, 2
    2e52:	16 c0       	rjmp	.+44     	; 0x2e80 <vfprintf+0x362>
    2e54:	31 fd       	sbrc	r19, 1
    2e56:	03 c0       	rjmp	.+6      	; 0x2e5e <vfprintf+0x340>
    2e58:	88 e7       	ldi	r24, 0x78	; 120
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	02 c0       	rjmp	.+4      	; 0x2e62 <vfprintf+0x344>
    2e5e:	88 e5       	ldi	r24, 0x58	; 88
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	b7 01       	movw	r22, r14
    2e64:	0c c0       	rjmp	.+24     	; 0x2e7e <vfprintf+0x360>
    2e66:	83 2f       	mov	r24, r19
    2e68:	86 78       	andi	r24, 0x86	; 134
    2e6a:	51 f0       	breq	.+20     	; 0x2e80 <vfprintf+0x362>
    2e6c:	31 ff       	sbrs	r19, 1
    2e6e:	02 c0       	rjmp	.+4      	; 0x2e74 <vfprintf+0x356>
    2e70:	8b e2       	ldi	r24, 0x2B	; 43
    2e72:	01 c0       	rjmp	.+2      	; 0x2e76 <vfprintf+0x358>
    2e74:	80 e2       	ldi	r24, 0x20	; 32
    2e76:	37 fd       	sbrc	r19, 7
    2e78:	8d e2       	ldi	r24, 0x2D	; 45
    2e7a:	b7 01       	movw	r22, r14
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	4d d0       	rcall	.+154    	; 0x2f1a <fputc>
    2e80:	a5 14       	cp	r10, r5
    2e82:	30 f4       	brcc	.+12     	; 0x2e90 <vfprintf+0x372>
    2e84:	b7 01       	movw	r22, r14
    2e86:	80 e3       	ldi	r24, 0x30	; 48
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	47 d0       	rcall	.+142    	; 0x2f1a <fputc>
    2e8c:	5a 94       	dec	r5
    2e8e:	f8 cf       	rjmp	.-16     	; 0x2e80 <vfprintf+0x362>
    2e90:	aa 94       	dec	r10
    2e92:	f4 01       	movw	r30, r8
    2e94:	ea 0d       	add	r30, r10
    2e96:	f1 1d       	adc	r31, r1
    2e98:	80 81       	ld	r24, Z
    2e9a:	b7 01       	movw	r22, r14
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	3d d0       	rcall	.+122    	; 0x2f1a <fputc>
    2ea0:	a1 10       	cpse	r10, r1
    2ea2:	f6 cf       	rjmp	.-20     	; 0x2e90 <vfprintf+0x372>
    2ea4:	33 20       	and	r3, r3
    2ea6:	09 f4       	brne	.+2      	; 0x2eaa <vfprintf+0x38c>
    2ea8:	5d ce       	rjmp	.-838    	; 0x2b64 <vfprintf+0x46>
    2eaa:	b7 01       	movw	r22, r14
    2eac:	80 e2       	ldi	r24, 0x20	; 32
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	34 d0       	rcall	.+104    	; 0x2f1a <fputc>
    2eb2:	3a 94       	dec	r3
    2eb4:	f7 cf       	rjmp	.-18     	; 0x2ea4 <vfprintf+0x386>
    2eb6:	f7 01       	movw	r30, r14
    2eb8:	86 81       	ldd	r24, Z+6	; 0x06
    2eba:	97 81       	ldd	r25, Z+7	; 0x07
    2ebc:	02 c0       	rjmp	.+4      	; 0x2ec2 <vfprintf+0x3a4>
    2ebe:	8f ef       	ldi	r24, 0xFF	; 255
    2ec0:	9f ef       	ldi	r25, 0xFF	; 255
    2ec2:	2c 96       	adiw	r28, 0x0c	; 12
    2ec4:	cd bf       	out	0x3d, r28	; 61
    2ec6:	de bf       	out	0x3e, r29	; 62
    2ec8:	df 91       	pop	r29
    2eca:	cf 91       	pop	r28
    2ecc:	1f 91       	pop	r17
    2ece:	0f 91       	pop	r16
    2ed0:	ff 90       	pop	r15
    2ed2:	ef 90       	pop	r14
    2ed4:	df 90       	pop	r13
    2ed6:	cf 90       	pop	r12
    2ed8:	bf 90       	pop	r11
    2eda:	af 90       	pop	r10
    2edc:	9f 90       	pop	r9
    2ede:	8f 90       	pop	r8
    2ee0:	7f 90       	pop	r7
    2ee2:	6f 90       	pop	r6
    2ee4:	5f 90       	pop	r5
    2ee6:	4f 90       	pop	r4
    2ee8:	3f 90       	pop	r3
    2eea:	2f 90       	pop	r2
    2eec:	08 95       	ret

00002eee <strnlen_P>:
    2eee:	fc 01       	movw	r30, r24
    2ef0:	05 90       	lpm	r0, Z+
    2ef2:	61 50       	subi	r22, 0x01	; 1
    2ef4:	70 40       	sbci	r23, 0x00	; 0
    2ef6:	01 10       	cpse	r0, r1
    2ef8:	d8 f7       	brcc	.-10     	; 0x2ef0 <strnlen_P+0x2>
    2efa:	80 95       	com	r24
    2efc:	90 95       	com	r25
    2efe:	8e 0f       	add	r24, r30
    2f00:	9f 1f       	adc	r25, r31
    2f02:	08 95       	ret

00002f04 <strnlen>:
    2f04:	fc 01       	movw	r30, r24
    2f06:	61 50       	subi	r22, 0x01	; 1
    2f08:	70 40       	sbci	r23, 0x00	; 0
    2f0a:	01 90       	ld	r0, Z+
    2f0c:	01 10       	cpse	r0, r1
    2f0e:	d8 f7       	brcc	.-10     	; 0x2f06 <strnlen+0x2>
    2f10:	80 95       	com	r24
    2f12:	90 95       	com	r25
    2f14:	8e 0f       	add	r24, r30
    2f16:	9f 1f       	adc	r25, r31
    2f18:	08 95       	ret

00002f1a <fputc>:
    2f1a:	0f 93       	push	r16
    2f1c:	1f 93       	push	r17
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	fb 01       	movw	r30, r22
    2f24:	23 81       	ldd	r18, Z+3	; 0x03
    2f26:	21 fd       	sbrc	r18, 1
    2f28:	03 c0       	rjmp	.+6      	; 0x2f30 <fputc+0x16>
    2f2a:	8f ef       	ldi	r24, 0xFF	; 255
    2f2c:	9f ef       	ldi	r25, 0xFF	; 255
    2f2e:	28 c0       	rjmp	.+80     	; 0x2f80 <fputc+0x66>
    2f30:	22 ff       	sbrs	r18, 2
    2f32:	16 c0       	rjmp	.+44     	; 0x2f60 <fputc+0x46>
    2f34:	46 81       	ldd	r20, Z+6	; 0x06
    2f36:	57 81       	ldd	r21, Z+7	; 0x07
    2f38:	24 81       	ldd	r18, Z+4	; 0x04
    2f3a:	35 81       	ldd	r19, Z+5	; 0x05
    2f3c:	42 17       	cp	r20, r18
    2f3e:	53 07       	cpc	r21, r19
    2f40:	44 f4       	brge	.+16     	; 0x2f52 <fputc+0x38>
    2f42:	a0 81       	ld	r26, Z
    2f44:	b1 81       	ldd	r27, Z+1	; 0x01
    2f46:	9d 01       	movw	r18, r26
    2f48:	2f 5f       	subi	r18, 0xFF	; 255
    2f4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f4c:	20 83       	st	Z, r18
    2f4e:	31 83       	std	Z+1, r19	; 0x01
    2f50:	8c 93       	st	X, r24
    2f52:	26 81       	ldd	r18, Z+6	; 0x06
    2f54:	37 81       	ldd	r19, Z+7	; 0x07
    2f56:	2f 5f       	subi	r18, 0xFF	; 255
    2f58:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5a:	26 83       	std	Z+6, r18	; 0x06
    2f5c:	37 83       	std	Z+7, r19	; 0x07
    2f5e:	10 c0       	rjmp	.+32     	; 0x2f80 <fputc+0x66>
    2f60:	eb 01       	movw	r28, r22
    2f62:	09 2f       	mov	r16, r25
    2f64:	18 2f       	mov	r17, r24
    2f66:	00 84       	ldd	r0, Z+8	; 0x08
    2f68:	f1 85       	ldd	r31, Z+9	; 0x09
    2f6a:	e0 2d       	mov	r30, r0
    2f6c:	19 95       	eicall
    2f6e:	89 2b       	or	r24, r25
    2f70:	e1 f6       	brne	.-72     	; 0x2f2a <fputc+0x10>
    2f72:	8e 81       	ldd	r24, Y+6	; 0x06
    2f74:	9f 81       	ldd	r25, Y+7	; 0x07
    2f76:	01 96       	adiw	r24, 0x01	; 1
    2f78:	8e 83       	std	Y+6, r24	; 0x06
    2f7a:	9f 83       	std	Y+7, r25	; 0x07
    2f7c:	81 2f       	mov	r24, r17
    2f7e:	90 2f       	mov	r25, r16
    2f80:	df 91       	pop	r29
    2f82:	cf 91       	pop	r28
    2f84:	1f 91       	pop	r17
    2f86:	0f 91       	pop	r16
    2f88:	08 95       	ret

00002f8a <__ultoa_invert>:
    2f8a:	fa 01       	movw	r30, r20
    2f8c:	aa 27       	eor	r26, r26
    2f8e:	28 30       	cpi	r18, 0x08	; 8
    2f90:	51 f1       	breq	.+84     	; 0x2fe6 <__ultoa_invert+0x5c>
    2f92:	20 31       	cpi	r18, 0x10	; 16
    2f94:	81 f1       	breq	.+96     	; 0x2ff6 <__ultoa_invert+0x6c>
    2f96:	e8 94       	clt
    2f98:	6f 93       	push	r22
    2f9a:	6e 7f       	andi	r22, 0xFE	; 254
    2f9c:	6e 5f       	subi	r22, 0xFE	; 254
    2f9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2fa0:	8f 4f       	sbci	r24, 0xFF	; 255
    2fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa4:	af 4f       	sbci	r26, 0xFF	; 255
    2fa6:	b1 e0       	ldi	r27, 0x01	; 1
    2fa8:	3e d0       	rcall	.+124    	; 0x3026 <__ultoa_invert+0x9c>
    2faa:	b4 e0       	ldi	r27, 0x04	; 4
    2fac:	3c d0       	rcall	.+120    	; 0x3026 <__ultoa_invert+0x9c>
    2fae:	67 0f       	add	r22, r23
    2fb0:	78 1f       	adc	r23, r24
    2fb2:	89 1f       	adc	r24, r25
    2fb4:	9a 1f       	adc	r25, r26
    2fb6:	a1 1d       	adc	r26, r1
    2fb8:	68 0f       	add	r22, r24
    2fba:	79 1f       	adc	r23, r25
    2fbc:	8a 1f       	adc	r24, r26
    2fbe:	91 1d       	adc	r25, r1
    2fc0:	a1 1d       	adc	r26, r1
    2fc2:	6a 0f       	add	r22, r26
    2fc4:	71 1d       	adc	r23, r1
    2fc6:	81 1d       	adc	r24, r1
    2fc8:	91 1d       	adc	r25, r1
    2fca:	a1 1d       	adc	r26, r1
    2fcc:	20 d0       	rcall	.+64     	; 0x300e <__ultoa_invert+0x84>
    2fce:	09 f4       	brne	.+2      	; 0x2fd2 <__ultoa_invert+0x48>
    2fd0:	68 94       	set
    2fd2:	3f 91       	pop	r19
    2fd4:	2a e0       	ldi	r18, 0x0A	; 10
    2fd6:	26 9f       	mul	r18, r22
    2fd8:	11 24       	eor	r1, r1
    2fda:	30 19       	sub	r19, r0
    2fdc:	30 5d       	subi	r19, 0xD0	; 208
    2fde:	31 93       	st	Z+, r19
    2fe0:	de f6       	brtc	.-74     	; 0x2f98 <__ultoa_invert+0xe>
    2fe2:	cf 01       	movw	r24, r30
    2fe4:	08 95       	ret
    2fe6:	46 2f       	mov	r20, r22
    2fe8:	47 70       	andi	r20, 0x07	; 7
    2fea:	40 5d       	subi	r20, 0xD0	; 208
    2fec:	41 93       	st	Z+, r20
    2fee:	b3 e0       	ldi	r27, 0x03	; 3
    2ff0:	0f d0       	rcall	.+30     	; 0x3010 <__ultoa_invert+0x86>
    2ff2:	c9 f7       	brne	.-14     	; 0x2fe6 <__ultoa_invert+0x5c>
    2ff4:	f6 cf       	rjmp	.-20     	; 0x2fe2 <__ultoa_invert+0x58>
    2ff6:	46 2f       	mov	r20, r22
    2ff8:	4f 70       	andi	r20, 0x0F	; 15
    2ffa:	40 5d       	subi	r20, 0xD0	; 208
    2ffc:	4a 33       	cpi	r20, 0x3A	; 58
    2ffe:	18 f0       	brcs	.+6      	; 0x3006 <__ultoa_invert+0x7c>
    3000:	49 5d       	subi	r20, 0xD9	; 217
    3002:	31 fd       	sbrc	r19, 1
    3004:	40 52       	subi	r20, 0x20	; 32
    3006:	41 93       	st	Z+, r20
    3008:	02 d0       	rcall	.+4      	; 0x300e <__ultoa_invert+0x84>
    300a:	a9 f7       	brne	.-22     	; 0x2ff6 <__ultoa_invert+0x6c>
    300c:	ea cf       	rjmp	.-44     	; 0x2fe2 <__ultoa_invert+0x58>
    300e:	b4 e0       	ldi	r27, 0x04	; 4
    3010:	a6 95       	lsr	r26
    3012:	97 95       	ror	r25
    3014:	87 95       	ror	r24
    3016:	77 95       	ror	r23
    3018:	67 95       	ror	r22
    301a:	ba 95       	dec	r27
    301c:	c9 f7       	brne	.-14     	; 0x3010 <__ultoa_invert+0x86>
    301e:	00 97       	sbiw	r24, 0x00	; 0
    3020:	61 05       	cpc	r22, r1
    3022:	71 05       	cpc	r23, r1
    3024:	08 95       	ret
    3026:	9b 01       	movw	r18, r22
    3028:	ac 01       	movw	r20, r24
    302a:	0a 2e       	mov	r0, r26
    302c:	06 94       	lsr	r0
    302e:	57 95       	ror	r21
    3030:	47 95       	ror	r20
    3032:	37 95       	ror	r19
    3034:	27 95       	ror	r18
    3036:	ba 95       	dec	r27
    3038:	c9 f7       	brne	.-14     	; 0x302c <__ultoa_invert+0xa2>
    303a:	62 0f       	add	r22, r18
    303c:	73 1f       	adc	r23, r19
    303e:	84 1f       	adc	r24, r20
    3040:	95 1f       	adc	r25, r21
    3042:	a0 1d       	adc	r26, r0
    3044:	08 95       	ret

00003046 <_exit>:
    3046:	f8 94       	cli

00003048 <__stop_program>:
    3048:	ff cf       	rjmp	.-2      	; 0x3048 <__stop_program>
