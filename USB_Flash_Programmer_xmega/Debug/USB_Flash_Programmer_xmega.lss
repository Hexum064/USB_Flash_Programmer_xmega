
USB_Flash_Programmer_xmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00802000  000033c2  00003456  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000038c  00802126  00802126  0000357e  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000357c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000035d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c8  00000000  00000000  00003618  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009ef8  00000000  00000000  00003ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c29  00000000  00000000  0000d9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000054a5  00000000  00000000  00011601  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e5c  00000000  00000000  00016aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003316c  00000000  00000000  00017904  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003bd7  00000000  00000000  0004aa70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a0  00000000  00000000  0004e648  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000a967  00000000  00000000  0004eae8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	27 c1       	rjmp	.+590    	; 0x254 <__bad_interrupt>
       6:	00 00       	nop
       8:	25 c1       	rjmp	.+586    	; 0x254 <__bad_interrupt>
       a:	00 00       	nop
       c:	23 c1       	rjmp	.+582    	; 0x254 <__bad_interrupt>
       e:	00 00       	nop
      10:	21 c1       	rjmp	.+578    	; 0x254 <__bad_interrupt>
      12:	00 00       	nop
      14:	1f c1       	rjmp	.+574    	; 0x254 <__bad_interrupt>
      16:	00 00       	nop
      18:	1d c1       	rjmp	.+570    	; 0x254 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1b c1       	rjmp	.+566    	; 0x254 <__bad_interrupt>
      1e:	00 00       	nop
      20:	19 c1       	rjmp	.+562    	; 0x254 <__bad_interrupt>
      22:	00 00       	nop
      24:	17 c1       	rjmp	.+558    	; 0x254 <__bad_interrupt>
      26:	00 00       	nop
      28:	15 c1       	rjmp	.+554    	; 0x254 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	13 c1       	rjmp	.+550    	; 0x254 <__bad_interrupt>
      2e:	00 00       	nop
      30:	11 c1       	rjmp	.+546    	; 0x254 <__bad_interrupt>
      32:	00 00       	nop
      34:	0f c1       	rjmp	.+542    	; 0x254 <__bad_interrupt>
      36:	00 00       	nop
      38:	0d c1       	rjmp	.+538    	; 0x254 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0b c1       	rjmp	.+534    	; 0x254 <__bad_interrupt>
      3e:	00 00       	nop
      40:	09 c1       	rjmp	.+530    	; 0x254 <__bad_interrupt>
      42:	00 00       	nop
      44:	07 c1       	rjmp	.+526    	; 0x254 <__bad_interrupt>
      46:	00 00       	nop
      48:	05 c1       	rjmp	.+522    	; 0x254 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	03 c1       	rjmp	.+518    	; 0x254 <__bad_interrupt>
      4e:	00 00       	nop
      50:	01 c1       	rjmp	.+514    	; 0x254 <__bad_interrupt>
      52:	00 00       	nop
      54:	ff c0       	rjmp	.+510    	; 0x254 <__bad_interrupt>
      56:	00 00       	nop
      58:	fd c0       	rjmp	.+506    	; 0x254 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	fb c0       	rjmp	.+502    	; 0x254 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f9 c0       	rjmp	.+498    	; 0x254 <__bad_interrupt>
      62:	00 00       	nop
      64:	f7 c0       	rjmp	.+494    	; 0x254 <__bad_interrupt>
      66:	00 00       	nop
      68:	f5 c0       	rjmp	.+490    	; 0x254 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f3 c0       	rjmp	.+486    	; 0x254 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f1 c0       	rjmp	.+482    	; 0x254 <__bad_interrupt>
      72:	00 00       	nop
      74:	ef c0       	rjmp	.+478    	; 0x254 <__bad_interrupt>
      76:	00 00       	nop
      78:	ed c0       	rjmp	.+474    	; 0x254 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	eb c0       	rjmp	.+470    	; 0x254 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e9 c0       	rjmp	.+466    	; 0x254 <__bad_interrupt>
      82:	00 00       	nop
      84:	e7 c0       	rjmp	.+462    	; 0x254 <__bad_interrupt>
      86:	00 00       	nop
      88:	e5 c0       	rjmp	.+458    	; 0x254 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e3 c0       	rjmp	.+454    	; 0x254 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e1 c0       	rjmp	.+450    	; 0x254 <__bad_interrupt>
      92:	00 00       	nop
      94:	df c0       	rjmp	.+446    	; 0x254 <__bad_interrupt>
      96:	00 00       	nop
      98:	dd c0       	rjmp	.+442    	; 0x254 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	db c0       	rjmp	.+438    	; 0x254 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d9 c0       	rjmp	.+434    	; 0x254 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d7 c0       	rjmp	.+430    	; 0x254 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d5 c0       	rjmp	.+426    	; 0x254 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d3 c0       	rjmp	.+422    	; 0x254 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d1 c0       	rjmp	.+418    	; 0x254 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cf c0       	rjmp	.+414    	; 0x254 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	cd c0       	rjmp	.+410    	; 0x254 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	cb c0       	rjmp	.+406    	; 0x254 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c9 c0       	rjmp	.+402    	; 0x254 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c7 c0       	rjmp	.+398    	; 0x254 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c5 c0       	rjmp	.+394    	; 0x254 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c3 c0       	rjmp	.+390    	; 0x254 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c1 c0       	rjmp	.+386    	; 0x254 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	bf c0       	rjmp	.+382    	; 0x254 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	bd c0       	rjmp	.+378    	; 0x254 <__bad_interrupt>
      da:	00 00       	nop
      dc:	bb c0       	rjmp	.+374    	; 0x254 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b9 c0       	rjmp	.+370    	; 0x254 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b7 c0       	rjmp	.+366    	; 0x254 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b5 c0       	rjmp	.+362    	; 0x254 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b3 c0       	rjmp	.+358    	; 0x254 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b1 c0       	rjmp	.+354    	; 0x254 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	af c0       	rjmp	.+350    	; 0x254 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ad c0       	rjmp	.+346    	; 0x254 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ab c0       	rjmp	.+342    	; 0x254 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a9 c0       	rjmp	.+338    	; 0x254 <__bad_interrupt>
     102:	00 00       	nop
     104:	a7 c0       	rjmp	.+334    	; 0x254 <__bad_interrupt>
     106:	00 00       	nop
     108:	a5 c0       	rjmp	.+330    	; 0x254 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a3 c0       	rjmp	.+326    	; 0x254 <__bad_interrupt>
     10e:	00 00       	nop
     110:	a1 c0       	rjmp	.+322    	; 0x254 <__bad_interrupt>
     112:	00 00       	nop
     114:	9f c0       	rjmp	.+318    	; 0x254 <__bad_interrupt>
     116:	00 00       	nop
     118:	9d c0       	rjmp	.+314    	; 0x254 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	9b c0       	rjmp	.+310    	; 0x254 <__bad_interrupt>
     11e:	00 00       	nop
     120:	99 c0       	rjmp	.+306    	; 0x254 <__bad_interrupt>
     122:	00 00       	nop
     124:	97 c0       	rjmp	.+302    	; 0x254 <__bad_interrupt>
     126:	00 00       	nop
     128:	95 c0       	rjmp	.+298    	; 0x254 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	93 c0       	rjmp	.+294    	; 0x254 <__bad_interrupt>
     12e:	00 00       	nop
     130:	91 c0       	rjmp	.+290    	; 0x254 <__bad_interrupt>
     132:	00 00       	nop
     134:	8f c0       	rjmp	.+286    	; 0x254 <__bad_interrupt>
     136:	00 00       	nop
     138:	8d c0       	rjmp	.+282    	; 0x254 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	8b c0       	rjmp	.+278    	; 0x254 <__bad_interrupt>
     13e:	00 00       	nop
     140:	89 c0       	rjmp	.+274    	; 0x254 <__bad_interrupt>
     142:	00 00       	nop
     144:	87 c0       	rjmp	.+270    	; 0x254 <__bad_interrupt>
     146:	00 00       	nop
     148:	85 c0       	rjmp	.+266    	; 0x254 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	83 c0       	rjmp	.+262    	; 0x254 <__bad_interrupt>
     14e:	00 00       	nop
     150:	81 c0       	rjmp	.+258    	; 0x254 <__bad_interrupt>
     152:	00 00       	nop
     154:	7f c0       	rjmp	.+254    	; 0x254 <__bad_interrupt>
     156:	00 00       	nop
     158:	7d c0       	rjmp	.+250    	; 0x254 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	7b c0       	rjmp	.+246    	; 0x254 <__bad_interrupt>
     15e:	00 00       	nop
     160:	79 c0       	rjmp	.+242    	; 0x254 <__bad_interrupt>
     162:	00 00       	nop
     164:	77 c0       	rjmp	.+238    	; 0x254 <__bad_interrupt>
     166:	00 00       	nop
     168:	75 c0       	rjmp	.+234    	; 0x254 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	73 c0       	rjmp	.+230    	; 0x254 <__bad_interrupt>
     16e:	00 00       	nop
     170:	71 c0       	rjmp	.+226    	; 0x254 <__bad_interrupt>
     172:	00 00       	nop
     174:	6f c0       	rjmp	.+222    	; 0x254 <__bad_interrupt>
     176:	00 00       	nop
     178:	6d c0       	rjmp	.+218    	; 0x254 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6b c0       	rjmp	.+214    	; 0x254 <__bad_interrupt>
     17e:	00 00       	nop
     180:	69 c0       	rjmp	.+210    	; 0x254 <__bad_interrupt>
     182:	00 00       	nop
     184:	67 c0       	rjmp	.+206    	; 0x254 <__bad_interrupt>
     186:	00 00       	nop
     188:	65 c0       	rjmp	.+202    	; 0x254 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	63 c0       	rjmp	.+198    	; 0x254 <__bad_interrupt>
     18e:	00 00       	nop
     190:	61 c0       	rjmp	.+194    	; 0x254 <__bad_interrupt>
     192:	00 00       	nop
     194:	5f c0       	rjmp	.+190    	; 0x254 <__bad_interrupt>
     196:	00 00       	nop
     198:	5d c0       	rjmp	.+186    	; 0x254 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5b c0       	rjmp	.+182    	; 0x254 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	59 c0       	rjmp	.+178    	; 0x254 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	57 c0       	rjmp	.+174    	; 0x254 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	55 c0       	rjmp	.+170    	; 0x254 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	53 c0       	rjmp	.+166    	; 0x254 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	51 c0       	rjmp	.+162    	; 0x254 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	4f c0       	rjmp	.+158    	; 0x254 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	4d c0       	rjmp	.+154    	; 0x254 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	4b c0       	rjmp	.+150    	; 0x254 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	49 c0       	rjmp	.+146    	; 0x254 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	47 c0       	rjmp	.+142    	; 0x254 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	45 c0       	rjmp	.+138    	; 0x254 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	43 c0       	rjmp	.+134    	; 0x254 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	41 c0       	rjmp	.+130    	; 0x254 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	3f c0       	rjmp	.+126    	; 0x254 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	3d c0       	rjmp	.+122    	; 0x254 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3b c0       	rjmp	.+118    	; 0x254 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	39 c0       	rjmp	.+114    	; 0x254 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	37 c0       	rjmp	.+110    	; 0x254 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	35 c0       	rjmp	.+106    	; 0x254 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	33 c0       	rjmp	.+102    	; 0x254 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	31 c0       	rjmp	.+98     	; 0x254 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__vector_125>
     1f8:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__vector_126>
     1fc:	5e 0f       	add	r21, r30
     1fe:	61 0f       	add	r22, r17
     200:	64 0f       	add	r22, r20
     202:	67 0f       	add	r22, r23
     204:	6a 0f       	add	r22, r26
     206:	6d 0f       	add	r22, r29
     208:	70 0f       	add	r23, r16

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e3       	ldi	r29, 0x3F	; 63
     214:	de bf       	out	0x3e, r29	; 62
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0c bf       	out	0x3c, r16	; 60
     21a:	18 be       	out	0x38, r1	; 56
     21c:	19 be       	out	0x39, r1	; 57
     21e:	1a be       	out	0x3a, r1	; 58
     220:	1b be       	out	0x3b, r1	; 59

00000222 <__do_copy_data>:
     222:	11 e2       	ldi	r17, 0x21	; 33
     224:	a0 e0       	ldi	r26, 0x00	; 0
     226:	b0 e2       	ldi	r27, 0x20	; 32
     228:	e2 ec       	ldi	r30, 0xC2	; 194
     22a:	f3 e3       	ldi	r31, 0x33	; 51
     22c:	00 e0       	ldi	r16, 0x00	; 0
     22e:	0b bf       	out	0x3b, r16	; 59
     230:	02 c0       	rjmp	.+4      	; 0x236 <__do_copy_data+0x14>
     232:	07 90       	elpm	r0, Z+
     234:	0d 92       	st	X+, r0
     236:	a6 32       	cpi	r26, 0x26	; 38
     238:	b1 07       	cpc	r27, r17
     23a:	d9 f7       	brne	.-10     	; 0x232 <__do_copy_data+0x10>
     23c:	1b be       	out	0x3b, r1	; 59

0000023e <__do_clear_bss>:
     23e:	24 e2       	ldi	r18, 0x24	; 36
     240:	a6 e2       	ldi	r26, 0x26	; 38
     242:	b1 e2       	ldi	r27, 0x21	; 33
     244:	01 c0       	rjmp	.+2      	; 0x248 <.do_clear_bss_start>

00000246 <.do_clear_bss_loop>:
     246:	1d 92       	st	X+, r1

00000248 <.do_clear_bss_start>:
     248:	a2 3b       	cpi	r26, 0xB2	; 178
     24a:	b2 07       	cpc	r27, r18
     24c:	e1 f7       	brne	.-8      	; 0x246 <.do_clear_bss_loop>
     24e:	9c d5       	rcall	.+2872   	; 0xd88 <main>
     250:	0c 94 df 19 	jmp	0x33be	; 0x33be <_exit>

00000254 <__bad_interrupt>:
     254:	d5 ce       	rjmp	.-598    	; 0x0 <__vectors>

00000256 <uart_putchar>:
		}
		//remaining = udi_cdc_multi_write_buf(0, buff, len);
		//printf("Remaining: %u\r\n", remaining);
		//writeUARTByte(*(ptr++));		
	} while (len--);
}
     256:	e0 ea       	ldi	r30, 0xA0	; 160
     258:	fa e0       	ldi	r31, 0x0A	; 10
     25a:	91 81       	ldd	r25, Z+1	; 0x01
     25c:	95 ff       	sbrs	r25, 5
     25e:	fd cf       	rjmp	.-6      	; 0x25a <uart_putchar+0x4>
     260:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
     264:	08 95       	ret

00000266 <initSPI>:
     266:	68 e0       	ldi	r22, 0x08	; 8
     268:	83 e0       	ldi	r24, 0x03	; 3
     26a:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <sysclk_enable_module>
     26e:	e0 e4       	ldi	r30, 0x40	; 64
     270:	f6 e0       	ldi	r31, 0x06	; 6
     272:	80 eb       	ldi	r24, 0xB0	; 176
     274:	81 83       	std	Z+1, r24	; 0x01
     276:	80 e4       	ldi	r24, 0x40	; 64
     278:	82 83       	std	Z+2, r24	; 0x02
     27a:	81 ed       	ldi	r24, 0xD1	; 209
     27c:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     280:	08 95       	ret

00000282 <initDebugUART>:
     282:	88 e0       	ldi	r24, 0x08	; 8
     284:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
     288:	e0 ea       	ldi	r30, 0xA0	; 160
     28a:	fa e0       	ldi	r31, 0x0A	; 10
     28c:	84 83       	std	Z+4, r24	; 0x04
     28e:	83 e0       	ldi	r24, 0x03	; 3
     290:	85 83       	std	Z+5, r24	; 0x05
     292:	08 95       	ret

00000294 <sendSPI>:
     294:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     298:	e0 ec       	ldi	r30, 0xC0	; 192
     29a:	f8 e0       	ldi	r31, 0x08	; 8
     29c:	82 81       	ldd	r24, Z+2	; 0x02
     29e:	88 23       	and	r24, r24
     2a0:	ec f7       	brge	.-6      	; 0x29c <sendSPI+0x8>
     2a2:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     2a6:	08 95       	ret

000002a8 <sendDummy>:
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	f4 cf       	rjmp	.-24     	; 0x294 <sendSPI>
     2ac:	08 95       	ret

000002ae <memSendAddress>:
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	c6 2f       	mov	r28, r22
     2b4:	d7 2f       	mov	r29, r23
     2b6:	ee df       	rcall	.-36     	; 0x294 <sendSPI>
     2b8:	8d 2f       	mov	r24, r29
     2ba:	ec df       	rcall	.-40     	; 0x294 <sendSPI>
     2bc:	8c 2f       	mov	r24, r28
     2be:	ea df       	rcall	.-44     	; 0x294 <sendSPI>
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <getMemStatus>:
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	c0 e4       	ldi	r28, 0x40	; 64
     2ce:	d6 e0       	ldi	r29, 0x06	; 6
     2d0:	10 e1       	ldi	r17, 0x10	; 16
     2d2:	1d 83       	std	Y+5, r17	; 0x05
     2d4:	1e 83       	std	Y+6, r17	; 0x06
     2d6:	85 e0       	ldi	r24, 0x05	; 5
     2d8:	dd df       	rcall	.-70     	; 0x294 <sendSPI>
     2da:	e6 df       	rcall	.-52     	; 0x2a8 <sendDummy>
     2dc:	1d 83       	std	Y+5, r17	; 0x05
     2de:	df 91       	pop	r29
     2e0:	cf 91       	pop	r28
     2e2:	1f 91       	pop	r17
     2e4:	08 95       	ret

000002e6 <waitForNotBusy>:
     2e6:	ef df       	rcall	.-34     	; 0x2c6 <getMemStatus>
     2e8:	80 fd       	sbrc	r24, 0
     2ea:	fd cf       	rjmp	.-6      	; 0x2e6 <waitForNotBusy>
     2ec:	08 95       	ret

000002ee <memEnableWrite>:
     2ee:	e0 e4       	ldi	r30, 0x40	; 64
     2f0:	f6 e0       	ldi	r31, 0x06	; 6
     2f2:	80 e1       	ldi	r24, 0x10	; 16
     2f4:	85 83       	std	Z+5, r24	; 0x05
     2f6:	86 83       	std	Z+6, r24	; 0x06
     2f8:	86 e0       	ldi	r24, 0x06	; 6
     2fa:	cc df       	rcall	.-104    	; 0x294 <sendSPI>
     2fc:	e4 df       	rcall	.-56     	; 0x2c6 <getMemStatus>
     2fe:	81 ff       	sbrs	r24, 1
     300:	fd cf       	rjmp	.-6      	; 0x2fc <memEnableWrite+0xe>
     302:	80 e1       	ldi	r24, 0x10	; 16
     304:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     308:	08 95       	ret

0000030a <memEraseSector>:
     30a:	cf 92       	push	r12
     30c:	df 92       	push	r13
     30e:	ef 92       	push	r14
     310:	ff 92       	push	r15
     312:	1f 93       	push	r17
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	6b 01       	movw	r12, r22
     31a:	7c 01       	movw	r14, r24
     31c:	e4 df       	rcall	.-56     	; 0x2e6 <waitForNotBusy>
     31e:	e7 df       	rcall	.-50     	; 0x2ee <memEnableWrite>
     320:	c0 e4       	ldi	r28, 0x40	; 64
     322:	d6 e0       	ldi	r29, 0x06	; 6
     324:	10 e1       	ldi	r17, 0x10	; 16
     326:	1d 83       	std	Y+5, r17	; 0x05
     328:	1e 83       	std	Y+6, r17	; 0x06
     32a:	80 e2       	ldi	r24, 0x20	; 32
     32c:	b3 df       	rcall	.-154    	; 0x294 <sendSPI>
     32e:	c7 01       	movw	r24, r14
     330:	b6 01       	movw	r22, r12
     332:	bd df       	rcall	.-134    	; 0x2ae <memSendAddress>
     334:	1d 83       	std	Y+5, r17	; 0x05
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	1f 91       	pop	r17
     33c:	ff 90       	pop	r15
     33e:	ef 90       	pop	r14
     340:	df 90       	pop	r13
     342:	cf 90       	pop	r12
     344:	08 95       	ret

00000346 <memRead256ToStdOut>:
     346:	5f 92       	push	r5
     348:	6f 92       	push	r6
     34a:	7f 92       	push	r7
     34c:	8f 92       	push	r8
     34e:	9f 92       	push	r9
     350:	af 92       	push	r10
     352:	bf 92       	push	r11
     354:	cf 92       	push	r12
     356:	df 92       	push	r13
     358:	ef 92       	push	r14
     35a:	ff 92       	push	r15
     35c:	0f 93       	push	r16
     35e:	1f 93       	push	r17
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
     368:	60 97       	sbiw	r28, 0x10	; 16
     36a:	cd bf       	out	0x3d, r28	; 61
     36c:	de bf       	out	0x3e, r29	; 62
     36e:	6b 01       	movw	r12, r22
     370:	7c 01       	movw	r14, r24
     372:	b9 df       	rcall	.-142    	; 0x2e6 <waitForNotBusy>
     374:	e0 e4       	ldi	r30, 0x40	; 64
     376:	f6 e0       	ldi	r31, 0x06	; 6
     378:	80 e1       	ldi	r24, 0x10	; 16
     37a:	85 83       	std	Z+5, r24	; 0x05
     37c:	86 83       	std	Z+6, r24	; 0x06
     37e:	83 e0       	ldi	r24, 0x03	; 3
     380:	89 df       	rcall	.-238    	; 0x294 <sendSPI>
     382:	c7 01       	movw	r24, r14
     384:	b6 01       	movw	r22, r12
     386:	93 df       	rcall	.-218    	; 0x2ae <memSendAddress>
     388:	68 94       	set
     38a:	77 24       	eor	r7, r7
     38c:	75 f8       	bld	r7, 5
     38e:	ce 01       	movw	r24, r28
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	4c 01       	movw	r8, r24
     394:	5e 01       	movw	r10, r28
     396:	91 e1       	ldi	r25, 0x11	; 17
     398:	a9 0e       	add	r10, r25
     39a:	b1 1c       	adc	r11, r1
     39c:	58 2c       	mov	r5, r8
     39e:	69 2c       	mov	r6, r9
     3a0:	0f 2e       	mov	r0, r31
     3a2:	f6 ed       	ldi	r31, 0xD6	; 214
     3a4:	cf 2e       	mov	r12, r31
     3a6:	f0 e2       	ldi	r31, 0x20	; 32
     3a8:	df 2e       	mov	r13, r31
     3aa:	f0 2d       	mov	r31, r0
     3ac:	25 c0       	rjmp	.+74     	; 0x3f8 <memRead256ToStdOut+0xb2>
     3ae:	7c df       	rcall	.-264    	; 0x2a8 <sendDummy>
     3b0:	f8 01       	movw	r30, r16
     3b2:	81 93       	st	Z+, r24
     3b4:	8f 01       	movw	r16, r30
     3b6:	1f 92       	push	r1
     3b8:	8f 93       	push	r24
     3ba:	df 92       	push	r13
     3bc:	cf 92       	push	r12
     3be:	0e 94 03 17 	call	0x2e06	; 0x2e06 <printf>
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	0a 15       	cp	r16, r10
     3cc:	1b 05       	cpc	r17, r11
     3ce:	79 f7       	brne	.-34     	; 0x3ae <memRead256ToStdOut+0x68>
     3d0:	89 e0       	ldi	r24, 0x09	; 9
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <putchar>
     3d8:	f7 01       	movw	r30, r14
     3da:	81 91       	ld	r24, Z+
     3dc:	7f 01       	movw	r14, r30
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <putchar>
     3e4:	ea 14       	cp	r14, r10
     3e6:	fb 04       	cpc	r15, r11
     3e8:	b9 f7       	brne	.-18     	; 0x3d8 <memRead256ToStdOut+0x92>
     3ea:	8b e1       	ldi	r24, 0x1B	; 27
     3ec:	91 e2       	ldi	r25, 0x21	; 33
     3ee:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <puts>
     3f2:	7a 94       	dec	r7
     3f4:	77 20       	and	r7, r7
     3f6:	21 f0       	breq	.+8      	; 0x400 <__LOCK_REGION_LENGTH__>
     3f8:	74 01       	movw	r14, r8
     3fa:	05 2d       	mov	r16, r5
     3fc:	16 2d       	mov	r17, r6
     3fe:	d7 cf       	rjmp	.-82     	; 0x3ae <memRead256ToStdOut+0x68>
     400:	80 e1       	ldi	r24, 0x10	; 16
     402:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     406:	60 96       	adiw	r28, 0x10	; 16
     408:	cd bf       	out	0x3d, r28	; 61
     40a:	de bf       	out	0x3e, r29	; 62
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	ff 90       	pop	r15
     416:	ef 90       	pop	r14
     418:	df 90       	pop	r13
     41a:	cf 90       	pop	r12
     41c:	bf 90       	pop	r11
     41e:	af 90       	pop	r10
     420:	9f 90       	pop	r9
     422:	8f 90       	pop	r8
     424:	7f 90       	pop	r7
     426:	6f 90       	pop	r6
     428:	5f 90       	pop	r5
     42a:	08 95       	ret

0000042c <memReadToBuffer>:
     42c:	8f 92       	push	r8
     42e:	9f 92       	push	r9
     430:	af 92       	push	r10
     432:	bf 92       	push	r11
     434:	ef 92       	push	r14
     436:	ff 92       	push	r15
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	4b 01       	movw	r8, r22
     442:	5c 01       	movw	r10, r24
     444:	7a 01       	movw	r14, r20
     446:	12 2f       	mov	r17, r18
     448:	4e df       	rcall	.-356    	; 0x2e6 <waitForNotBusy>
     44a:	e0 e4       	ldi	r30, 0x40	; 64
     44c:	f6 e0       	ldi	r31, 0x06	; 6
     44e:	80 e1       	ldi	r24, 0x10	; 16
     450:	85 83       	std	Z+5, r24	; 0x05
     452:	86 83       	std	Z+6, r24	; 0x06
     454:	83 e0       	ldi	r24, 0x03	; 3
     456:	1e df       	rcall	.-452    	; 0x294 <sendSPI>
     458:	c5 01       	movw	r24, r10
     45a:	b4 01       	movw	r22, r8
     45c:	28 df       	rcall	.-432    	; 0x2ae <memSendAddress>
     45e:	e7 01       	movw	r28, r14
     460:	01 2f       	mov	r16, r17
     462:	10 e0       	ldi	r17, 0x00	; 0
     464:	0f 5f       	subi	r16, 0xFF	; 255
     466:	1f 4f       	sbci	r17, 0xFF	; 255
     468:	0e 0d       	add	r16, r14
     46a:	1f 1d       	adc	r17, r15
     46c:	1d df       	rcall	.-454    	; 0x2a8 <sendDummy>
     46e:	89 93       	st	Y+, r24
     470:	c0 17       	cp	r28, r16
     472:	d1 07       	cpc	r29, r17
     474:	d9 f7       	brne	.-10     	; 0x46c <memReadToBuffer+0x40>
     476:	80 e1       	ldi	r24, 0x10	; 16
     478:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	1f 91       	pop	r17
     482:	0f 91       	pop	r16
     484:	ff 90       	pop	r15
     486:	ef 90       	pop	r14
     488:	bf 90       	pop	r11
     48a:	af 90       	pop	r10
     48c:	9f 90       	pop	r9
     48e:	8f 90       	pop	r8
     490:	08 95       	ret

00000492 <memWriteBuff>:
     492:	8f 92       	push	r8
     494:	9f 92       	push	r9
     496:	af 92       	push	r10
     498:	bf 92       	push	r11
     49a:	ef 92       	push	r14
     49c:	ff 92       	push	r15
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	4b 01       	movw	r8, r22
     4a8:	5c 01       	movw	r10, r24
     4aa:	7a 01       	movw	r14, r20
     4ac:	12 2f       	mov	r17, r18
     4ae:	1b df       	rcall	.-458    	; 0x2e6 <waitForNotBusy>
     4b0:	1e df       	rcall	.-452    	; 0x2ee <memEnableWrite>
     4b2:	e0 e4       	ldi	r30, 0x40	; 64
     4b4:	f6 e0       	ldi	r31, 0x06	; 6
     4b6:	80 e1       	ldi	r24, 0x10	; 16
     4b8:	85 83       	std	Z+5, r24	; 0x05
     4ba:	86 83       	std	Z+6, r24	; 0x06
     4bc:	82 e0       	ldi	r24, 0x02	; 2
     4be:	ea de       	rcall	.-556    	; 0x294 <sendSPI>
     4c0:	c5 01       	movw	r24, r10
     4c2:	b4 01       	movw	r22, r8
     4c4:	f4 de       	rcall	.-536    	; 0x2ae <memSendAddress>
     4c6:	e7 01       	movw	r28, r14
     4c8:	01 2f       	mov	r16, r17
     4ca:	10 e0       	ldi	r17, 0x00	; 0
     4cc:	0f 5f       	subi	r16, 0xFF	; 255
     4ce:	1f 4f       	sbci	r17, 0xFF	; 255
     4d0:	0e 0d       	add	r16, r14
     4d2:	1f 1d       	adc	r17, r15
     4d4:	89 91       	ld	r24, Y+
     4d6:	de de       	rcall	.-580    	; 0x294 <sendSPI>
     4d8:	c0 17       	cp	r28, r16
     4da:	d1 07       	cpc	r29, r17
     4dc:	d9 f7       	brne	.-10     	; 0x4d4 <memWriteBuff+0x42>
     4de:	80 e1       	ldi	r24, 0x10	; 16
     4e0:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	ff 90       	pop	r15
     4ee:	ef 90       	pop	r14
     4f0:	bf 90       	pop	r11
     4f2:	af 90       	pop	r10
     4f4:	9f 90       	pop	r9
     4f6:	8f 90       	pop	r8
     4f8:	08 95       	ret

000004fa <TESTWriteMem>:
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	c0 e4       	ldi	r28, 0x40	; 64
     502:	d6 e0       	ldi	r29, 0x06	; 6
     504:	10 e1       	ldi	r17, 0x10	; 16
     506:	1d 83       	std	Y+5, r17	; 0x05
     508:	1e 83       	std	Y+6, r17	; 0x06
     50a:	86 e0       	ldi	r24, 0x06	; 6
     50c:	c3 de       	rcall	.-634    	; 0x294 <sendSPI>
     50e:	1d 83       	std	Y+5, r17	; 0x05
     510:	1e 83       	std	Y+6, r17	; 0x06
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	bf de       	rcall	.-642    	; 0x294 <sendSPI>
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	bd de       	rcall	.-646    	; 0x294 <sendSPI>
     51a:	1d 83       	std	Y+5, r17	; 0x05
     51c:	8c ed       	ldi	r24, 0xDC	; 220
     51e:	90 e2       	ldi	r25, 0x20	; 32
     520:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <puts>
     524:	d0 de       	rcall	.-608    	; 0x2c6 <getMemStatus>
     526:	1f 92       	push	r1
     528:	8f 93       	push	r24
     52a:	8b ee       	ldi	r24, 0xEB	; 235
     52c:	90 e2       	ldi	r25, 0x20	; 32
     52e:	9f 93       	push	r25
     530:	8f 93       	push	r24
     532:	0e 94 03 17 	call	0x2e06	; 0x2e06 <printf>
     536:	8c ef       	ldi	r24, 0xFC	; 252
     538:	90 e2       	ldi	r25, 0x20	; 32
     53a:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <puts>
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	70 e1       	ldi	r23, 0x10	; 16
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	ff de       	rcall	.-514    	; 0x346 <memRead256ToStdOut>
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	08 95       	ret

00000558 <returnChipId>:


void returnChipId()
{
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
	//printf("Reading Chip Id\r\n");
	waitForNotBusy();
     55e:	c3 de       	rcall	.-634    	; 0x2e6 <waitForNotBusy>
	memEnableWrite();
     560:	c6 de       	rcall	.-628    	; 0x2ee <memEnableWrite>
	CS_DISABLE();
     562:	c0 e4       	ldi	r28, 0x40	; 64
     564:	d6 e0       	ldi	r29, 0x06	; 6
     566:	10 e1       	ldi	r17, 0x10	; 16
     568:	1d 83       	std	Y+5, r17	; 0x05
	CS_ENABLE();
     56a:	1e 83       	std	Y+6, r17	; 0x06
	
	sendSPI(MEM_READ_ID);
     56c:	8f e9       	ldi	r24, 0x9F	; 159
     56e:	92 de       	rcall	.-732    	; 0x294 <sendSPI>
	udi_cdc_putc(sendDummy());
     570:	9b de       	rcall	.-714    	; 0x2a8 <sendDummy>
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	6e d7       	rcall	.+3804   	; 0x1452 <udi_cdc_putc>
	udi_cdc_putc(sendDummy());
     576:	98 de       	rcall	.-720    	; 0x2a8 <sendDummy>
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	6b d7       	rcall	.+3798   	; 0x1452 <udi_cdc_putc>
	udi_cdc_putc(sendDummy());
     57c:	95 de       	rcall	.-726    	; 0x2a8 <sendDummy>
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	68 d7       	rcall	.+3792   	; 0x1452 <udi_cdc_putc>
	
	CS_DISABLE();
     582:	1d 83       	std	Y+5, r17	; 0x05
	return;
}
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	08 95       	ret

0000058c <eraseChip>:

void eraseChip()
{
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
	//printf("Erasing Chip\r\n");
	waitForNotBusy();
     592:	a9 de       	rcall	.-686    	; 0x2e6 <waitForNotBusy>
	
	CS_DISABLE();
     594:	c0 e4       	ldi	r28, 0x40	; 64
     596:	d6 e0       	ldi	r29, 0x06	; 6
     598:	10 e1       	ldi	r17, 0x10	; 16
     59a:	1d 83       	std	Y+5, r17	; 0x05
	CS_ENABLE();
     59c:	1e 83       	std	Y+6, r17	; 0x06
	
	sendSPI(MEM_CHIP_ERASE);
     59e:	87 ec       	ldi	r24, 0xC7	; 199
     5a0:	79 de       	rcall	.-782    	; 0x294 <sendSPI>
	
	waitForNotBusy();
     5a2:	a1 de       	rcall	.-702    	; 0x2e6 <waitForNotBusy>
	
	uart_putchar(0xFF, 0x00);
     5a4:	60 e0       	ldi	r22, 0x00	; 0
     5a6:	70 e0       	ldi	r23, 0x00	; 0
     5a8:	8f ef       	ldi	r24, 0xFF	; 255
     5aa:	55 de       	rcall	.-854    	; 0x256 <uart_putchar>
	
	CS_DISABLE();
     5ac:	1d 83       	std	Y+5, r17	; 0x05
	return;
	
}
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	1f 91       	pop	r17
     5b4:	08 95       	ret

000005b6 <readText>:

void readText()
{
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
	uint16_t len;
	
	memReadToBuffer(0x00000000, _rxData, 2);
     5ba:	22 e0       	ldi	r18, 0x02	; 2
     5bc:	45 e9       	ldi	r20, 0x95	; 149
     5be:	53 e2       	ldi	r21, 0x23	; 35
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	cb 01       	movw	r24, r22
     5c6:	32 df       	rcall	.-412    	; 0x42c <memReadToBuffer>
	_rxDataLen = ((uint32_t)(_rxData[0] << 8)) + (uint32_t)_rxData[1];
     5c8:	c5 e9       	ldi	r28, 0x95	; 149
     5ca:	d3 e2       	ldi	r29, 0x23	; 35
     5cc:	88 81       	ld	r24, Y
     5ce:	29 81       	ldd	r18, Y+1	; 0x01
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	98 2f       	mov	r25, r24
     5d4:	88 27       	eor	r24, r24
     5d6:	09 2e       	mov	r0, r25
     5d8:	00 0c       	add	r0, r0
     5da:	aa 0b       	sbc	r26, r26
     5dc:	bb 0b       	sbc	r27, r27
     5de:	82 0f       	add	r24, r18
     5e0:	91 1d       	adc	r25, r1
     5e2:	a1 1d       	adc	r26, r1
     5e4:	b1 1d       	adc	r27, r1
     5e6:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <_rxDataLen>
     5ea:	90 93 2b 21 	sts	0x212B, r25	; 0x80212b <_rxDataLen+0x1>
     5ee:	a0 93 2c 21 	sts	0x212C, r26	; 0x80212c <_rxDataLen+0x2>
     5f2:	b0 93 2d 21 	sts	0x212D, r27	; 0x80212d <_rxDataLen+0x3>
	_rxDataPos = 2;
     5f6:	82 e0       	ldi	r24, 0x02	; 2
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	a0 e0       	ldi	r26, 0x00	; 0
     5fc:	b0 e0       	ldi	r27, 0x00	; 0
     5fe:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <__data_end>
     602:	90 93 27 21 	sts	0x2127, r25	; 0x802127 <__data_end+0x1>
     606:	a0 93 28 21 	sts	0x2128, r26	; 0x802128 <__data_end+0x2>
     60a:	b0 93 29 21 	sts	0x2129, r27	; 0x802129 <__data_end+0x3>
	
	udi_cdc_putc(_rxData[0]);
     60e:	88 81       	ld	r24, Y
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	1f d7       	rcall	.+3646   	; 0x1452 <udi_cdc_putc>
	udi_cdc_putc(_rxData[1]);
     614:	89 81       	ldd	r24, Y+1	; 0x01
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	1c d7       	rcall	.+3640   	; 0x1452 <udi_cdc_putc>
	
	//printf("Reading 0x%02x 0x%02x %lu chars\r\n", _rxData[0], _rxData[1], _rxDataLen);
	
	while(1)
	{
		if (_rxDataLen < MEM_BLOCK_SIZE) //Less than MEM_BLOCK_SIZE because that's the size of our buffer
     61a:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <_rxDataLen>
     61e:	90 91 2b 21 	lds	r25, 0x212B	; 0x80212b <_rxDataLen+0x1>
     622:	a0 91 2c 21 	lds	r26, 0x212C	; 0x80212c <_rxDataLen+0x2>
     626:	b0 91 2d 21 	lds	r27, 0x212D	; 0x80212d <_rxDataLen+0x3>
     62a:	8f 3f       	cpi	r24, 0xFF	; 255
     62c:	91 05       	cpc	r25, r1
     62e:	a1 05       	cpc	r26, r1
     630:	b1 05       	cpc	r27, r1
     632:	09 f0       	breq	.+2      	; 0x636 <readText+0x80>
     634:	68 f5       	brcc	.+90     	; 0x690 <readText+0xda>
		{
			if (_rxDataLen > 0)
     636:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <_rxDataLen>
     63a:	90 91 2b 21 	lds	r25, 0x212B	; 0x80212b <_rxDataLen+0x1>
     63e:	a0 91 2c 21 	lds	r26, 0x212C	; 0x80212c <_rxDataLen+0x2>
     642:	b0 91 2d 21 	lds	r27, 0x212D	; 0x80212d <_rxDataLen+0x3>
     646:	89 2b       	or	r24, r25
     648:	8a 2b       	or	r24, r26
     64a:	8b 2b       	or	r24, r27
     64c:	09 f4       	brne	.+2      	; 0x650 <readText+0x9a>
     64e:	68 c0       	rjmp	.+208    	; 0x720 <readText+0x16a>
			{
				
				//printf("Reading ending %u bytes from 0x%08x\r\n",len, _rxDataPos);
				memReadToBuffer(_rxDataPos, _rxData, _rxDataLen);
     650:	20 91 2a 21 	lds	r18, 0x212A	; 0x80212a <_rxDataLen>
     654:	30 91 2b 21 	lds	r19, 0x212B	; 0x80212b <_rxDataLen+0x1>
     658:	40 91 2c 21 	lds	r20, 0x212C	; 0x80212c <_rxDataLen+0x2>
     65c:	50 91 2d 21 	lds	r21, 0x212D	; 0x80212d <_rxDataLen+0x3>
     660:	60 91 26 21 	lds	r22, 0x2126	; 0x802126 <__data_end>
     664:	70 91 27 21 	lds	r23, 0x2127	; 0x802127 <__data_end+0x1>
     668:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <__data_end+0x2>
     66c:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <__data_end+0x3>
     670:	45 e9       	ldi	r20, 0x95	; 149
     672:	53 e2       	ldi	r21, 0x23	; 35
     674:	db de       	rcall	.-586    	; 0x42c <memReadToBuffer>
				udi_cdc_multi_write_buf(0, _rxData, _rxDataLen);
     676:	40 91 2a 21 	lds	r20, 0x212A	; 0x80212a <_rxDataLen>
     67a:	50 91 2b 21 	lds	r21, 0x212B	; 0x80212b <_rxDataLen+0x1>
     67e:	60 91 2c 21 	lds	r22, 0x212C	; 0x80212c <_rxDataLen+0x2>
     682:	70 91 2d 21 	lds	r23, 0x212D	; 0x80212d <_rxDataLen+0x3>
     686:	65 e9       	ldi	r22, 0x95	; 149
     688:	73 e2       	ldi	r23, 0x23	; 35
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	e6 d6       	rcall	.+3532   	; 0x145a <udi_cdc_multi_write_buf>
     68e:	48 c0       	rjmp	.+144    	; 0x720 <readText+0x16a>
			return;	
		}
		else
		{		
			//printf("Reading 256 bytes from 0x%08x\r\n", _rxDataPos);	
			memReadToBuffer(_rxDataPos, _rxData, 255);
     690:	60 91 26 21 	lds	r22, 0x2126	; 0x802126 <__data_end>
     694:	70 91 27 21 	lds	r23, 0x2127	; 0x802127 <__data_end+0x1>
     698:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <__data_end+0x2>
     69c:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <__data_end+0x3>
     6a0:	2f ef       	ldi	r18, 0xFF	; 255
     6a2:	45 e9       	ldi	r20, 0x95	; 149
     6a4:	53 e2       	ldi	r21, 0x23	; 35
     6a6:	c2 de       	rcall	.-636    	; 0x42c <memReadToBuffer>
			_rxDataLen -= 256;
     6a8:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <_rxDataLen>
     6ac:	90 91 2b 21 	lds	r25, 0x212B	; 0x80212b <_rxDataLen+0x1>
     6b0:	a0 91 2c 21 	lds	r26, 0x212C	; 0x80212c <_rxDataLen+0x2>
     6b4:	b0 91 2d 21 	lds	r27, 0x212D	; 0x80212d <_rxDataLen+0x3>
     6b8:	91 50       	subi	r25, 0x01	; 1
     6ba:	a1 09       	sbc	r26, r1
     6bc:	b1 09       	sbc	r27, r1
     6be:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <_rxDataLen>
     6c2:	90 93 2b 21 	sts	0x212B, r25	; 0x80212b <_rxDataLen+0x1>
     6c6:	a0 93 2c 21 	sts	0x212C, r26	; 0x80212c <_rxDataLen+0x2>
     6ca:	b0 93 2d 21 	sts	0x212D, r27	; 0x80212d <_rxDataLen+0x3>
			_rxDataPos+=256;
     6ce:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <__data_end>
     6d2:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <__data_end+0x1>
     6d6:	a0 91 28 21 	lds	r26, 0x2128	; 0x802128 <__data_end+0x2>
     6da:	b0 91 29 21 	lds	r27, 0x2129	; 0x802129 <__data_end+0x3>
     6de:	9f 5f       	subi	r25, 0xFF	; 255
     6e0:	af 4f       	sbci	r26, 0xFF	; 255
     6e2:	bf 4f       	sbci	r27, 0xFF	; 255
     6e4:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <__data_end>
     6e8:	90 93 27 21 	sts	0x2127, r25	; 0x802127 <__data_end+0x1>
     6ec:	a0 93 28 21 	sts	0x2128, r26	; 0x802128 <__data_end+0x2>
     6f0:	b0 93 29 21 	sts	0x2129, r27	; 0x802129 <__data_end+0x3>
			udi_cdc_multi_write_buf(0, _rxData, 256);			
     6f4:	40 e0       	ldi	r20, 0x00	; 0
     6f6:	51 e0       	ldi	r21, 0x01	; 1
     6f8:	65 e9       	ldi	r22, 0x95	; 149
     6fa:	73 e2       	ldi	r23, 0x23	; 35
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	ad d6       	rcall	.+3418   	; 0x145a <udi_cdc_multi_write_buf>
	
	//printf("Reading 0x%02x 0x%02x %lu chars\r\n", _rxData[0], _rxData[1], _rxDataLen);
	
	while(1)
	{
		if (_rxDataLen < MEM_BLOCK_SIZE) //Less than MEM_BLOCK_SIZE because that's the size of our buffer
     700:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <_rxDataLen>
     704:	90 91 2b 21 	lds	r25, 0x212B	; 0x80212b <_rxDataLen+0x1>
     708:	a0 91 2c 21 	lds	r26, 0x212C	; 0x80212c <_rxDataLen+0x2>
     70c:	b0 91 2d 21 	lds	r27, 0x212D	; 0x80212d <_rxDataLen+0x3>
     710:	8f 3f       	cpi	r24, 0xFF	; 255
     712:	91 05       	cpc	r25, r1
     714:	a1 05       	cpc	r26, r1
     716:	b1 05       	cpc	r27, r1
     718:	11 f0       	breq	.+4      	; 0x71e <readText+0x168>
     71a:	08 f0       	brcs	.+2      	; 0x71e <readText+0x168>
     71c:	b9 cf       	rjmp	.-142    	; 0x690 <readText+0xda>
     71e:	8b cf       	rjmp	.-234    	; 0x636 <readText+0x80>
			_rxDataPos+=256;
			udi_cdc_multi_write_buf(0, _rxData, 256);			
		}
	}
	
}
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <readData>:

void readData()
{
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
	uint32_t len;
	
	
	//The first 4 bytes are the total length of the Data including the lookup table 
	memReadToBuffer(MEM_SECTOR_SIZE, _rxData, 4);
     72a:	24 e0       	ldi	r18, 0x04	; 4
     72c:	45 e9       	ldi	r20, 0x95	; 149
     72e:	53 e2       	ldi	r21, 0x23	; 35
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	70 e1       	ldi	r23, 0x10	; 16
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	79 de       	rcall	.-782    	; 0x42c <memReadToBuffer>
	_rxDataLen = ((uint32_t)_rxData[0] << 24) + ((uint32_t)_rxData[1] << 16) + ((uint32_t)_rxData[2] << 8) + (uint32_t)_rxData[3];
     73a:	c5 e9       	ldi	r28, 0x95	; 149
     73c:	d3 e2       	ldi	r29, 0x23	; 35
     73e:	88 81       	ld	r24, Y
     740:	49 81       	ldd	r20, Y+1	; 0x01
     742:	2a 81       	ldd	r18, Y+2	; 0x02
     744:	3b 81       	ldd	r19, Y+3	; 0x03
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	a0 e0       	ldi	r26, 0x00	; 0
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	b8 2f       	mov	r27, r24
     74e:	aa 27       	eor	r26, r26
     750:	99 27       	eor	r25, r25
     752:	88 27       	eor	r24, r24
     754:	50 e0       	ldi	r21, 0x00	; 0
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	ba 01       	movw	r22, r20
     75c:	55 27       	eor	r21, r21
     75e:	44 27       	eor	r20, r20
     760:	84 0f       	add	r24, r20
     762:	95 1f       	adc	r25, r21
     764:	a6 1f       	adc	r26, r22
     766:	b7 1f       	adc	r27, r23
     768:	83 0f       	add	r24, r19
     76a:	91 1d       	adc	r25, r1
     76c:	a1 1d       	adc	r26, r1
     76e:	b1 1d       	adc	r27, r1
     770:	42 2f       	mov	r20, r18
     772:	50 e0       	ldi	r21, 0x00	; 0
     774:	60 e0       	ldi	r22, 0x00	; 0
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	76 2f       	mov	r23, r22
     77a:	65 2f       	mov	r22, r21
     77c:	54 2f       	mov	r21, r20
     77e:	44 27       	eor	r20, r20
     780:	84 0f       	add	r24, r20
     782:	95 1f       	adc	r25, r21
     784:	a6 1f       	adc	r26, r22
     786:	b7 1f       	adc	r27, r23
     788:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <_rxDataLen>
     78c:	90 93 2b 21 	sts	0x212B, r25	; 0x80212b <_rxDataLen+0x1>
     790:	a0 93 2c 21 	sts	0x212C, r26	; 0x80212c <_rxDataLen+0x2>
     794:	b0 93 2d 21 	sts	0x212D, r27	; 0x80212d <_rxDataLen+0x3>
	_rxDataPos = 4;
     798:	84 e0       	ldi	r24, 0x04	; 4
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	a0 e0       	ldi	r26, 0x00	; 0
     79e:	b0 e0       	ldi	r27, 0x00	; 0
     7a0:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <__data_end>
     7a4:	90 93 27 21 	sts	0x2127, r25	; 0x802127 <__data_end+0x1>
     7a8:	a0 93 28 21 	sts	0x2128, r26	; 0x802128 <__data_end+0x2>
     7ac:	b0 93 29 21 	sts	0x2129, r27	; 0x802129 <__data_end+0x3>
	
	udi_cdc_putc(_rxData[0]);
     7b0:	88 81       	ld	r24, Y
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	4e d6       	rcall	.+3228   	; 0x1452 <udi_cdc_putc>
	udi_cdc_putc(_rxData[1]);
     7b6:	89 81       	ldd	r24, Y+1	; 0x01
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	4b d6       	rcall	.+3222   	; 0x1452 <udi_cdc_putc>
	udi_cdc_putc(_rxData[2]);
     7bc:	8a 81       	ldd	r24, Y+2	; 0x02
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	48 d6       	rcall	.+3216   	; 0x1452 <udi_cdc_putc>
	udi_cdc_putc(_rxData[3]);
     7c2:	8b 81       	ldd	r24, Y+3	; 0x03
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	45 d6       	rcall	.+3210   	; 0x1452 <udi_cdc_putc>
	
	//printf("Reading 0x%02x 0x%02x 0x%02x 0x%02x %lu chars\r\n", _rxData[0], _rxData[1], _rxData[2], _rxData[3], _rxDataLen);
	
	while(1)
	{
		if (_rxDataLen < MEM_BLOCK_SIZE) //Less than MEM_BLOCK_SIZE because that's the size of our buffer
     7c8:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <_rxDataLen>
     7cc:	90 91 2b 21 	lds	r25, 0x212B	; 0x80212b <_rxDataLen+0x1>
     7d0:	a0 91 2c 21 	lds	r26, 0x212C	; 0x80212c <_rxDataLen+0x2>
     7d4:	b0 91 2d 21 	lds	r27, 0x212D	; 0x80212d <_rxDataLen+0x3>
     7d8:	8f 3f       	cpi	r24, 0xFF	; 255
     7da:	91 05       	cpc	r25, r1
     7dc:	a1 05       	cpc	r26, r1
     7de:	b1 05       	cpc	r27, r1
     7e0:	09 f0       	breq	.+2      	; 0x7e4 <readData+0xbe>
     7e2:	90 f5       	brcc	.+100    	; 0x848 <readData+0x122>
		{
			if (_rxDataLen > 0)
     7e4:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <_rxDataLen>
     7e8:	90 91 2b 21 	lds	r25, 0x212B	; 0x80212b <_rxDataLen+0x1>
     7ec:	a0 91 2c 21 	lds	r26, 0x212C	; 0x80212c <_rxDataLen+0x2>
     7f0:	b0 91 2d 21 	lds	r27, 0x212D	; 0x80212d <_rxDataLen+0x3>
     7f4:	89 2b       	or	r24, r25
     7f6:	8a 2b       	or	r24, r26
     7f8:	8b 2b       	or	r24, r27
     7fa:	09 f4       	brne	.+2      	; 0x7fe <readData+0xd8>
     7fc:	72 c0       	rjmp	.+228    	; 0x8e2 <readData+0x1bc>
			{
				
				//printf("Reading ending %u bytes from 0x%08x\r\n",len, _rxDataPos);
				memReadToBuffer(_rxDataPos + MEM_SECTOR_SIZE, _rxData, _rxDataLen);
     7fe:	20 91 2a 21 	lds	r18, 0x212A	; 0x80212a <_rxDataLen>
     802:	30 91 2b 21 	lds	r19, 0x212B	; 0x80212b <_rxDataLen+0x1>
     806:	40 91 2c 21 	lds	r20, 0x212C	; 0x80212c <_rxDataLen+0x2>
     80a:	50 91 2d 21 	lds	r21, 0x212D	; 0x80212d <_rxDataLen+0x3>
     80e:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <__data_end>
     812:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <__data_end+0x1>
     816:	a0 91 28 21 	lds	r26, 0x2128	; 0x802128 <__data_end+0x2>
     81a:	b0 91 29 21 	lds	r27, 0x2129	; 0x802129 <__data_end+0x3>
     81e:	bc 01       	movw	r22, r24
     820:	cd 01       	movw	r24, r26
     822:	70 5f       	subi	r23, 0xF0	; 240
     824:	8f 4f       	sbci	r24, 0xFF	; 255
     826:	9f 4f       	sbci	r25, 0xFF	; 255
     828:	45 e9       	ldi	r20, 0x95	; 149
     82a:	53 e2       	ldi	r21, 0x23	; 35
     82c:	ff dd       	rcall	.-1026   	; 0x42c <memReadToBuffer>
				udi_cdc_multi_write_buf(0, _rxData, _rxDataLen);
     82e:	40 91 2a 21 	lds	r20, 0x212A	; 0x80212a <_rxDataLen>
     832:	50 91 2b 21 	lds	r21, 0x212B	; 0x80212b <_rxDataLen+0x1>
     836:	60 91 2c 21 	lds	r22, 0x212C	; 0x80212c <_rxDataLen+0x2>
     83a:	70 91 2d 21 	lds	r23, 0x212D	; 0x80212d <_rxDataLen+0x3>
     83e:	65 e9       	ldi	r22, 0x95	; 149
     840:	73 e2       	ldi	r23, 0x23	; 35
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	0a d6       	rcall	.+3092   	; 0x145a <udi_cdc_multi_write_buf>
     846:	4d c0       	rjmp	.+154    	; 0x8e2 <readData+0x1bc>
			return;	
		}
		else
		{		
			//printf("Reading 256 bytes from 0x%08x\r\n", _rxDataPos);	
			memReadToBuffer(_rxDataPos + MEM_SECTOR_SIZE, _rxData, 255);
     848:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <__data_end>
     84c:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <__data_end+0x1>
     850:	a0 91 28 21 	lds	r26, 0x2128	; 0x802128 <__data_end+0x2>
     854:	b0 91 29 21 	lds	r27, 0x2129	; 0x802129 <__data_end+0x3>
     858:	bc 01       	movw	r22, r24
     85a:	cd 01       	movw	r24, r26
     85c:	70 5f       	subi	r23, 0xF0	; 240
     85e:	8f 4f       	sbci	r24, 0xFF	; 255
     860:	9f 4f       	sbci	r25, 0xFF	; 255
     862:	2f ef       	ldi	r18, 0xFF	; 255
     864:	45 e9       	ldi	r20, 0x95	; 149
     866:	53 e2       	ldi	r21, 0x23	; 35
     868:	e1 dd       	rcall	.-1086   	; 0x42c <memReadToBuffer>
			_rxDataLen -= 256;
     86a:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <_rxDataLen>
     86e:	90 91 2b 21 	lds	r25, 0x212B	; 0x80212b <_rxDataLen+0x1>
     872:	a0 91 2c 21 	lds	r26, 0x212C	; 0x80212c <_rxDataLen+0x2>
     876:	b0 91 2d 21 	lds	r27, 0x212D	; 0x80212d <_rxDataLen+0x3>
     87a:	91 50       	subi	r25, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <_rxDataLen>
     884:	90 93 2b 21 	sts	0x212B, r25	; 0x80212b <_rxDataLen+0x1>
     888:	a0 93 2c 21 	sts	0x212C, r26	; 0x80212c <_rxDataLen+0x2>
     88c:	b0 93 2d 21 	sts	0x212D, r27	; 0x80212d <_rxDataLen+0x3>
			_rxDataPos+=256;
     890:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <__data_end>
     894:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <__data_end+0x1>
     898:	a0 91 28 21 	lds	r26, 0x2128	; 0x802128 <__data_end+0x2>
     89c:	b0 91 29 21 	lds	r27, 0x2129	; 0x802129 <__data_end+0x3>
     8a0:	9f 5f       	subi	r25, 0xFF	; 255
     8a2:	af 4f       	sbci	r26, 0xFF	; 255
     8a4:	bf 4f       	sbci	r27, 0xFF	; 255
     8a6:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <__data_end>
     8aa:	90 93 27 21 	sts	0x2127, r25	; 0x802127 <__data_end+0x1>
     8ae:	a0 93 28 21 	sts	0x2128, r26	; 0x802128 <__data_end+0x2>
     8b2:	b0 93 29 21 	sts	0x2129, r27	; 0x802129 <__data_end+0x3>
			udi_cdc_multi_write_buf(0, _rxData, 256);			
     8b6:	40 e0       	ldi	r20, 0x00	; 0
     8b8:	51 e0       	ldi	r21, 0x01	; 1
     8ba:	65 e9       	ldi	r22, 0x95	; 149
     8bc:	73 e2       	ldi	r23, 0x23	; 35
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	cc d5       	rcall	.+2968   	; 0x145a <udi_cdc_multi_write_buf>
	
	//printf("Reading 0x%02x 0x%02x 0x%02x 0x%02x %lu chars\r\n", _rxData[0], _rxData[1], _rxData[2], _rxData[3], _rxDataLen);
	
	while(1)
	{
		if (_rxDataLen < MEM_BLOCK_SIZE) //Less than MEM_BLOCK_SIZE because that's the size of our buffer
     8c2:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <_rxDataLen>
     8c6:	90 91 2b 21 	lds	r25, 0x212B	; 0x80212b <_rxDataLen+0x1>
     8ca:	a0 91 2c 21 	lds	r26, 0x212C	; 0x80212c <_rxDataLen+0x2>
     8ce:	b0 91 2d 21 	lds	r27, 0x212D	; 0x80212d <_rxDataLen+0x3>
     8d2:	8f 3f       	cpi	r24, 0xFF	; 255
     8d4:	91 05       	cpc	r25, r1
     8d6:	a1 05       	cpc	r26, r1
     8d8:	b1 05       	cpc	r27, r1
     8da:	11 f0       	breq	.+4      	; 0x8e0 <readData+0x1ba>
     8dc:	08 f0       	brcs	.+2      	; 0x8e0 <readData+0x1ba>
     8de:	b4 cf       	rjmp	.-152    	; 0x848 <readData+0x122>
     8e0:	81 cf       	rjmp	.-254    	; 0x7e4 <readData+0xbe>
			_rxDataPos+=256;
			udi_cdc_multi_write_buf(0, _rxData, 256);			
		}
	}
	
}
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	08 95       	ret

000008e8 <my_callback_cdc_enable>:
}

bool my_callback_cdc_enable(void)
{
	return true;
}
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	08 95       	ret

000008ec <my_callback_cdc_disable>:

void my_callback_cdc_disable(void)
{
     8ec:	08 95       	ret

000008ee <writeText>:

}

void writeText(uint8_t bytesRead, uint8_t *bytes)
{
     8ee:	cf 92       	push	r12
     8f0:	df 92       	push	r13
     8f2:	ef 92       	push	r14
     8f4:	ff 92       	push	r15
     8f6:	0f 93       	push	r16
     8f8:	1f 93       	push	r17
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	c8 2f       	mov	r28, r24
     900:	8b 01       	movw	r16, r22
	uint8_t bytesLeft = 0;
	//printf("write data\r\n");
			
	//This is the way we detect the first read through. Even if the length being sent is 0, we will be stopping here anyways.
	//NOTE: If this is unreliable, we should include a state flag that indicates this is the first time through.
	if (bytesRead > 1 && _rxDataLen == 0)
     902:	82 30       	cpi	r24, 0x02	; 2
     904:	50 f1       	brcs	.+84     	; 0x95a <writeText+0x6c>
     906:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <_rxDataLen>
     90a:	90 91 2b 21 	lds	r25, 0x212B	; 0x80212b <_rxDataLen+0x1>
     90e:	a0 91 2c 21 	lds	r26, 0x212C	; 0x80212c <_rxDataLen+0x2>
     912:	b0 91 2d 21 	lds	r27, 0x212D	; 0x80212d <_rxDataLen+0x3>
     916:	89 2b       	or	r24, r25
     918:	8a 2b       	or	r24, r26
     91a:	8b 2b       	or	r24, r27
     91c:	f1 f4       	brne	.+60     	; 0x95a <writeText+0x6c>
	{
		_currentCommand = RX_WRITE_TEXT;	//Set the current command
     91e:	80 e1       	ldi	r24, 0x10	; 16
     920:	80 93 2f 21 	sts	0x212F, r24	; 0x80212f <_currentCommand>
		memEraseSector(0x00);	//The string is written to the very first sector.
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	cb 01       	movw	r24, r22
     92a:	ef dc       	rcall	.-1570   	; 0x30a <memEraseSector>
		waitForNotBusy();
     92c:	dc dc       	rcall	.-1608   	; 0x2e6 <waitForNotBusy>
		_rxDataLen = ((uint32_t)bytes[0] << 8) + (uint32_t)bytes[1]; //Get the length of the text, first time through,  byte 0 and 1 should be the 16bit length
     92e:	f8 01       	movw	r30, r16
     930:	80 81       	ld	r24, Z
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	a0 e0       	ldi	r26, 0x00	; 0
     936:	b0 e0       	ldi	r27, 0x00	; 0
     938:	ba 2f       	mov	r27, r26
     93a:	a9 2f       	mov	r26, r25
     93c:	98 2f       	mov	r25, r24
     93e:	88 27       	eor	r24, r24
     940:	21 81       	ldd	r18, Z+1	; 0x01
     942:	82 0f       	add	r24, r18
     944:	91 1d       	adc	r25, r1
     946:	a1 1d       	adc	r26, r1
     948:	b1 1d       	adc	r27, r1
     94a:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <_rxDataLen>
     94e:	90 93 2b 21 	sts	0x212B, r25	; 0x80212b <_rxDataLen+0x1>
     952:	a0 93 2c 21 	sts	0x212C, r26	; 0x80212c <_rxDataLen+0x2>
     956:	b0 93 2d 21 	sts	0x212D, r27	; 0x80212d <_rxDataLen+0x3>

				
	}

	//Here we have to split the array of data read between the current memory block and the next one.
	if ((bytesRead + _rxIndex) >= MEM_BLOCK_SIZE)
     95a:	ec 2e       	mov	r14, r28
     95c:	f1 2c       	mov	r15, r1
     95e:	80 91 2e 21 	lds	r24, 0x212E	; 0x80212e <_rxIndex>
     962:	97 01       	movw	r18, r14
     964:	28 0f       	add	r18, r24
     966:	31 1d       	adc	r19, r1
     968:	2f 3f       	cpi	r18, 0xFF	; 255
     96a:	31 05       	cpc	r19, r1
     96c:	91 f1       	breq	.+100    	; 0x9d2 <writeText+0xe4>
     96e:	8c f1       	brlt	.+98     	; 0x9d2 <writeText+0xe4>
	{
		//_rxData + _rxIndex is pointer math
		//This should fill our _rxData buffer (which is the same size as a block) so we should write the block now and update the _rxDataPos
		bytesLeft = MEM_BLOCK_SIZE - _rxIndex;
     970:	d0 91 2e 21 	lds	r29, 0x212E	; 0x80212e <_rxIndex>
     974:	d1 95       	neg	r29
		memcpy(_rxData + _rxIndex, bytes, bytesLeft);
     976:	cd 2e       	mov	r12, r29
     978:	d1 2c       	mov	r13, r1
     97a:	80 91 2e 21 	lds	r24, 0x212E	; 0x80212e <_rxIndex>
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	a6 01       	movw	r20, r12
     982:	b8 01       	movw	r22, r16
     984:	8b 56       	subi	r24, 0x6B	; 107
     986:	9c 4d       	sbci	r25, 0xDC	; 220
     988:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <memcpy>
		_rxIndex += bytesRead; //_rxIndex is 8bit. if _rxIndex = 192, then _rxIndex + 64 would roll over to 0
     98c:	80 91 2e 21 	lds	r24, 0x212E	; 0x80212e <_rxIndex>
     990:	8c 0f       	add	r24, r28
     992:	80 93 2e 21 	sts	0x212E, r24	; 0x80212e <_rxIndex>
				
		//printf("Writing 256 bytes to 0x%08lx\r\n", (_rxDataPos & 0xFFFFFF00));
		memWriteBuff((_rxDataPos & 0xFFFFFF00), _rxData, MEM_BLOCK_SIZE - 1);
     996:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <__data_end>
     99a:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <__data_end+0x1>
     99e:	a0 91 28 21 	lds	r26, 0x2128	; 0x802128 <__data_end+0x2>
     9a2:	b0 91 29 21 	lds	r27, 0x2129	; 0x802129 <__data_end+0x3>
     9a6:	bc 01       	movw	r22, r24
     9a8:	cd 01       	movw	r24, r26
     9aa:	66 27       	eor	r22, r22
     9ac:	2f ef       	ldi	r18, 0xFF	; 255
     9ae:	45 e9       	ldi	r20, 0x95	; 149
     9b0:	53 e2       	ldi	r21, 0x23	; 35
     9b2:	6f dd       	rcall	.-1314   	; 0x492 <memWriteBuff>
				
				
		//Because _rxIndex would have rolled over to 0 if we were on a factor of 256, and we are already here because the current amount of bytes read + the current index is greater or equal to our Block size
		if (_rxIndex != 0)
     9b4:	80 91 2e 21 	lds	r24, 0x212E	; 0x80212e <_rxIndex>
     9b8:	88 23       	and	r24, r24
     9ba:	d1 f0       	breq	.+52     	; 0x9f0 <writeText+0x102>
		{
			//We are copying what is left in bytes and bytes + bytesLeft is pointer math
			memcpy(_rxData, bytes + bytesLeft, bytesRead - bytesLeft);
     9bc:	a7 01       	movw	r20, r14
     9be:	4d 1b       	sub	r20, r29
     9c0:	51 09       	sbc	r21, r1
     9c2:	b8 01       	movw	r22, r16
     9c4:	6c 0d       	add	r22, r12
     9c6:	7d 1d       	adc	r23, r13
     9c8:	85 e9       	ldi	r24, 0x95	; 149
     9ca:	93 e2       	ldi	r25, 0x23	; 35
     9cc:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <memcpy>
     9d0:	0f c0       	rjmp	.+30     	; 0x9f0 <writeText+0x102>
		}
				
	}
	else
	{
		memcpy(_rxData + _rxIndex, bytes, bytesRead);
     9d2:	80 91 2e 21 	lds	r24, 0x212E	; 0x80212e <_rxIndex>
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	4c 2f       	mov	r20, r28
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	b8 01       	movw	r22, r16
     9de:	8b 56       	subi	r24, 0x6B	; 107
     9e0:	9c 4d       	sbci	r25, 0xDC	; 220
     9e2:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <memcpy>
		_rxIndex += bytesRead;
     9e6:	80 91 2e 21 	lds	r24, 0x212E	; 0x80212e <_rxIndex>
     9ea:	8c 0f       	add	r24, r28
     9ec:	80 93 2e 21 	sts	0x212E, r24	; 0x80212e <_rxIndex>
	}
			
	_rxDataPos += bytesRead;
     9f0:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <__data_end>
     9f4:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <__data_end+0x1>
     9f8:	a0 91 28 21 	lds	r26, 0x2128	; 0x802128 <__data_end+0x2>
     9fc:	b0 91 29 21 	lds	r27, 0x2129	; 0x802129 <__data_end+0x3>
     a00:	8c 0f       	add	r24, r28
     a02:	91 1d       	adc	r25, r1
     a04:	a1 1d       	adc	r26, r1
     a06:	b1 1d       	adc	r27, r1
     a08:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <__data_end>
     a0c:	90 93 27 21 	sts	0x2127, r25	; 0x802127 <__data_end+0x1>
     a10:	a0 93 28 21 	sts	0x2128, r26	; 0x802128 <__data_end+0x2>
     a14:	b0 93 29 21 	sts	0x2129, r27	; 0x802129 <__data_end+0x3>
	//printf("Pos %lu\r\n", _rxDataPos);
			
	//We have the whole message so just write it and be done with the command. Subtract 2 because the len are at the beginning
	if ((_rxDataPos - 2) == _rxDataLen)
     a18:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <__data_end>
     a1c:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <__data_end+0x1>
     a20:	a0 91 28 21 	lds	r26, 0x2128	; 0x802128 <__data_end+0x2>
     a24:	b0 91 29 21 	lds	r27, 0x2129	; 0x802129 <__data_end+0x3>
     a28:	40 91 2a 21 	lds	r20, 0x212A	; 0x80212a <_rxDataLen>
     a2c:	50 91 2b 21 	lds	r21, 0x212B	; 0x80212b <_rxDataLen+0x1>
     a30:	60 91 2c 21 	lds	r22, 0x212C	; 0x80212c <_rxDataLen+0x2>
     a34:	70 91 2d 21 	lds	r23, 0x212D	; 0x80212d <_rxDataLen+0x3>
     a38:	02 97       	sbiw	r24, 0x02	; 2
     a3a:	a1 09       	sbc	r26, r1
     a3c:	b1 09       	sbc	r27, r1
     a3e:	84 17       	cp	r24, r20
     a40:	95 07       	cpc	r25, r21
     a42:	a6 07       	cpc	r26, r22
     a44:	b7 07       	cpc	r27, r23
     a46:	e9 f4       	brne	.+58     	; 0xa82 <writeText+0x194>
	{
		//Write the last bit of data
		memWriteBuff((_rxDataPos & 0xFFFFFF00), _rxData, _rxIndex);
     a48:	20 91 2e 21 	lds	r18, 0x212E	; 0x80212e <_rxIndex>
     a4c:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <__data_end>
     a50:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <__data_end+0x1>
     a54:	a0 91 28 21 	lds	r26, 0x2128	; 0x802128 <__data_end+0x2>
     a58:	b0 91 29 21 	lds	r27, 0x2129	; 0x802129 <__data_end+0x3>
     a5c:	bc 01       	movw	r22, r24
     a5e:	cd 01       	movw	r24, r26
     a60:	66 27       	eor	r22, r22
     a62:	45 e9       	ldi	r20, 0x95	; 149
     a64:	53 e2       	ldi	r21, 0x23	; 35
     a66:	15 dd       	rcall	.-1494   	; 0x492 <memWriteBuff>
		//printf("Writing %u bytes from index %u to 0x%08lx\r\n",_rxIndex, (_rxDataPos & 0xFFFFFF00));
		//Send ack byte;
		udi_cdc_putc(0xFF);
     a68:	8f ef       	ldi	r24, 0xFF	; 255
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	f2 d4       	rcall	.+2532   	; 0x1452 <udi_cdc_putc>
		//printf("Done writing %lu bytes\r\n", _rxDataPos);
		_currentCommand = 0;
     a6e:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <_currentCommand>
		_rxDataPos = 0;
     a72:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <__data_end>
     a76:	10 92 27 21 	sts	0x2127, r1	; 0x802127 <__data_end+0x1>
     a7a:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <__data_end+0x2>
     a7e:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <__data_end+0x3>

		//return;
	}
	
	
}
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	1f 91       	pop	r17
     a88:	0f 91       	pop	r16
     a8a:	ff 90       	pop	r15
     a8c:	ef 90       	pop	r14
     a8e:	df 90       	pop	r13
     a90:	cf 90       	pop	r12
     a92:	08 95       	ret

00000a94 <writeData>:

void writeData(uint8_t bytesRead, uint8_t *bytes)
{
     a94:	cf 92       	push	r12
     a96:	df 92       	push	r13
     a98:	ef 92       	push	r14
     a9a:	ff 92       	push	r15
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	18 2f       	mov	r17, r24
     aa6:	eb 01       	movw	r28, r22
	uint8_t bytesLeft = 0;
		
	if (bytesRead > 3 && _rxDataLen == 0)
     aa8:	84 30       	cpi	r24, 0x04	; 4
     aaa:	08 f4       	brcc	.+2      	; 0xaae <writeData+0x1a>
     aac:	84 c0       	rjmp	.+264    	; 0xbb6 <writeData+0x122>
     aae:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <_rxDataLen>
     ab2:	90 91 2b 21 	lds	r25, 0x212B	; 0x80212b <_rxDataLen+0x1>
     ab6:	a0 91 2c 21 	lds	r26, 0x212C	; 0x80212c <_rxDataLen+0x2>
     aba:	b0 91 2d 21 	lds	r27, 0x212D	; 0x80212d <_rxDataLen+0x3>
     abe:	89 2b       	or	r24, r25
     ac0:	8a 2b       	or	r24, r26
     ac2:	8b 2b       	or	r24, r27
     ac4:	09 f0       	breq	.+2      	; 0xac8 <writeData+0x34>
     ac6:	77 c0       	rjmp	.+238    	; 0xbb6 <writeData+0x122>
	{
		_currentCommand = RX_WRITE_DATA;	//Set the current command
     ac8:	80 e2       	ldi	r24, 0x20	; 32
     aca:	80 93 2f 21 	sts	0x212F, r24	; 0x80212f <_currentCommand>
				
		waitForNotBusy();
     ace:	0b dc       	rcall	.-2026   	; 0x2e6 <waitForNotBusy>
		_rxDataLen = ((uint32_t)bytes[0] << 24) + ((uint32_t)bytes[1] << 16) + ((uint32_t)bytes[2] << 8) + (uint32_t)bytes[3]; //Get the length of the text, first time through,  bytes 0 to 3 should be the 32bit length
     ad0:	88 81       	ld	r24, Y
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	78 2f       	mov	r23, r24
     ada:	66 27       	eor	r22, r22
     adc:	55 27       	eor	r21, r21
     ade:	44 27       	eor	r20, r20
     ae0:	99 81       	ldd	r25, Y+1	; 0x01
     ae2:	89 2f       	mov	r24, r25
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	a0 e0       	ldi	r26, 0x00	; 0
     ae8:	b0 e0       	ldi	r27, 0x00	; 0
     aea:	dc 01       	movw	r26, r24
     aec:	99 27       	eor	r25, r25
     aee:	88 27       	eor	r24, r24
     af0:	84 0f       	add	r24, r20
     af2:	95 1f       	adc	r25, r21
     af4:	a6 1f       	adc	r26, r22
     af6:	b7 1f       	adc	r27, r23
     af8:	2b 81       	ldd	r18, Y+3	; 0x03
     afa:	82 0f       	add	r24, r18
     afc:	91 1d       	adc	r25, r1
     afe:	a1 1d       	adc	r26, r1
     b00:	b1 1d       	adc	r27, r1
     b02:	4a 81       	ldd	r20, Y+2	; 0x02
     b04:	50 e0       	ldi	r21, 0x00	; 0
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	76 2f       	mov	r23, r22
     b0c:	65 2f       	mov	r22, r21
     b0e:	54 2f       	mov	r21, r20
     b10:	44 27       	eor	r20, r20
     b12:	84 0f       	add	r24, r20
     b14:	95 1f       	adc	r25, r21
     b16:	a6 1f       	adc	r26, r22
     b18:	b7 1f       	adc	r27, r23
     b1a:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <_rxDataLen>
     b1e:	90 93 2b 21 	sts	0x212B, r25	; 0x80212b <_rxDataLen+0x1>
     b22:	a0 93 2c 21 	sts	0x212C, r26	; 0x80212c <_rxDataLen+0x2>
     b26:	b0 93 2d 21 	sts	0x212D, r27	; 0x80212d <_rxDataLen+0x3>
		_rxDataPos = 0;
     b2a:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <__data_end>
     b2e:	10 92 27 21 	sts	0x2127, r1	; 0x802127 <__data_end+0x1>
     b32:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <__data_end+0x2>
     b36:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <__data_end+0x3>
		//Erase the number of sectors we will need to store the data
		do
		{
			//_rxDataPos is being used for our address here to erase sectors
			//We initialize our _rxDataPos this way to start our erase at the second sector.
			_rxDataPos += MEM_SECTOR_SIZE;
     b3a:	40 91 26 21 	lds	r20, 0x2126	; 0x802126 <__data_end>
     b3e:	50 91 27 21 	lds	r21, 0x2127	; 0x802127 <__data_end+0x1>
     b42:	60 91 28 21 	lds	r22, 0x2128	; 0x802128 <__data_end+0x2>
     b46:	70 91 29 21 	lds	r23, 0x2129	; 0x802129 <__data_end+0x3>
     b4a:	50 5f       	subi	r21, 0xF0	; 240
     b4c:	6f 4f       	sbci	r22, 0xFF	; 255
     b4e:	7f 4f       	sbci	r23, 0xFF	; 255
     b50:	40 93 26 21 	sts	0x2126, r20	; 0x802126 <__data_end>
     b54:	50 93 27 21 	sts	0x2127, r21	; 0x802127 <__data_end+0x1>
     b58:	60 93 28 21 	sts	0x2128, r22	; 0x802128 <__data_end+0x2>
     b5c:	70 93 29 21 	sts	0x2129, r23	; 0x802129 <__data_end+0x3>
			//printf("Erasing 128K 0x%08lx\r\n", _rxDataPos);
			memEraseSector(_rxDataPos);	//The string is written to the very first sector.
     b60:	60 91 26 21 	lds	r22, 0x2126	; 0x802126 <__data_end>
     b64:	70 91 27 21 	lds	r23, 0x2127	; 0x802127 <__data_end+0x1>
     b68:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <__data_end+0x2>
     b6c:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <__data_end+0x3>
     b70:	cc db       	rcall	.-2152   	; 0x30a <memEraseSector>
			waitForNotBusy();
     b72:	b9 db       	rcall	.-2190   	; 0x2e6 <waitForNotBusy>
					
		} while (_rxDataPos < (_rxDataLen + 4)); // + 4 to include room for the length bytes
     b74:	40 91 2a 21 	lds	r20, 0x212A	; 0x80212a <_rxDataLen>
     b78:	50 91 2b 21 	lds	r21, 0x212B	; 0x80212b <_rxDataLen+0x1>
     b7c:	60 91 2c 21 	lds	r22, 0x212C	; 0x80212c <_rxDataLen+0x2>
     b80:	70 91 2d 21 	lds	r23, 0x212D	; 0x80212d <_rxDataLen+0x3>
     b84:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <__data_end>
     b88:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <__data_end+0x1>
     b8c:	a0 91 28 21 	lds	r26, 0x2128	; 0x802128 <__data_end+0x2>
     b90:	b0 91 29 21 	lds	r27, 0x2129	; 0x802129 <__data_end+0x3>
     b94:	4c 5f       	subi	r20, 0xFC	; 252
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	6f 4f       	sbci	r22, 0xFF	; 255
     b9a:	7f 4f       	sbci	r23, 0xFF	; 255
     b9c:	84 17       	cp	r24, r20
     b9e:	95 07       	cpc	r25, r21
     ba0:	a6 07       	cpc	r26, r22
     ba2:	b7 07       	cpc	r27, r23
     ba4:	50 f2       	brcs	.-108    	; 0xb3a <writeData+0xa6>
				
		//Reset _rxDataPos
		_rxDataPos = 0;
     ba6:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <__data_end>
     baa:	10 92 27 21 	sts	0x2127, r1	; 0x802127 <__data_end+0x1>
     bae:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <__data_end+0x2>
     bb2:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <__data_end+0x3>

				
	}

	//Here we have to split the array of data read between the current memory block and the next one.
	if ((bytesRead + _rxIndex) >= MEM_BLOCK_SIZE)
     bb6:	c1 2e       	mov	r12, r17
     bb8:	d1 2c       	mov	r13, r1
     bba:	80 91 2e 21 	lds	r24, 0x212E	; 0x80212e <_rxIndex>
     bbe:	96 01       	movw	r18, r12
     bc0:	28 0f       	add	r18, r24
     bc2:	31 1d       	adc	r19, r1
     bc4:	2f 3f       	cpi	r18, 0xFF	; 255
     bc6:	31 05       	cpc	r19, r1
     bc8:	a9 f1       	breq	.+106    	; 0xc34 <writeData+0x1a0>
     bca:	a4 f1       	brlt	.+104    	; 0xc34 <writeData+0x1a0>
	{
		//_rxData + _rxIndex is pointer math
		//This should fill our _rxData buffer (which is the same size as a block) so we should write the block now and update the _rxDataPos
		bytesLeft = MEM_BLOCK_SIZE - _rxIndex;
     bcc:	00 91 2e 21 	lds	r16, 0x212E	; 0x80212e <_rxIndex>
     bd0:	01 95       	neg	r16
		memcpy(_rxData + _rxIndex, bytes, bytesLeft);
     bd2:	e0 2e       	mov	r14, r16
     bd4:	f1 2c       	mov	r15, r1
     bd6:	80 91 2e 21 	lds	r24, 0x212E	; 0x80212e <_rxIndex>
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	a7 01       	movw	r20, r14
     bde:	be 01       	movw	r22, r28
     be0:	8b 56       	subi	r24, 0x6B	; 107
     be2:	9c 4d       	sbci	r25, 0xDC	; 220
     be4:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <memcpy>
		_rxIndex += bytesRead; //_rxIndex is 8bit. if _rxIndex = 192, then _rxIndex + 64 would roll over to 0
     be8:	80 91 2e 21 	lds	r24, 0x212E	; 0x80212e <_rxIndex>
     bec:	81 0f       	add	r24, r17
     bee:	80 93 2e 21 	sts	0x212E, r24	; 0x80212e <_rxIndex>
				
		//printf("Writing 256 bytes to 0x%08lx\r\n", (_rxDataPos & 0xFFFFFF00) + MEM_SECTOR_SIZE);
		//We add  MEM_SECTOR_SIZE to our address to offset everything to the second sector
		memWriteBuff((_rxDataPos & 0xFFFFFF00) + MEM_SECTOR_SIZE, _rxData, MEM_BLOCK_SIZE - 1);
     bf2:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <__data_end>
     bf6:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <__data_end+0x1>
     bfa:	a0 91 28 21 	lds	r26, 0x2128	; 0x802128 <__data_end+0x2>
     bfe:	b0 91 29 21 	lds	r27, 0x2129	; 0x802129 <__data_end+0x3>
     c02:	88 27       	eor	r24, r24
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	70 5f       	subi	r23, 0xF0	; 240
     c0a:	8f 4f       	sbci	r24, 0xFF	; 255
     c0c:	9f 4f       	sbci	r25, 0xFF	; 255
     c0e:	2f ef       	ldi	r18, 0xFF	; 255
     c10:	45 e9       	ldi	r20, 0x95	; 149
     c12:	53 e2       	ldi	r21, 0x23	; 35
     c14:	3e dc       	rcall	.-1924   	; 0x492 <memWriteBuff>
				
				
		//Because _rxIndex would have rolled over to 0 if we were on a factor of 256, and we are already here because the current amount of bytes read + the current index is greater or equal to our Block size
		if (_rxIndex != 0)
     c16:	80 91 2e 21 	lds	r24, 0x212E	; 0x80212e <_rxIndex>
     c1a:	88 23       	and	r24, r24
     c1c:	d1 f0       	breq	.+52     	; 0xc52 <writeData+0x1be>
		{
			//We are copying what is left in bytes and bytes + bytesLeft is pointer math
			memcpy(_rxData, bytes + bytesLeft, bytesRead - bytesLeft);
     c1e:	a6 01       	movw	r20, r12
     c20:	40 1b       	sub	r20, r16
     c22:	51 09       	sbc	r21, r1
     c24:	be 01       	movw	r22, r28
     c26:	6e 0d       	add	r22, r14
     c28:	7f 1d       	adc	r23, r15
     c2a:	85 e9       	ldi	r24, 0x95	; 149
     c2c:	93 e2       	ldi	r25, 0x23	; 35
     c2e:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <memcpy>
     c32:	0f c0       	rjmp	.+30     	; 0xc52 <writeData+0x1be>
		}
				
	}
	else
	{
		memcpy(_rxData + _rxIndex, bytes, bytesRead);
     c34:	80 91 2e 21 	lds	r24, 0x212E	; 0x80212e <_rxIndex>
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	41 2f       	mov	r20, r17
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	be 01       	movw	r22, r28
     c40:	8b 56       	subi	r24, 0x6B	; 107
     c42:	9c 4d       	sbci	r25, 0xDC	; 220
     c44:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <memcpy>
		_rxIndex += bytesRead;
     c48:	80 91 2e 21 	lds	r24, 0x212E	; 0x80212e <_rxIndex>
     c4c:	81 0f       	add	r24, r17
     c4e:	80 93 2e 21 	sts	0x212E, r24	; 0x80212e <_rxIndex>
	}
			
	_rxDataPos += bytesRead;
     c52:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <__data_end>
     c56:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <__data_end+0x1>
     c5a:	a0 91 28 21 	lds	r26, 0x2128	; 0x802128 <__data_end+0x2>
     c5e:	b0 91 29 21 	lds	r27, 0x2129	; 0x802129 <__data_end+0x3>
     c62:	81 0f       	add	r24, r17
     c64:	91 1d       	adc	r25, r1
     c66:	a1 1d       	adc	r26, r1
     c68:	b1 1d       	adc	r27, r1
     c6a:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <__data_end>
     c6e:	90 93 27 21 	sts	0x2127, r25	; 0x802127 <__data_end+0x1>
     c72:	a0 93 28 21 	sts	0x2128, r26	; 0x802128 <__data_end+0x2>
     c76:	b0 93 29 21 	sts	0x2129, r27	; 0x802129 <__data_end+0x3>
	//printf("Pos %lu\r\n", _rxDataPos);
			
	//We have the whole message so just write it and be done with the command. Subtract 4 because the len are at the beginning
	if ((_rxDataPos - 4) == _rxDataLen)
     c7a:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <__data_end>
     c7e:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <__data_end+0x1>
     c82:	a0 91 28 21 	lds	r26, 0x2128	; 0x802128 <__data_end+0x2>
     c86:	b0 91 29 21 	lds	r27, 0x2129	; 0x802129 <__data_end+0x3>
     c8a:	40 91 2a 21 	lds	r20, 0x212A	; 0x80212a <_rxDataLen>
     c8e:	50 91 2b 21 	lds	r21, 0x212B	; 0x80212b <_rxDataLen+0x1>
     c92:	60 91 2c 21 	lds	r22, 0x212C	; 0x80212c <_rxDataLen+0x2>
     c96:	70 91 2d 21 	lds	r23, 0x212D	; 0x80212d <_rxDataLen+0x3>
     c9a:	04 97       	sbiw	r24, 0x04	; 4
     c9c:	a1 09       	sbc	r26, r1
     c9e:	b1 09       	sbc	r27, r1
     ca0:	84 17       	cp	r24, r20
     ca2:	95 07       	cpc	r25, r21
     ca4:	a6 07       	cpc	r26, r22
     ca6:	b7 07       	cpc	r27, r23
     ca8:	01 f5       	brne	.+64     	; 0xcea <writeData+0x256>
	{
		//Write the last bit of data
		//We add  MEM_SECTOR_SIZE to our address to offset everything to the second sector
		memWriteBuff((_rxDataPos & 0xFFFFFF00) + MEM_SECTOR_SIZE, _rxData, _rxIndex);
     caa:	20 91 2e 21 	lds	r18, 0x212E	; 0x80212e <_rxIndex>
     cae:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <__data_end>
     cb2:	90 91 27 21 	lds	r25, 0x2127	; 0x802127 <__data_end+0x1>
     cb6:	a0 91 28 21 	lds	r26, 0x2128	; 0x802128 <__data_end+0x2>
     cba:	b0 91 29 21 	lds	r27, 0x2129	; 0x802129 <__data_end+0x3>
     cbe:	88 27       	eor	r24, r24
     cc0:	bc 01       	movw	r22, r24
     cc2:	cd 01       	movw	r24, r26
     cc4:	70 5f       	subi	r23, 0xF0	; 240
     cc6:	8f 4f       	sbci	r24, 0xFF	; 255
     cc8:	9f 4f       	sbci	r25, 0xFF	; 255
     cca:	45 e9       	ldi	r20, 0x95	; 149
     ccc:	53 e2       	ldi	r21, 0x23	; 35
     cce:	e1 db       	rcall	.-2110   	; 0x492 <memWriteBuff>
		//printf("Writing %u bytes from index %u to 0x%08x\r\n",_rxIndex, (_rxDataPos & 0xFFFFFF00));
		//Send ack byte;
		udi_cdc_putc(0xFF);
     cd0:	8f ef       	ldi	r24, 0xFF	; 255
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	be d3       	rcall	.+1916   	; 0x1452 <udi_cdc_putc>
		//printf("Done writing %lu bytes\r\n", _rxDataPos);
		_currentCommand = 0;
     cd6:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <_currentCommand>
		_rxDataPos = 0;
     cda:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <__data_end>
     cde:	10 92 27 21 	sts	0x2127, r1	; 0x802127 <__data_end+0x1>
     ce2:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <__data_end+0x2>
     ce6:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <__data_end+0x3>

		//return;
	}
				
}
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	df 90       	pop	r13
     cf8:	cf 90       	pop	r12
     cfa:	08 95       	ret

00000cfc <my_callback_rx_notify>:

void my_callback_rx_notify(uint8_t port)
{
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	cd b7       	in	r28, 0x3d	; 61
     d02:	de b7       	in	r29, 0x3e	; 62
     d04:	c0 54       	subi	r28, 0x40	; 64
     d06:	d1 09       	sbc	r29, r1
     d08:	cd bf       	out	0x3d, r28	; 61
     d0a:	de bf       	out	0x3e, r29	; 62
	//return;
	uint8_t bytesRead = 0;
	uint8_t bytes[UDI_CDC_COMM_EP_SIZE]; //UDI_CDC_COMM_EP_SIZE is the max size of the number of bytes that will be received at once.
	uint8_t bytesLeft = 0;
	
	if (!_currentCommand)
     d0c:	80 91 2f 21 	lds	r24, 0x212F	; 0x80212f <_currentCommand>
     d10:	81 11       	cpse	r24, r1
     d12:	1a c0       	rjmp	.+52     	; 0xd48 <my_callback_rx_notify+0x4c>
	{
		udi_cdc_read_no_polling(bytes, 1);
     d14:	61 e0       	ldi	r22, 0x01	; 1
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	ce 01       	movw	r24, r28
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	b3 d2       	rcall	.+1382   	; 0x1284 <udi_cdc_read_no_polling>
		_currentCommand =  bytes[0];
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	80 93 2f 21 	sts	0x212F, r24	; 0x80212f <_currentCommand>
		_rxDataLen = 0;
     d24:	10 92 2a 21 	sts	0x212A, r1	; 0x80212a <_rxDataLen>
     d28:	10 92 2b 21 	sts	0x212B, r1	; 0x80212b <_rxDataLen+0x1>
     d2c:	10 92 2c 21 	sts	0x212C, r1	; 0x80212c <_rxDataLen+0x2>
     d30:	10 92 2d 21 	sts	0x212D, r1	; 0x80212d <_rxDataLen+0x3>
		_rxDataPos = 0;	
     d34:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <__data_end>
     d38:	10 92 27 21 	sts	0x2127, r1	; 0x802127 <__data_end+0x1>
     d3c:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <__data_end+0x2>
     d40:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <__data_end+0x3>
		_rxIndex = 0;
     d44:	10 92 2e 21 	sts	0x212E, r1	; 0x80212e <_rxIndex>
		//printf("Cmd: 0x%02x\r\n", _currentCommand);
	}
	
	bytesRead = udi_cdc_read_no_polling(bytes, UDI_CDC_COMM_EP_SIZE);
     d48:	60 e4       	ldi	r22, 0x40	; 64
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	ce 01       	movw	r24, r28
     d4e:	01 96       	adiw	r24, 0x01	; 1
     d50:	99 d2       	rcall	.+1330   	; 0x1284 <udi_cdc_read_no_polling>
	//printf("RX Received %u bytes\r\n", bytesRead);

	switch(_currentCommand)
     d52:	90 91 2f 21 	lds	r25, 0x212F	; 0x80212f <_currentCommand>
     d56:	90 31       	cpi	r25, 0x10	; 16
     d58:	19 f0       	breq	.+6      	; 0xd60 <my_callback_rx_notify+0x64>
     d5a:	90 32       	cpi	r25, 0x20	; 32
     d5c:	31 f0       	breq	.+12     	; 0xd6a <my_callback_rx_notify+0x6e>
     d5e:	09 c0       	rjmp	.+18     	; 0xd72 <my_callback_rx_notify+0x76>
		//case RX_READ_TEXT:
		//case RX_READ_DATA:
		//case RX_ERASE_ALL:

		case RX_WRITE_TEXT:
			writeText(bytesRead, bytes);
     d60:	be 01       	movw	r22, r28
     d62:	6f 5f       	subi	r22, 0xFF	; 255
     d64:	7f 4f       	sbci	r23, 0xFF	; 255
     d66:	c3 dd       	rcall	.-1146   	; 0x8ee <writeText>
			break;
     d68:	04 c0       	rjmp	.+8      	; 0xd72 <my_callback_rx_notify+0x76>
		case RX_WRITE_DATA:
			writeData(bytesRead, bytes);
     d6a:	be 01       	movw	r22, r28
     d6c:	6f 5f       	subi	r22, 0xFF	; 255
     d6e:	7f 4f       	sbci	r23, 0xFF	; 255
     d70:	91 de       	rcall	.-734    	; 0xa94 <writeData>
			break;
	}

}
     d72:	c0 5c       	subi	r28, 0xC0	; 192
     d74:	df 4f       	sbci	r29, 0xFF	; 255
     d76:	cd bf       	out	0x3d, r28	; 61
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	08 95       	ret

00000d80 <my_callback_tx_empty_notify>:

void my_callback_tx_empty_notify(uint8_t port)
{
	_txEmpty = 0xFF;
     d80:	8f ef       	ldi	r24, 0xFF	; 255
     d82:	80 93 95 24 	sts	0x2495, r24	; 0x802495 <_txEmpty>
     d86:	08 95       	ret

00000d88 <main>:


int main(void)
{

	CS_DISABLE();
     d88:	80 e1       	ldi	r24, 0x10	; 16
     d8a:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	
	cli();
     d8e:	f8 94       	cli

	sysclk_init();
     d90:	0e 94 33 16 	call	0x2c66	; 0x2c66 <sysclk_init>
	udc_start();
     d94:	bb d4       	rcall	.+2422   	; 0x170c <udc_start>
	initSPI();
     d96:	67 da       	rcall	.-2866   	; 0x266 <initSPI>
	initDebugUART();
     d98:	74 da       	rcall	.-2840   	; 0x282 <initDebugUART>
	
	stdout = &mystdout;
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e2       	ldi	r25, 0x20	; 32
     d9e:	80 93 ae 24 	sts	0x24AE, r24	; 0x8024ae <__iob+0x2>
     da2:	90 93 af 24 	sts	0x24AF, r25	; 0x8024af <__iob+0x3>
	
	irq_initialize_vectors();
     da6:	87 e0       	ldi	r24, 0x07	; 7
     da8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>


	sei();
     dac:	78 94       	sei
	//printf("Started\r\n");


	while(1)
	{
		if (_runTest)
     dae:	80 91 30 21 	lds	r24, 0x2130	; 0x802130 <_runTest>
     db2:	88 23       	and	r24, r24
     db4:	19 f0       	breq	.+6      	; 0xdbc <main+0x34>
		{
			TESTWriteMem();
     db6:	a1 db       	rcall	.-2238   	; 0x4fa <TESTWriteMem>
			_runTest = 0x00;
     db8:	10 92 30 21 	sts	0x2130, r1	; 0x802130 <_runTest>
		}
		
		switch(_currentCommand)
     dbc:	80 91 2f 21 	lds	r24, 0x212F	; 0x80212f <_currentCommand>
     dc0:	81 36       	cpi	r24, 0x61	; 97
     dc2:	a1 f0       	breq	.+40     	; 0xdec <main+0x64>
     dc4:	58 f4       	brcc	.+22     	; 0xddc <main+0x54>
     dc6:	81 31       	cpi	r24, 0x11	; 17
     dc8:	e9 f0       	breq	.+58     	; 0xe04 <main+0x7c>
     dca:	18 f4       	brcc	.+6      	; 0xdd2 <main+0x4a>
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	b1 f0       	breq	.+44     	; 0xdfc <main+0x74>
     dd0:	ee cf       	rjmp	.-36     	; 0xdae <main+0x26>
     dd2:	81 32       	cpi	r24, 0x21	; 33
     dd4:	d9 f0       	breq	.+54     	; 0xe0c <main+0x84>
     dd6:	80 33       	cpi	r24, 0x30	; 48
     dd8:	e9 f0       	breq	.+58     	; 0xe14 <main+0x8c>
     dda:	e9 cf       	rjmp	.-46     	; 0xdae <main+0x26>
     ddc:	83 36       	cpi	r24, 0x63	; 99
     dde:	91 f0       	breq	.+36     	; 0xe04 <main+0x7c>
     de0:	68 f0       	brcs	.+26     	; 0xdfc <main+0x74>
     de2:	84 36       	cpi	r24, 0x64	; 100
     de4:	99 f0       	breq	.+38     	; 0xe0c <main+0x84>
     de6:	85 36       	cpi	r24, 0x65	; 101
     de8:	a9 f0       	breq	.+42     	; 0xe14 <main+0x8c>
     dea:	e1 cf       	rjmp	.-62     	; 0xdae <main+0x26>
		{
			case 'a':
				memRead256ToStdOut(0x00001000);
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	70 e1       	ldi	r23, 0x10	; 16
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	a8 da       	rcall	.-2736   	; 0x346 <memRead256ToStdOut>
				_currentCommand = 0;
     df6:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <_currentCommand>
				break;
     dfa:	d9 cf       	rjmp	.-78     	; 0xdae <main+0x26>
			case RX_READ_ID:
			case 'b':
				returnChipId();
     dfc:	ad db       	rcall	.-2214   	; 0x558 <returnChipId>
				_currentCommand = 0;
     dfe:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <_currentCommand>
				//printf("chip id returned. _currentCommand reset\r\n");
				break;
     e02:	d5 cf       	rjmp	.-86     	; 0xdae <main+0x26>
			case RX_READ_TEXT:
			case 'c':			
				readText();
     e04:	d8 db       	rcall	.-2128   	; 0x5b6 <readText>
				//printf("\r\nDone Reading Text\r\n");
				_currentCommand = 0;
     e06:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <_currentCommand>
				break;
     e0a:	d1 cf       	rjmp	.-94     	; 0xdae <main+0x26>
			case RX_READ_DATA:
			case 'd':			
				readData();
     e0c:	8c dc       	rcall	.-1768   	; 0x726 <readData>
				//printf("\r\nDone Reading Data\r\n");
				_currentCommand = 0;
     e0e:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <_currentCommand>
				break;		
     e12:	cd cf       	rjmp	.-102    	; 0xdae <main+0x26>
			case RX_ERASE_ALL:
			case 'e':			
				eraseChip();
     e14:	bb db       	rcall	.-2186   	; 0x58c <eraseChip>
				_currentCommand = 0;
     e16:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <_currentCommand>
				break;
     e1a:	c9 cf       	rjmp	.-110    	; 0xdae <main+0x26>

00000e1c <udi_cdc_comm_disable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
     e1c:	80 91 46 22 	lds	r24, 0x2246	; 0x802246 <udi_cdc_nb_comm_enabled>
     e20:	81 50       	subi	r24, 0x01	; 1
     e22:	80 93 46 22 	sts	0x2246, r24	; 0x802246 <udi_cdc_nb_comm_enabled>
     e26:	08 95       	ret

00000e28 <udi_cdc_data_setup>:
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	08 95       	ret

00000e2c <udi_cdc_getsetting>:
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	08 95       	ret

00000e30 <udi_cdc_comm_setup>:
     e30:	80 91 96 24 	lds	r24, 0x2496	; 0x802496 <udd_g_ctrlreq>
     e34:	88 23       	and	r24, r24
     e36:	cc f4       	brge	.+50     	; 0xe6a <udi_cdc_comm_setup+0x3a>
     e38:	80 76       	andi	r24, 0x60	; 96
     e3a:	80 32       	cpi	r24, 0x20	; 32
     e3c:	b9 f5       	brne	.+110    	; 0xeac <udi_cdc_comm_setup+0x7c>
     e3e:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <udd_g_ctrlreq+0x1>
     e42:	81 32       	cpi	r24, 0x21	; 33
     e44:	a9 f5       	brne	.+106    	; 0xeb0 <udi_cdc_comm_setup+0x80>
     e46:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <udd_g_ctrlreq+0x6>
     e4a:	90 91 9d 24 	lds	r25, 0x249D	; 0x80249d <udd_g_ctrlreq+0x7>
     e4e:	07 97       	sbiw	r24, 0x07	; 7
     e50:	89 f5       	brne	.+98     	; 0xeb4 <udi_cdc_comm_setup+0x84>
     e52:	e6 e9       	ldi	r30, 0x96	; 150
     e54:	f4 e2       	ldi	r31, 0x24	; 36
     e56:	84 e5       	ldi	r24, 0x54	; 84
     e58:	92 e2       	ldi	r25, 0x22	; 34
     e5a:	80 87       	std	Z+8, r24	; 0x08
     e5c:	91 87       	std	Z+9, r25	; 0x09
     e5e:	87 e0       	ldi	r24, 0x07	; 7
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	82 87       	std	Z+10, r24	; 0x0a
     e64:	93 87       	std	Z+11, r25	; 0x0b
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	08 95       	ret
     e6a:	80 76       	andi	r24, 0x60	; 96
     e6c:	80 32       	cpi	r24, 0x20	; 32
     e6e:	21 f5       	brne	.+72     	; 0xeb8 <udi_cdc_comm_setup+0x88>
     e70:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <udd_g_ctrlreq+0x1>
     e74:	80 32       	cpi	r24, 0x20	; 32
     e76:	21 f0       	breq	.+8      	; 0xe80 <udi_cdc_comm_setup+0x50>
     e78:	82 32       	cpi	r24, 0x22	; 34
     e7a:	01 f1       	breq	.+64     	; 0xebc <udi_cdc_comm_setup+0x8c>
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	08 95       	ret
     e80:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <udd_g_ctrlreq+0x6>
     e84:	90 91 9d 24 	lds	r25, 0x249D	; 0x80249d <udd_g_ctrlreq+0x7>
     e88:	07 97       	sbiw	r24, 0x07	; 7
     e8a:	d1 f4       	brne	.+52     	; 0xec0 <udi_cdc_comm_setup+0x90>
     e8c:	e6 e9       	ldi	r30, 0x96	; 150
     e8e:	f4 e2       	ldi	r31, 0x24	; 36
     e90:	82 e6       	ldi	r24, 0x62	; 98
     e92:	97 e0       	ldi	r25, 0x07	; 7
     e94:	84 87       	std	Z+12, r24	; 0x0c
     e96:	95 87       	std	Z+13, r25	; 0x0d
     e98:	84 e5       	ldi	r24, 0x54	; 84
     e9a:	92 e2       	ldi	r25, 0x22	; 34
     e9c:	80 87       	std	Z+8, r24	; 0x08
     e9e:	91 87       	std	Z+9, r25	; 0x09
     ea0:	87 e0       	ldi	r24, 0x07	; 7
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	82 87       	std	Z+10, r24	; 0x0a
     ea6:	93 87       	std	Z+11, r25	; 0x0b
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	08 95       	ret
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	08 95       	ret
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	08 95       	ret
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	08 95       	ret
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	08 95       	ret
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	08 95       	ret
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	08 95       	ret

00000ec4 <udi_cdc_line_coding_received>:
     ec4:	08 95       	ret

00000ec6 <udi_cdc_comm_enable>:
     ec6:	10 92 46 22 	sts	0x2246, r1	; 0x802246 <udi_cdc_nb_comm_enabled>
     eca:	10 92 52 22 	sts	0x2252, r1	; 0x802252 <udi_cdc_state>
     ece:	10 92 53 22 	sts	0x2253, r1	; 0x802253 <udi_cdc_state+0x1>
     ed2:	e8 e4       	ldi	r30, 0x48	; 72
     ed4:	f2 e2       	ldi	r31, 0x22	; 34
     ed6:	81 ea       	ldi	r24, 0xA1	; 161
     ed8:	80 83       	st	Z, r24
     eda:	80 e2       	ldi	r24, 0x20	; 32
     edc:	81 83       	std	Z+1, r24	; 0x01
     ede:	12 82       	std	Z+2, r1	; 0x02
     ee0:	13 82       	std	Z+3, r1	; 0x03
     ee2:	14 82       	std	Z+4, r1	; 0x04
     ee4:	15 82       	std	Z+5, r1	; 0x05
     ee6:	82 e0       	ldi	r24, 0x02	; 2
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	86 83       	std	Z+6, r24	; 0x06
     eec:	97 83       	std	Z+7, r25	; 0x07
     eee:	10 86       	std	Z+8, r1	; 0x08
     ef0:	11 86       	std	Z+9, r1	; 0x09
     ef2:	e4 e5       	ldi	r30, 0x54	; 84
     ef4:	f2 e2       	ldi	r31, 0x22	; 34
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	92 ec       	ldi	r25, 0xC2	; 194
     efa:	a1 e0       	ldi	r26, 0x01	; 1
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	80 83       	st	Z, r24
     f00:	91 83       	std	Z+1, r25	; 0x01
     f02:	a2 83       	std	Z+2, r26	; 0x02
     f04:	b3 83       	std	Z+3, r27	; 0x03
     f06:	14 82       	std	Z+4, r1	; 0x04
     f08:	15 82       	std	Z+5, r1	; 0x05
     f0a:	88 e0       	ldi	r24, 0x08	; 8
     f0c:	86 83       	std	Z+6, r24	; 0x06
     f0e:	ec dc       	rcall	.-1576   	; 0x8e8 <my_callback_cdc_enable>
     f10:	88 23       	and	r24, r24
     f12:	29 f0       	breq	.+10     	; 0xf1e <udi_cdc_comm_enable+0x58>
     f14:	90 91 46 22 	lds	r25, 0x2246	; 0x802246 <udi_cdc_nb_comm_enabled>
     f18:	9f 5f       	subi	r25, 0xFF	; 255
     f1a:	90 93 46 22 	sts	0x2246, r25	; 0x802246 <udi_cdc_nb_comm_enabled>
     f1e:	08 95       	ret

00000f20 <udi_cdc_tx_send>:
     f20:	ff 92       	push	r15
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	1f 92       	push	r1
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	80 91 34 21 	lds	r24, 0x2134	; 0x802134 <udi_cdc_tx_trans_ongoing>
     f34:	81 11       	cpse	r24, r1
     f36:	9e c0       	rjmp	.+316    	; 0x1074 <udi_cdc_tx_send+0x154>
     f38:	0e 94 2e 12 	call	0x245c	; 0x245c <udd_is_high_speed>
     f3c:	88 23       	and	r24, r24
     f3e:	51 f0       	breq	.+20     	; 0xf54 <udi_cdc_tx_send+0x34>
     f40:	00 91 35 21 	lds	r16, 0x2135	; 0x802135 <udi_cdc_tx_sof_num>
     f44:	10 91 36 21 	lds	r17, 0x2136	; 0x802136 <udi_cdc_tx_sof_num+0x1>
     f48:	0e 94 3b 12 	call	0x2476	; 0x2476 <udd_get_micro_frame_number>
     f4c:	08 17       	cp	r16, r24
     f4e:	19 07       	cpc	r17, r25
     f50:	59 f4       	brne	.+22     	; 0xf68 <udi_cdc_tx_send+0x48>
     f52:	90 c0       	rjmp	.+288    	; 0x1074 <udi_cdc_tx_send+0x154>
     f54:	00 91 35 21 	lds	r16, 0x2135	; 0x802135 <udi_cdc_tx_sof_num>
     f58:	10 91 36 21 	lds	r17, 0x2136	; 0x802136 <udi_cdc_tx_sof_num+0x1>
     f5c:	0e 94 36 12 	call	0x246c	; 0x246c <udd_get_frame_number>
     f60:	08 17       	cp	r16, r24
     f62:	19 07       	cpc	r17, r25
     f64:	09 f4       	brne	.+2      	; 0xf68 <udi_cdc_tx_send+0x48>
     f66:	86 c0       	rjmp	.+268    	; 0x1074 <udi_cdc_tx_send+0x154>
     f68:	8f b7       	in	r24, 0x3f	; 63
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	f8 94       	cli
     f6e:	19 81       	ldd	r17, Y+1	; 0x01
     f70:	00 91 37 21 	lds	r16, 0x2137	; 0x802137 <udi_cdc_tx_buf_sel>
     f74:	e0 2f       	mov	r30, r16
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	ee 0f       	add	r30, r30
     f7a:	ff 1f       	adc	r31, r31
     f7c:	e8 5c       	subi	r30, 0xC8	; 200
     f7e:	fe 4d       	sbci	r31, 0xDE	; 222
     f80:	80 81       	ld	r24, Z
     f82:	91 81       	ldd	r25, Z+1	; 0x01
     f84:	89 2b       	or	r24, r25
     f86:	09 f5       	brne	.+66     	; 0xfca <udi_cdc_tx_send+0xaa>
     f88:	80 91 31 21 	lds	r24, 0x2131	; 0x802131 <sof_zlp_counter.4973>
     f8c:	90 91 32 21 	lds	r25, 0x2132	; 0x802132 <sof_zlp_counter.4973+0x1>
     f90:	01 96       	adiw	r24, 0x01	; 1
     f92:	80 93 31 21 	sts	0x2131, r24	; 0x802131 <sof_zlp_counter.4973>
     f96:	90 93 32 21 	sts	0x2132, r25	; 0x802132 <sof_zlp_counter.4973+0x1>
     f9a:	0e 94 2e 12 	call	0x245c	; 0x245c <udd_is_high_speed>
     f9e:	81 11       	cpse	r24, r1
     fa0:	07 c0       	rjmp	.+14     	; 0xfb0 <udi_cdc_tx_send+0x90>
     fa2:	80 91 31 21 	lds	r24, 0x2131	; 0x802131 <sof_zlp_counter.4973>
     fa6:	90 91 32 21 	lds	r25, 0x2132	; 0x802132 <sof_zlp_counter.4973+0x1>
     faa:	84 36       	cpi	r24, 0x64	; 100
     fac:	91 05       	cpc	r25, r1
     fae:	58 f0       	brcs	.+22     	; 0xfc6 <udi_cdc_tx_send+0xa6>
     fb0:	0e 94 2e 12 	call	0x245c	; 0x245c <udd_is_high_speed>
     fb4:	88 23       	and	r24, r24
     fb6:	49 f0       	breq	.+18     	; 0xfca <udi_cdc_tx_send+0xaa>
     fb8:	80 91 31 21 	lds	r24, 0x2131	; 0x802131 <sof_zlp_counter.4973>
     fbc:	90 91 32 21 	lds	r25, 0x2132	; 0x802132 <sof_zlp_counter.4973+0x1>
     fc0:	80 32       	cpi	r24, 0x20	; 32
     fc2:	93 40       	sbci	r25, 0x03	; 3
     fc4:	10 f4       	brcc	.+4      	; 0xfca <udi_cdc_tx_send+0xaa>
     fc6:	1f bf       	out	0x3f, r17	; 63
     fc8:	55 c0       	rjmp	.+170    	; 0x1074 <udi_cdc_tx_send+0x154>
     fca:	10 92 31 21 	sts	0x2131, r1	; 0x802131 <sof_zlp_counter.4973>
     fce:	10 92 32 21 	sts	0x2132, r1	; 0x802132 <sof_zlp_counter.4973+0x1>
     fd2:	80 91 33 21 	lds	r24, 0x2133	; 0x802133 <udi_cdc_tx_both_buf_to_send>
     fd6:	81 11       	cpse	r24, r1
     fd8:	06 c0       	rjmp	.+12     	; 0xfe6 <udi_cdc_tx_send+0xc6>
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	01 11       	cpse	r16, r1
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	80 93 37 21 	sts	0x2137, r24	; 0x802137 <udi_cdc_tx_buf_sel>
     fe4:	04 c0       	rjmp	.+8      	; 0xfee <udi_cdc_tx_send+0xce>
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	01 11       	cpse	r16, r1
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	08 2f       	mov	r16, r24
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	80 93 34 21 	sts	0x2134, r24	; 0x802134 <udi_cdc_tx_trans_ongoing>
     ff4:	1f bf       	out	0x3f, r17	; 63
     ff6:	10 e0       	ldi	r17, 0x00	; 0
     ff8:	f8 01       	movw	r30, r16
     ffa:	ee 0f       	add	r30, r30
     ffc:	ff 1f       	adc	r31, r31
     ffe:	e8 5c       	subi	r30, 0xC8	; 200
    1000:	fe 4d       	sbci	r31, 0xDE	; 222
    1002:	ff 24       	eor	r15, r15
    1004:	f3 94       	inc	r15
    1006:	80 81       	ld	r24, Z
    1008:	91 81       	ldd	r25, Z+1	; 0x01
    100a:	80 34       	cpi	r24, 0x40	; 64
    100c:	91 05       	cpc	r25, r1
    100e:	09 f4       	brne	.+2      	; 0x1012 <udi_cdc_tx_send+0xf2>
    1010:	f1 2c       	mov	r15, r1
    1012:	ff 20       	and	r15, r15
    1014:	91 f0       	breq	.+36     	; 0x103a <udi_cdc_tx_send+0x11a>
    1016:	0e 94 2e 12 	call	0x245c	; 0x245c <udd_is_high_speed>
    101a:	88 23       	and	r24, r24
    101c:	39 f0       	breq	.+14     	; 0x102c <udi_cdc_tx_send+0x10c>
    101e:	0e 94 3b 12 	call	0x2476	; 0x2476 <udd_get_micro_frame_number>
    1022:	80 93 35 21 	sts	0x2135, r24	; 0x802135 <udi_cdc_tx_sof_num>
    1026:	90 93 36 21 	sts	0x2136, r25	; 0x802136 <udi_cdc_tx_sof_num+0x1>
    102a:	0b c0       	rjmp	.+22     	; 0x1042 <udi_cdc_tx_send+0x122>
    102c:	0e 94 36 12 	call	0x246c	; 0x246c <udd_get_frame_number>
    1030:	80 93 35 21 	sts	0x2135, r24	; 0x802135 <udi_cdc_tx_sof_num>
    1034:	90 93 36 21 	sts	0x2136, r25	; 0x802136 <udi_cdc_tx_sof_num+0x1>
    1038:	04 c0       	rjmp	.+8      	; 0x1042 <udi_cdc_tx_send+0x122>
    103a:	10 92 35 21 	sts	0x2135, r1	; 0x802135 <udi_cdc_tx_sof_num>
    103e:	10 92 36 21 	sts	0x2136, r1	; 0x802136 <udi_cdc_tx_sof_num+0x1>
    1042:	f8 01       	movw	r30, r16
    1044:	ee 0f       	add	r30, r30
    1046:	ff 1f       	adc	r31, r31
    1048:	e8 5c       	subi	r30, 0xC8	; 200
    104a:	fe 4d       	sbci	r31, 0xDE	; 222
    104c:	20 81       	ld	r18, Z
    104e:	31 81       	ldd	r19, Z+1	; 0x01
    1050:	a8 01       	movw	r20, r16
    1052:	00 24       	eor	r0, r0
    1054:	56 95       	lsr	r21
    1056:	47 95       	ror	r20
    1058:	07 94       	ror	r0
    105a:	56 95       	lsr	r21
    105c:	47 95       	ror	r20
    105e:	07 94       	ror	r0
    1060:	54 2f       	mov	r21, r20
    1062:	40 2d       	mov	r20, r0
    1064:	44 5c       	subi	r20, 0xC4	; 196
    1066:	5e 4d       	sbci	r21, 0xDE	; 222
    1068:	04 e4       	ldi	r16, 0x44	; 68
    106a:	18 e0       	ldi	r17, 0x08	; 8
    106c:	6f 2d       	mov	r22, r15
    106e:	81 e8       	ldi	r24, 0x81	; 129
    1070:	0e 94 1f 13 	call	0x263e	; 0x263e <udd_ep_run>
    1074:	0f 90       	pop	r0
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	ff 90       	pop	r15
    1080:	08 95       	ret

00001082 <udi_cdc_data_sof_notify>:
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	4d cf       	rjmp	.-358    	; 0xf20 <udi_cdc_tx_send>
    1086:	08 95       	ret

00001088 <udi_cdc_data_sent>:
    1088:	81 11       	cpse	r24, r1
    108a:	19 c0       	rjmp	.+50     	; 0x10be <udi_cdc_data_sent+0x36>
    108c:	20 91 37 21 	lds	r18, 0x2137	; 0x802137 <udi_cdc_tx_buf_sel>
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	22 23       	and	r18, r18
    1096:	11 f0       	breq	.+4      	; 0x109c <udi_cdc_data_sent+0x14>
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	fc 01       	movw	r30, r24
    10a2:	e8 5c       	subi	r30, 0xC8	; 200
    10a4:	fe 4d       	sbci	r31, 0xDE	; 222
    10a6:	10 82       	st	Z, r1
    10a8:	11 82       	std	Z+1, r1	; 0x01
    10aa:	10 92 33 21 	sts	0x2133, r1	; 0x802133 <udi_cdc_tx_both_buf_to_send>
    10ae:	10 92 34 21 	sts	0x2134, r1	; 0x802134 <udi_cdc_tx_trans_ongoing>
    10b2:	67 2b       	or	r22, r23
    10b4:	11 f0       	breq	.+4      	; 0x10ba <udi_cdc_data_sent+0x32>
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	63 de       	rcall	.-826    	; 0xd80 <my_callback_tx_empty_notify>
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	31 cf       	rjmp	.-414    	; 0xf20 <udi_cdc_tx_send>
    10be:	08 95       	ret

000010c0 <udi_cdc_data_disable>:
    10c0:	80 91 45 22 	lds	r24, 0x2245	; 0x802245 <udi_cdc_nb_data_enabled>
    10c4:	81 50       	subi	r24, 0x01	; 1
    10c6:	80 93 45 22 	sts	0x2245, r24	; 0x802245 <udi_cdc_nb_data_enabled>
    10ca:	80 91 45 22 	lds	r24, 0x2245	; 0x802245 <udi_cdc_nb_data_enabled>
    10ce:	0e dc       	rcall	.-2020   	; 0x8ec <my_callback_cdc_disable>
    10d0:	10 92 44 22 	sts	0x2244, r1	; 0x802244 <udi_cdc_data_running>
    10d4:	08 95       	ret

000010d6 <udi_cdc_multi_get_nb_received_data>:
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	1f 92       	push	r1
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	8f b7       	in	r24, 0x3f	; 63
    10e2:	89 83       	std	Y+1, r24	; 0x01
    10e4:	f8 94       	cli
    10e6:	49 81       	ldd	r20, Y+1	; 0x01
    10e8:	20 91 bd 21 	lds	r18, 0x21BD	; 0x8021bd <udi_cdc_rx_pos>
    10ec:	30 91 be 21 	lds	r19, 0x21BE	; 0x8021be <udi_cdc_rx_pos+0x1>
    10f0:	e0 91 bf 21 	lds	r30, 0x21BF	; 0x8021bf <udi_cdc_rx_buf_sel>
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	ee 0f       	add	r30, r30
    10f8:	ff 1f       	adc	r31, r31
    10fa:	e0 54       	subi	r30, 0x40	; 64
    10fc:	fe 4d       	sbci	r31, 0xDE	; 222
    10fe:	80 81       	ld	r24, Z
    1100:	91 81       	ldd	r25, Z+1	; 0x01
    1102:	4f bf       	out	0x3f, r20	; 63
    1104:	82 1b       	sub	r24, r18
    1106:	93 0b       	sbc	r25, r19
    1108:	0f 90       	pop	r0
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	08 95       	ret

00001110 <udi_cdc_multi_is_rx_ready>:
    1110:	e2 df       	rcall	.-60     	; 0x10d6 <udi_cdc_multi_get_nb_received_data>
    1112:	21 e0       	ldi	r18, 0x01	; 1
    1114:	89 2b       	or	r24, r25
    1116:	09 f4       	brne	.+2      	; 0x111a <udi_cdc_multi_is_rx_ready+0xa>
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	82 2f       	mov	r24, r18
    111c:	08 95       	ret

0000111e <udi_cdc_rx_start>:
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	1f 92       	push	r1
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	8f b7       	in	r24, 0x3f	; 63
    112e:	89 83       	std	Y+1, r24	; 0x01
    1130:	f8 94       	cli
    1132:	99 81       	ldd	r25, Y+1	; 0x01
    1134:	20 91 bf 21 	lds	r18, 0x21BF	; 0x8021bf <udi_cdc_rx_buf_sel>
    1138:	80 91 bc 21 	lds	r24, 0x21BC	; 0x8021bc <udi_cdc_rx_trans_ongoing>
    113c:	81 11       	cpse	r24, r1
    113e:	10 c0       	rjmp	.+32     	; 0x1160 <udi_cdc_rx_start+0x42>
    1140:	60 91 bd 21 	lds	r22, 0x21BD	; 0x8021bd <udi_cdc_rx_pos>
    1144:	70 91 be 21 	lds	r23, 0x21BE	; 0x8021be <udi_cdc_rx_pos+0x1>
    1148:	02 2f       	mov	r16, r18
    114a:	10 e0       	ldi	r17, 0x00	; 0
    114c:	f8 01       	movw	r30, r16
    114e:	ee 0f       	add	r30, r30
    1150:	ff 1f       	adc	r31, r31
    1152:	e0 54       	subi	r30, 0x40	; 64
    1154:	fe 4d       	sbci	r31, 0xDE	; 222
    1156:	40 81       	ld	r20, Z
    1158:	51 81       	ldd	r21, Z+1	; 0x01
    115a:	64 17       	cp	r22, r20
    115c:	75 07       	cpc	r23, r21
    115e:	18 f4       	brcc	.+6      	; 0x1166 <udi_cdc_rx_start+0x48>
    1160:	9f bf       	out	0x3f, r25	; 63
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	27 c0       	rjmp	.+78     	; 0x11b4 <udi_cdc_rx_start+0x96>
    1166:	10 92 bd 21 	sts	0x21BD, r1	; 0x8021bd <udi_cdc_rx_pos>
    116a:	10 92 be 21 	sts	0x21BE, r1	; 0x8021be <udi_cdc_rx_pos+0x1>
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	21 11       	cpse	r18, r1
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	80 93 bf 21 	sts	0x21BF, r24	; 0x8021bf <udi_cdc_rx_buf_sel>
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	80 93 bc 21 	sts	0x21BC, r24	; 0x8021bc <udi_cdc_rx_trans_ongoing>
    117e:	9f bf       	out	0x3f, r25	; 63
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	c6 df       	rcall	.-116    	; 0x1110 <udi_cdc_multi_is_rx_ready>
    1184:	88 23       	and	r24, r24
    1186:	11 f0       	breq	.+4      	; 0x118c <udi_cdc_rx_start+0x6e>
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	b8 dd       	rcall	.-1168   	; 0xcfc <my_callback_rx_notify>
    118c:	a8 01       	movw	r20, r16
    118e:	00 24       	eor	r0, r0
    1190:	56 95       	lsr	r21
    1192:	47 95       	ror	r20
    1194:	07 94       	ror	r0
    1196:	56 95       	lsr	r21
    1198:	47 95       	ror	r20
    119a:	07 94       	ror	r0
    119c:	54 2f       	mov	r21, r20
    119e:	40 2d       	mov	r20, r0
    11a0:	4c 53       	subi	r20, 0x3C	; 60
    11a2:	5e 4d       	sbci	r21, 0xDE	; 222
    11a4:	02 e1       	ldi	r16, 0x12	; 18
    11a6:	19 e0       	ldi	r17, 0x09	; 9
    11a8:	20 e4       	ldi	r18, 0x40	; 64
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	61 e0       	ldi	r22, 0x01	; 1
    11ae:	82 e0       	ldi	r24, 0x02	; 2
    11b0:	0e 94 1f 13 	call	0x263e	; 0x263e <udd_ep_run>
    11b4:	0f 90       	pop	r0
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	08 95       	ret

000011c0 <udi_cdc_data_enable>:
    11c0:	10 92 45 22 	sts	0x2245, r1	; 0x802245 <udi_cdc_nb_data_enabled>
    11c4:	10 92 34 21 	sts	0x2134, r1	; 0x802134 <udi_cdc_tx_trans_ongoing>
    11c8:	10 92 33 21 	sts	0x2133, r1	; 0x802133 <udi_cdc_tx_both_buf_to_send>
    11cc:	10 92 37 21 	sts	0x2137, r1	; 0x802137 <udi_cdc_tx_buf_sel>
    11d0:	e8 e3       	ldi	r30, 0x38	; 56
    11d2:	f1 e2       	ldi	r31, 0x21	; 33
    11d4:	10 82       	st	Z, r1
    11d6:	11 82       	std	Z+1, r1	; 0x01
    11d8:	12 82       	std	Z+2, r1	; 0x02
    11da:	13 82       	std	Z+3, r1	; 0x03
    11dc:	10 92 35 21 	sts	0x2135, r1	; 0x802135 <udi_cdc_tx_sof_num>
    11e0:	10 92 36 21 	sts	0x2136, r1	; 0x802136 <udi_cdc_tx_sof_num+0x1>
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	9c de       	rcall	.-712    	; 0xf20 <udi_cdc_tx_send>
    11e8:	10 92 bc 21 	sts	0x21BC, r1	; 0x8021bc <udi_cdc_rx_trans_ongoing>
    11ec:	10 92 bf 21 	sts	0x21BF, r1	; 0x8021bf <udi_cdc_rx_buf_sel>
    11f0:	e0 ec       	ldi	r30, 0xC0	; 192
    11f2:	f1 e2       	ldi	r31, 0x21	; 33
    11f4:	10 82       	st	Z, r1
    11f6:	11 82       	std	Z+1, r1	; 0x01
    11f8:	12 82       	std	Z+2, r1	; 0x02
    11fa:	13 82       	std	Z+3, r1	; 0x03
    11fc:	10 92 bd 21 	sts	0x21BD, r1	; 0x8021bd <udi_cdc_rx_pos>
    1200:	10 92 be 21 	sts	0x21BE, r1	; 0x8021be <udi_cdc_rx_pos+0x1>
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	8b df       	rcall	.-234    	; 0x111e <udi_cdc_rx_start>
    1208:	88 23       	and	r24, r24
    120a:	59 f0       	breq	.+22     	; 0x1222 <udi_cdc_data_enable+0x62>
    120c:	90 91 45 22 	lds	r25, 0x2245	; 0x802245 <udi_cdc_nb_data_enabled>
    1210:	9f 5f       	subi	r25, 0xFF	; 255
    1212:	90 93 45 22 	sts	0x2245, r25	; 0x802245 <udi_cdc_nb_data_enabled>
    1216:	90 91 45 22 	lds	r25, 0x2245	; 0x802245 <udi_cdc_nb_data_enabled>
    121a:	91 30       	cpi	r25, 0x01	; 1
    121c:	11 f4       	brne	.+4      	; 0x1222 <udi_cdc_data_enable+0x62>
    121e:	90 93 44 22 	sts	0x2244, r25	; 0x802244 <udi_cdc_data_running>
    1222:	08 95       	ret

00001224 <udi_cdc_data_received>:
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	81 11       	cpse	r24, r1
    122a:	29 c0       	rjmp	.+82     	; 0x127e <udi_cdc_data_received+0x5a>
    122c:	80 91 bf 21 	lds	r24, 0x21BF	; 0x8021bf <udi_cdc_rx_buf_sel>
    1230:	e1 e0       	ldi	r30, 0x01	; 1
    1232:	81 11       	cpse	r24, r1
    1234:	e0 e0       	ldi	r30, 0x00	; 0
    1236:	84 2f       	mov	r24, r20
    1238:	61 15       	cp	r22, r1
    123a:	71 05       	cpc	r23, r1
    123c:	a9 f4       	brne	.+42     	; 0x1268 <udi_cdc_data_received+0x44>
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	00 24       	eor	r0, r0
    1242:	f6 95       	lsr	r31
    1244:	e7 95       	ror	r30
    1246:	07 94       	ror	r0
    1248:	f6 95       	lsr	r31
    124a:	e7 95       	ror	r30
    124c:	07 94       	ror	r0
    124e:	fe 2f       	mov	r31, r30
    1250:	e0 2d       	mov	r30, r0
    1252:	af 01       	movw	r20, r30
    1254:	4c 53       	subi	r20, 0x3C	; 60
    1256:	5e 4d       	sbci	r21, 0xDE	; 222
    1258:	02 e1       	ldi	r16, 0x12	; 18
    125a:	19 e0       	ldi	r17, 0x09	; 9
    125c:	20 e4       	ldi	r18, 0x40	; 64
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	61 e0       	ldi	r22, 0x01	; 1
    1262:	0e 94 1f 13 	call	0x263e	; 0x263e <udd_ep_run>
    1266:	0b c0       	rjmp	.+22     	; 0x127e <udi_cdc_data_received+0x5a>
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	ee 0f       	add	r30, r30
    126c:	ff 1f       	adc	r31, r31
    126e:	e0 54       	subi	r30, 0x40	; 64
    1270:	fe 4d       	sbci	r31, 0xDE	; 222
    1272:	60 83       	st	Z, r22
    1274:	71 83       	std	Z+1, r23	; 0x01
    1276:	10 92 bc 21 	sts	0x21BC, r1	; 0x8021bc <udi_cdc_rx_trans_ongoing>
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	50 df       	rcall	.-352    	; 0x111e <udi_cdc_rx_start>
    127e:	1f 91       	pop	r17
    1280:	0f 91       	pop	r16
    1282:	08 95       	ret

00001284 <udi_cdc_read_no_polling>:
    1284:	ef 92       	push	r14
    1286:	ff 92       	push	r15
    1288:	0f 93       	push	r16
    128a:	1f 93       	push	r17
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	1f 92       	push	r1
    1292:	1f 92       	push	r1
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	dc 01       	movw	r26, r24
    129a:	90 91 44 22 	lds	r25, 0x2244	; 0x802244 <udi_cdc_data_running>
    129e:	99 23       	and	r25, r25
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <udi_cdc_read_no_polling+0x20>
    12a2:	43 c0       	rjmp	.+134    	; 0x132a <udi_cdc_read_no_polling+0xa6>
    12a4:	8f b7       	in	r24, 0x3f	; 63
    12a6:	89 83       	std	Y+1, r24	; 0x01
    12a8:	f8 94       	cli
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	40 91 bd 21 	lds	r20, 0x21BD	; 0x8021bd <udi_cdc_rx_pos>
    12b0:	50 91 be 21 	lds	r21, 0x21BE	; 0x8021be <udi_cdc_rx_pos+0x1>
    12b4:	20 91 bf 21 	lds	r18, 0x21BF	; 0x8021bf <udi_cdc_rx_buf_sel>
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	f9 01       	movw	r30, r18
    12bc:	ee 0f       	add	r30, r30
    12be:	ff 1f       	adc	r31, r31
    12c0:	e0 54       	subi	r30, 0x40	; 64
    12c2:	fe 4d       	sbci	r31, 0xDE	; 222
    12c4:	00 81       	ld	r16, Z
    12c6:	11 81       	ldd	r17, Z+1	; 0x01
    12c8:	04 1b       	sub	r16, r20
    12ca:	15 0b       	sbc	r17, r21
    12cc:	8f bf       	out	0x3f, r24	; 63
    12ce:	78 01       	movw	r14, r16
    12d0:	60 17       	cp	r22, r16
    12d2:	71 07       	cpc	r23, r17
    12d4:	08 f4       	brcc	.+2      	; 0x12d8 <udi_cdc_read_no_polling+0x54>
    12d6:	7b 01       	movw	r14, r22
    12d8:	e1 14       	cp	r14, r1
    12da:	f1 04       	cpc	r15, r1
    12dc:	49 f1       	breq	.+82     	; 0x1330 <udi_cdc_read_no_polling+0xac>
    12de:	cd 01       	movw	r24, r26
    12e0:	00 24       	eor	r0, r0
    12e2:	36 95       	lsr	r19
    12e4:	27 95       	ror	r18
    12e6:	07 94       	ror	r0
    12e8:	36 95       	lsr	r19
    12ea:	27 95       	ror	r18
    12ec:	07 94       	ror	r0
    12ee:	32 2f       	mov	r19, r18
    12f0:	20 2d       	mov	r18, r0
    12f2:	b9 01       	movw	r22, r18
    12f4:	64 0f       	add	r22, r20
    12f6:	75 1f       	adc	r23, r21
    12f8:	6c 53       	subi	r22, 0x3C	; 60
    12fa:	7e 4d       	sbci	r23, 0xDE	; 222
    12fc:	a7 01       	movw	r20, r14
    12fe:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <memcpy>
    1302:	8f b7       	in	r24, 0x3f	; 63
    1304:	8a 83       	std	Y+2, r24	; 0x02
    1306:	f8 94       	cli
    1308:	2a 81       	ldd	r18, Y+2	; 0x02
    130a:	80 91 bd 21 	lds	r24, 0x21BD	; 0x8021bd <udi_cdc_rx_pos>
    130e:	90 91 be 21 	lds	r25, 0x21BE	; 0x8021be <udi_cdc_rx_pos+0x1>
    1312:	e8 0e       	add	r14, r24
    1314:	f9 1e       	adc	r15, r25
    1316:	e0 92 bd 21 	sts	0x21BD, r14	; 0x8021bd <udi_cdc_rx_pos>
    131a:	f0 92 be 21 	sts	0x21BE, r15	; 0x8021be <udi_cdc_rx_pos+0x1>
    131e:	2f bf       	out	0x3f, r18	; 63
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	fd de       	rcall	.-518    	; 0x111e <udi_cdc_rx_start>
    1324:	80 2f       	mov	r24, r16
    1326:	91 2f       	mov	r25, r17
    1328:	05 c0       	rjmp	.+10     	; 0x1334 <udi_cdc_read_no_polling+0xb0>
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <udi_cdc_read_no_polling+0xb0>
    1330:	80 2f       	mov	r24, r16
    1332:	91 2f       	mov	r25, r17
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	1f 91       	pop	r17
    133e:	0f 91       	pop	r16
    1340:	ff 90       	pop	r15
    1342:	ef 90       	pop	r14
    1344:	08 95       	ret

00001346 <udi_cdc_multi_get_free_tx_buffer>:
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	1f 92       	push	r1
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	8f b7       	in	r24, 0x3f	; 63
    1352:	89 83       	std	Y+1, r24	; 0x01
    1354:	f8 94       	cli
    1356:	99 81       	ldd	r25, Y+1	; 0x01
    1358:	80 91 37 21 	lds	r24, 0x2137	; 0x802137 <udi_cdc_tx_buf_sel>
    135c:	e8 2f       	mov	r30, r24
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	ee 0f       	add	r30, r30
    1362:	ff 1f       	adc	r31, r31
    1364:	e8 5c       	subi	r30, 0xC8	; 200
    1366:	fe 4d       	sbci	r31, 0xDE	; 222
    1368:	20 81       	ld	r18, Z
    136a:	31 81       	ldd	r19, Z+1	; 0x01
    136c:	20 34       	cpi	r18, 0x40	; 64
    136e:	31 05       	cpc	r19, r1
    1370:	89 f4       	brne	.+34     	; 0x1394 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    1372:	40 91 34 21 	lds	r20, 0x2134	; 0x802134 <udi_cdc_tx_trans_ongoing>
    1376:	41 11       	cpse	r20, r1
    1378:	0d c0       	rjmp	.+26     	; 0x1394 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    137a:	40 91 33 21 	lds	r20, 0x2133	; 0x802133 <udi_cdc_tx_both_buf_to_send>
    137e:	41 11       	cpse	r20, r1
    1380:	09 c0       	rjmp	.+18     	; 0x1394 <udi_cdc_multi_get_free_tx_buffer+0x4e>
    1382:	21 e0       	ldi	r18, 0x01	; 1
    1384:	20 93 33 21 	sts	0x2133, r18	; 0x802133 <udi_cdc_tx_both_buf_to_send>
    1388:	81 11       	cpse	r24, r1
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	20 93 37 21 	sts	0x2137, r18	; 0x802137 <udi_cdc_tx_buf_sel>
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	9f bf       	out	0x3f, r25	; 63
    1396:	80 e4       	ldi	r24, 0x40	; 64
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	82 1b       	sub	r24, r18
    139c:	93 0b       	sbc	r25, r19
    139e:	0f 90       	pop	r0
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	08 95       	ret

000013a6 <udi_cdc_multi_is_tx_ready>:
    13a6:	cf df       	rcall	.-98     	; 0x1346 <udi_cdc_multi_get_free_tx_buffer>
    13a8:	21 e0       	ldi	r18, 0x01	; 1
    13aa:	89 2b       	or	r24, r25
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <udi_cdc_multi_is_tx_ready+0xa>
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	82 2f       	mov	r24, r18
    13b2:	08 95       	ret

000013b4 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
    13b4:	ff 92       	push	r15
    13b6:	0f 93       	push	r16
    13b8:	1f 93       	push	r17
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	1f 92       	push	r1
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	f6 2e       	mov	r15, r22
    13c6:	17 2f       	mov	r17, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    13c8:	01 e0       	ldi	r16, 0x01	; 1
    13ca:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <udi_cdc_line_coding+0x6>
    13ce:	89 30       	cpi	r24, 0x09	; 9
    13d0:	09 f0       	breq	.+2      	; 0x13d4 <udi_cdc_multi_putc+0x20>
    13d2:	00 e0       	ldi	r16, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	e7 df       	rcall	.-50     	; 0x13a6 <udi_cdc_multi_is_tx_ready>
    13d8:	81 11       	cpse	r24, r1
    13da:	07 c0       	rjmp	.+14     	; 0x13ea <udi_cdc_multi_putc+0x36>
		if (!udi_cdc_data_running) {
    13dc:	80 91 44 22 	lds	r24, 0x2244	; 0x802244 <udi_cdc_data_running>
    13e0:	81 11       	cpse	r24, r1
    13e2:	f8 cf       	rjmp	.-16     	; 0x13d4 <udi_cdc_multi_putc+0x20>
			return false;
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	2d c0       	rjmp	.+90     	; 0x1444 <udi_cdc_multi_putc+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    13ea:	8f b7       	in	r24, 0x3f	; 63
    13ec:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    13ee:	f8 94       	cli
	return flags;
    13f0:	29 81       	ldd	r18, Y+1	; 0x01
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    13f2:	e0 91 37 21 	lds	r30, 0x2137	; 0x802137 <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	df 01       	movw	r26, r30
    13fa:	aa 0f       	add	r26, r26
    13fc:	bb 1f       	adc	r27, r27
    13fe:	a8 5c       	subi	r26, 0xC8	; 200
    1400:	be 4d       	sbci	r27, 0xDE	; 222
    1402:	8d 91       	ld	r24, X+
    1404:	9c 91       	ld	r25, X
    1406:	11 97       	sbiw	r26, 0x01	; 1
    1408:	ac 01       	movw	r20, r24
    140a:	4f 5f       	subi	r20, 0xFF	; 255
    140c:	5f 4f       	sbci	r21, 0xFF	; 255
    140e:	4d 93       	st	X+, r20
    1410:	5c 93       	st	X, r21
    1412:	00 24       	eor	r0, r0
    1414:	f6 95       	lsr	r31
    1416:	e7 95       	ror	r30
    1418:	07 94       	ror	r0
    141a:	f6 95       	lsr	r31
    141c:	e7 95       	ror	r30
    141e:	07 94       	ror	r0
    1420:	fe 2f       	mov	r31, r30
    1422:	e0 2d       	mov	r30, r0
    1424:	8e 0f       	add	r24, r30
    1426:	9f 1f       	adc	r25, r31
    1428:	fc 01       	movw	r30, r24
    142a:	e4 5c       	subi	r30, 0xC4	; 196
    142c:	fe 4d       	sbci	r31, 0xDE	; 222
    142e:	f0 82       	st	Z, r15
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1430:	2f bf       	out	0x3f, r18	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
    1432:	00 23       	and	r16, r16
    1434:	29 f0       	breq	.+10     	; 0x1440 <udi_cdc_multi_putc+0x8c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
    1436:	f1 2e       	mov	r15, r17
    1438:	11 0f       	add	r17, r17
    143a:	11 0b       	sbc	r17, r17
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
    143c:	00 e0       	ldi	r16, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
    143e:	ca cf       	rjmp	.-108    	; 0x13d4 <udi_cdc_multi_putc+0x20>
	}
	return true;
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
}
    1444:	0f 90       	pop	r0
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	1f 91       	pop	r17
    144c:	0f 91       	pop	r16
    144e:	ff 90       	pop	r15
    1450:	08 95       	ret

00001452 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
    1452:	bc 01       	movw	r22, r24
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	ae cf       	rjmp	.-164    	; 0x13b4 <udi_cdc_multi_putc>
}
    1458:	08 95       	ret

0000145a <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
    145a:	5f 92       	push	r5
    145c:	6f 92       	push	r6
    145e:	7f 92       	push	r7
    1460:	8f 92       	push	r8
    1462:	9f 92       	push	r9
    1464:	af 92       	push	r10
    1466:	bf 92       	push	r11
    1468:	cf 92       	push	r12
    146a:	df 92       	push	r13
    146c:	ef 92       	push	r14
    146e:	ff 92       	push	r15
    1470:	0f 93       	push	r16
    1472:	1f 93       	push	r17
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	1f 92       	push	r1
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	4b 01       	movw	r8, r22
    1480:	5a 01       	movw	r10, r20

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
    1482:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <udi_cdc_line_coding+0x6>
    1486:	89 30       	cpi	r24, 0x09	; 9
    1488:	11 f4       	brne	.+4      	; 0x148e <udi_cdc_multi_write_buf+0x34>
		size *=2;
    148a:	aa 0c       	add	r10, r10
    148c:	bb 1c       	adc	r11, r11

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
    148e:	68 94       	set
    1490:	66 24       	eor	r6, r6
    1492:	66 f8       	bld	r6, 6
    1494:	71 2c       	mov	r7, r1
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	86 df       	rcall	.-244    	; 0x13a6 <udi_cdc_multi_is_tx_ready>
    149a:	81 11       	cpse	r24, r1
    149c:	07 c0       	rjmp	.+14     	; 0x14ac <udi_cdc_multi_write_buf+0x52>
		if (!udi_cdc_data_running) {
    149e:	80 91 44 22 	lds	r24, 0x2244	; 0x802244 <udi_cdc_data_running>
    14a2:	81 11       	cpse	r24, r1
    14a4:	f8 cf       	rjmp	.-16     	; 0x1496 <udi_cdc_multi_write_buf+0x3c>
    14a6:	8a 2d       	mov	r24, r10
    14a8:	9b 2d       	mov	r25, r11
    14aa:	3a c0       	rjmp	.+116    	; 0x1520 <udi_cdc_multi_write_buf+0xc6>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    14ac:	8f b7       	in	r24, 0x3f	; 63
    14ae:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    14b0:	f8 94       	cli
	return flags;
    14b2:	59 80       	ldd	r5, Y+1	; 0x01
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    14b4:	00 91 37 21 	lds	r16, 0x2137	; 0x802137 <udi_cdc_tx_buf_sel>
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    14b8:	10 e0       	ldi	r17, 0x00	; 0
    14ba:	f8 01       	movw	r30, r16
    14bc:	ee 0f       	add	r30, r30
    14be:	ff 1f       	adc	r31, r31
    14c0:	e8 5c       	subi	r30, 0xC8	; 200
    14c2:	fe 4d       	sbci	r31, 0xDE	; 222
    14c4:	e0 80       	ld	r14, Z
    14c6:	f1 80       	ldd	r15, Z+1	; 0x01
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
    14c8:	c3 01       	movw	r24, r6
    14ca:	8e 19       	sub	r24, r14
    14cc:	9f 09       	sbc	r25, r15
    14ce:	65 01       	movw	r12, r10
    14d0:	8a 15       	cp	r24, r10
    14d2:	9b 05       	cpc	r25, r11
    14d4:	08 f4       	brcc	.+2      	; 0x14d8 <udi_cdc_multi_write_buf+0x7e>
    14d6:	6c 01       	movw	r12, r24
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
    14d8:	c8 01       	movw	r24, r16
    14da:	00 24       	eor	r0, r0
    14dc:	96 95       	lsr	r25
    14de:	87 95       	ror	r24
    14e0:	07 94       	ror	r0
    14e2:	96 95       	lsr	r25
    14e4:	87 95       	ror	r24
    14e6:	07 94       	ror	r0
    14e8:	98 2f       	mov	r25, r24
    14ea:	80 2d       	mov	r24, r0
    14ec:	8e 0d       	add	r24, r14
    14ee:	9f 1d       	adc	r25, r15
    14f0:	a6 01       	movw	r20, r12
    14f2:	b4 01       	movw	r22, r8
    14f4:	84 5c       	subi	r24, 0xC4	; 196
    14f6:	9e 4d       	sbci	r25, 0xDE	; 222
    14f8:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <memcpy>
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
    14fc:	00 0f       	add	r16, r16
    14fe:	11 1f       	adc	r17, r17
    1500:	f8 01       	movw	r30, r16
    1502:	e8 5c       	subi	r30, 0xC8	; 200
    1504:	fe 4d       	sbci	r31, 0xDE	; 222
    1506:	ec 0c       	add	r14, r12
    1508:	fd 1c       	adc	r15, r13
    150a:	e0 82       	st	Z, r14
    150c:	f1 82       	std	Z+1, r15	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    150e:	5f be       	out	0x3f, r5	; 63
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
    1510:	8c 0c       	add	r8, r12
    1512:	9d 1c       	adc	r9, r13
	size -= copy_nb;
    1514:	ac 18       	sub	r10, r12
    1516:	bd 08       	sbc	r11, r13

	if (size) {
    1518:	09 f0       	breq	.+2      	; 0x151c <udi_cdc_multi_write_buf+0xc2>
    151a:	bd cf       	rjmp	.-134    	; 0x1496 <udi_cdc_multi_write_buf+0x3c>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
}
    1520:	0f 90       	pop	r0
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	ff 90       	pop	r15
    152c:	ef 90       	pop	r14
    152e:	df 90       	pop	r13
    1530:	cf 90       	pop	r12
    1532:	bf 90       	pop	r11
    1534:	af 90       	pop	r10
    1536:	9f 90       	pop	r9
    1538:	8f 90       	pop	r8
    153a:	7f 90       	pop	r7
    153c:	6f 90       	pop	r6
    153e:	5f 90       	pop	r5
    1540:	08 95       	ret

00001542 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    1542:	e0 91 60 22 	lds	r30, 0x2260	; 0x802260 <udc_ptr_conf>
    1546:	f0 91 61 22 	lds	r31, 0x2261	; 0x802261 <udc_ptr_conf+0x1>
    154a:	01 90       	ld	r0, Z+
    154c:	f0 81       	ld	r31, Z
    154e:	e0 2d       	mov	r30, r0
    1550:	22 81       	ldd	r18, Z+2	; 0x02
    1552:	33 81       	ldd	r19, Z+3	; 0x03
    1554:	2e 0f       	add	r18, r30
    1556:	3f 1f       	adc	r19, r31
    1558:	fc 01       	movw	r30, r24
    155a:	40 81       	ld	r20, Z
    155c:	e4 0f       	add	r30, r20
    155e:	f1 1d       	adc	r31, r1
    1560:	e2 17       	cp	r30, r18
    1562:	f3 07       	cpc	r31, r19
    1564:	b8 f4       	brcc	.+46     	; 0x1594 <udc_next_desc_in_iface+0x52>
    1566:	81 81       	ldd	r24, Z+1	; 0x01
    1568:	84 30       	cpi	r24, 0x04	; 4
    156a:	b9 f0       	breq	.+46     	; 0x159a <udc_next_desc_in_iface+0x58>
    156c:	86 13       	cpse	r24, r22
    156e:	09 c0       	rjmp	.+18     	; 0x1582 <udc_next_desc_in_iface+0x40>
    1570:	05 c0       	rjmp	.+10     	; 0x157c <udc_next_desc_in_iface+0x3a>
    1572:	81 81       	ldd	r24, Z+1	; 0x01
    1574:	84 30       	cpi	r24, 0x04	; 4
    1576:	a1 f0       	breq	.+40     	; 0x15a0 <udc_next_desc_in_iface+0x5e>
    1578:	86 13       	cpse	r24, r22
    157a:	03 c0       	rjmp	.+6      	; 0x1582 <udc_next_desc_in_iface+0x40>
    157c:	8e 2f       	mov	r24, r30
    157e:	9f 2f       	mov	r25, r31
    1580:	08 95       	ret
    1582:	80 81       	ld	r24, Z
    1584:	e8 0f       	add	r30, r24
    1586:	f1 1d       	adc	r31, r1
    1588:	e2 17       	cp	r30, r18
    158a:	f3 07       	cpc	r31, r19
    158c:	90 f3       	brcs	.-28     	; 0x1572 <udc_next_desc_in_iface+0x30>
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	08 95       	ret
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	08 95       	ret
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	08 95       	ret
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	08 95       	ret

000015a6 <udc_valid_address>:
    15a6:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <udd_g_ctrlreq+0x2>
    15aa:	8f 77       	andi	r24, 0x7F	; 127
    15ac:	59 c7       	rjmp	.+3762   	; 0x2460 <udd_set_address>
    15ae:	08 95       	ret

000015b0 <udc_update_iface_desc>:
    15b0:	90 91 62 22 	lds	r25, 0x2262	; 0x802262 <udc_num_configuration>
    15b4:	99 23       	and	r25, r25
    15b6:	81 f1       	breq	.+96     	; 0x1618 <udc_update_iface_desc+0x68>
    15b8:	e0 91 60 22 	lds	r30, 0x2260	; 0x802260 <udc_ptr_conf>
    15bc:	f0 91 61 22 	lds	r31, 0x2261	; 0x802261 <udc_ptr_conf+0x1>
    15c0:	01 90       	ld	r0, Z+
    15c2:	f0 81       	ld	r31, Z
    15c4:	e0 2d       	mov	r30, r0
    15c6:	94 81       	ldd	r25, Z+4	; 0x04
    15c8:	89 17       	cp	r24, r25
    15ca:	40 f5       	brcc	.+80     	; 0x161c <udc_update_iface_desc+0x6c>
    15cc:	e0 93 5e 22 	sts	0x225E, r30	; 0x80225e <udc_ptr_iface>
    15d0:	f0 93 5f 22 	sts	0x225F, r31	; 0x80225f <udc_ptr_iface+0x1>
    15d4:	22 81       	ldd	r18, Z+2	; 0x02
    15d6:	33 81       	ldd	r19, Z+3	; 0x03
    15d8:	2e 0f       	add	r18, r30
    15da:	3f 1f       	adc	r19, r31
    15dc:	e2 17       	cp	r30, r18
    15de:	f3 07       	cpc	r31, r19
    15e0:	f8 f4       	brcc	.+62     	; 0x1620 <udc_update_iface_desc+0x70>
    15e2:	91 81       	ldd	r25, Z+1	; 0x01
    15e4:	94 30       	cpi	r25, 0x04	; 4
    15e6:	61 f4       	brne	.+24     	; 0x1600 <udc_update_iface_desc+0x50>
    15e8:	92 81       	ldd	r25, Z+2	; 0x02
    15ea:	98 13       	cpse	r25, r24
    15ec:	09 c0       	rjmp	.+18     	; 0x1600 <udc_update_iface_desc+0x50>
    15ee:	93 81       	ldd	r25, Z+3	; 0x03
    15f0:	96 13       	cpse	r25, r22
    15f2:	06 c0       	rjmp	.+12     	; 0x1600 <udc_update_iface_desc+0x50>
    15f4:	e0 93 5e 22 	sts	0x225E, r30	; 0x80225e <udc_ptr_iface>
    15f8:	f0 93 5f 22 	sts	0x225F, r31	; 0x80225f <udc_ptr_iface+0x1>
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	08 95       	ret
    1600:	90 81       	ld	r25, Z
    1602:	e9 0f       	add	r30, r25
    1604:	f1 1d       	adc	r31, r1
    1606:	e2 17       	cp	r30, r18
    1608:	f3 07       	cpc	r31, r19
    160a:	58 f3       	brcs	.-42     	; 0x15e2 <udc_update_iface_desc+0x32>
    160c:	e0 93 5e 22 	sts	0x225E, r30	; 0x80225e <udc_ptr_iface>
    1610:	f0 93 5f 22 	sts	0x225F, r31	; 0x80225f <udc_ptr_iface+0x1>
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	08 95       	ret
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	08 95       	ret
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	08 95       	ret
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	08 95       	ret

00001624 <udc_iface_disable>:
    1624:	ef 92       	push	r14
    1626:	ff 92       	push	r15
    1628:	1f 93       	push	r17
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	c8 2f       	mov	r28, r24
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	be df       	rcall	.-132    	; 0x15b0 <udc_update_iface_desc>
    1634:	18 2f       	mov	r17, r24
    1636:	88 23       	and	r24, r24
    1638:	81 f1       	breq	.+96     	; 0x169a <udc_iface_disable+0x76>
    163a:	a0 91 60 22 	lds	r26, 0x2260	; 0x802260 <udc_ptr_conf>
    163e:	b0 91 61 22 	lds	r27, 0x2261	; 0x802261 <udc_ptr_conf+0x1>
    1642:	ec 2f       	mov	r30, r28
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	ee 0f       	add	r30, r30
    1648:	ff 1f       	adc	r31, r31
    164a:	12 96       	adiw	r26, 0x02	; 2
    164c:	8d 91       	ld	r24, X+
    164e:	9c 91       	ld	r25, X
    1650:	13 97       	sbiw	r26, 0x03	; 3
    1652:	e8 0f       	add	r30, r24
    1654:	f9 1f       	adc	r31, r25
    1656:	e0 80       	ld	r14, Z
    1658:	f1 80       	ldd	r15, Z+1	; 0x01
    165a:	d7 01       	movw	r26, r14
    165c:	16 96       	adiw	r26, 0x06	; 6
    165e:	ed 91       	ld	r30, X+
    1660:	fc 91       	ld	r31, X
    1662:	17 97       	sbiw	r26, 0x07	; 7
    1664:	19 95       	eicall
    1666:	68 2f       	mov	r22, r24
    1668:	8c 2f       	mov	r24, r28
    166a:	a2 df       	rcall	.-188    	; 0x15b0 <udc_update_iface_desc>
    166c:	18 2f       	mov	r17, r24
    166e:	88 23       	and	r24, r24
    1670:	a1 f0       	breq	.+40     	; 0x169a <udc_iface_disable+0x76>
    1672:	c0 91 5e 22 	lds	r28, 0x225E	; 0x80225e <udc_ptr_iface>
    1676:	d0 91 5f 22 	lds	r29, 0x225F	; 0x80225f <udc_ptr_iface+0x1>
    167a:	65 e0       	ldi	r22, 0x05	; 5
    167c:	ce 01       	movw	r24, r28
    167e:	61 df       	rcall	.-318    	; 0x1542 <udc_next_desc_in_iface>
    1680:	ec 01       	movw	r28, r24
    1682:	89 2b       	or	r24, r25
    1684:	21 f0       	breq	.+8      	; 0x168e <udc_iface_disable+0x6a>
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	0e 94 2f 14 	call	0x285e	; 0x285e <udd_ep_free>
    168c:	f6 cf       	rjmp	.-20     	; 0x167a <udc_iface_disable+0x56>
    168e:	d7 01       	movw	r26, r14
    1690:	12 96       	adiw	r26, 0x02	; 2
    1692:	ed 91       	ld	r30, X+
    1694:	fc 91       	ld	r31, X
    1696:	13 97       	sbiw	r26, 0x03	; 3
    1698:	19 95       	eicall
    169a:	81 2f       	mov	r24, r17
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	1f 91       	pop	r17
    16a2:	ff 90       	pop	r15
    16a4:	ef 90       	pop	r14
    16a6:	08 95       	ret

000016a8 <udc_iface_enable>:
    16a8:	1f 93       	push	r17
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
    16ae:	18 2f       	mov	r17, r24
    16b0:	7f df       	rcall	.-258    	; 0x15b0 <udc_update_iface_desc>
    16b2:	88 23       	and	r24, r24
    16b4:	39 f1       	breq	.+78     	; 0x1704 <udc_iface_enable+0x5c>
    16b6:	c0 91 5e 22 	lds	r28, 0x225E	; 0x80225e <udc_ptr_iface>
    16ba:	d0 91 5f 22 	lds	r29, 0x225F	; 0x80225f <udc_ptr_iface+0x1>
    16be:	65 e0       	ldi	r22, 0x05	; 5
    16c0:	ce 01       	movw	r24, r28
    16c2:	3f df       	rcall	.-386    	; 0x1542 <udc_next_desc_in_iface>
    16c4:	ec 01       	movw	r28, r24
    16c6:	89 2b       	or	r24, r25
    16c8:	41 f0       	breq	.+16     	; 0x16da <udc_iface_enable+0x32>
    16ca:	4c 81       	ldd	r20, Y+4	; 0x04
    16cc:	5d 81       	ldd	r21, Y+5	; 0x05
    16ce:	6b 81       	ldd	r22, Y+3	; 0x03
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	db d6       	rcall	.+3510   	; 0x248a <udd_ep_alloc>
    16d4:	81 11       	cpse	r24, r1
    16d6:	f3 cf       	rjmp	.-26     	; 0x16be <udc_iface_enable+0x16>
    16d8:	15 c0       	rjmp	.+42     	; 0x1704 <udc_iface_enable+0x5c>
    16da:	a0 91 60 22 	lds	r26, 0x2260	; 0x802260 <udc_ptr_conf>
    16de:	b0 91 61 22 	lds	r27, 0x2261	; 0x802261 <udc_ptr_conf+0x1>
    16e2:	e1 2f       	mov	r30, r17
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	ee 0f       	add	r30, r30
    16e8:	ff 1f       	adc	r31, r31
    16ea:	12 96       	adiw	r26, 0x02	; 2
    16ec:	8d 91       	ld	r24, X+
    16ee:	9c 91       	ld	r25, X
    16f0:	13 97       	sbiw	r26, 0x03	; 3
    16f2:	e8 0f       	add	r30, r24
    16f4:	f9 1f       	adc	r31, r25
    16f6:	01 90       	ld	r0, Z+
    16f8:	f0 81       	ld	r31, Z
    16fa:	e0 2d       	mov	r30, r0
    16fc:	01 90       	ld	r0, Z+
    16fe:	f0 81       	ld	r31, Z
    1700:	e0 2d       	mov	r30, r0
    1702:	19 95       	eicall
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	1f 91       	pop	r17
    170a:	08 95       	ret

0000170c <udc_start>:
    170c:	25 c6       	rjmp	.+3146   	; 0x2358 <udd_enable>
    170e:	08 95       	ret

00001710 <udc_reset>:
    1710:	cf 93       	push	r28
    1712:	80 91 62 22 	lds	r24, 0x2262	; 0x802262 <udc_num_configuration>
    1716:	88 23       	and	r24, r24
    1718:	c1 f0       	breq	.+48     	; 0x174a <udc_reset+0x3a>
    171a:	e0 91 60 22 	lds	r30, 0x2260	; 0x802260 <udc_ptr_conf>
    171e:	f0 91 61 22 	lds	r31, 0x2261	; 0x802261 <udc_ptr_conf+0x1>
    1722:	01 90       	ld	r0, Z+
    1724:	f0 81       	ld	r31, Z
    1726:	e0 2d       	mov	r30, r0
    1728:	84 81       	ldd	r24, Z+4	; 0x04
    172a:	88 23       	and	r24, r24
    172c:	71 f0       	breq	.+28     	; 0x174a <udc_reset+0x3a>
    172e:	c0 e0       	ldi	r28, 0x00	; 0
    1730:	8c 2f       	mov	r24, r28
    1732:	78 df       	rcall	.-272    	; 0x1624 <udc_iface_disable>
    1734:	cf 5f       	subi	r28, 0xFF	; 255
    1736:	e0 91 60 22 	lds	r30, 0x2260	; 0x802260 <udc_ptr_conf>
    173a:	f0 91 61 22 	lds	r31, 0x2261	; 0x802261 <udc_ptr_conf+0x1>
    173e:	01 90       	ld	r0, Z+
    1740:	f0 81       	ld	r31, Z
    1742:	e0 2d       	mov	r30, r0
    1744:	84 81       	ldd	r24, Z+4	; 0x04
    1746:	c8 17       	cp	r28, r24
    1748:	98 f3       	brcs	.-26     	; 0x1730 <udc_reset+0x20>
    174a:	10 92 62 22 	sts	0x2262, r1	; 0x802262 <udc_num_configuration>
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	80 93 66 22 	sts	0x2266, r24	; 0x802266 <udc_device_status>
    1756:	90 93 67 22 	sts	0x2267, r25	; 0x802267 <udc_device_status+0x1>
    175a:	cf 91       	pop	r28
    175c:	08 95       	ret

0000175e <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    175e:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1760:	80 91 62 22 	lds	r24, 0x2262	; 0x802262 <udc_num_configuration>
    1764:	88 23       	and	r24, r24
    1766:	49 f1       	breq	.+82     	; 0x17ba <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1768:	a0 91 60 22 	lds	r26, 0x2260	; 0x802260 <udc_ptr_conf>
    176c:	b0 91 61 22 	lds	r27, 0x2261	; 0x802261 <udc_ptr_conf+0x1>
    1770:	ed 91       	ld	r30, X+
    1772:	fc 91       	ld	r31, X
    1774:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1776:	84 81       	ldd	r24, Z+4	; 0x04
    1778:	88 23       	and	r24, r24
    177a:	f9 f0       	breq	.+62     	; 0x17ba <udc_sof_notify+0x5c>
    177c:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    177e:	ec 2f       	mov	r30, r28
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	ee 0f       	add	r30, r30
    1784:	ff 1f       	adc	r31, r31
    1786:	12 96       	adiw	r26, 0x02	; 2
    1788:	8d 91       	ld	r24, X+
    178a:	9c 91       	ld	r25, X
    178c:	13 97       	sbiw	r26, 0x03	; 3
    178e:	e8 0f       	add	r30, r24
    1790:	f9 1f       	adc	r31, r25
    1792:	01 90       	ld	r0, Z+
    1794:	f0 81       	ld	r31, Z
    1796:	e0 2d       	mov	r30, r0
    1798:	00 84       	ldd	r0, Z+8	; 0x08
    179a:	f1 85       	ldd	r31, Z+9	; 0x09
    179c:	e0 2d       	mov	r30, r0
    179e:	30 97       	sbiw	r30, 0x00	; 0
    17a0:	09 f0       	breq	.+2      	; 0x17a4 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    17a2:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    17a4:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    17a6:	a0 91 60 22 	lds	r26, 0x2260	; 0x802260 <udc_ptr_conf>
    17aa:	b0 91 61 22 	lds	r27, 0x2261	; 0x802261 <udc_ptr_conf+0x1>
    17ae:	ed 91       	ld	r30, X+
    17b0:	fc 91       	ld	r31, X
    17b2:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    17b4:	84 81       	ldd	r24, Z+4	; 0x04
    17b6:	c8 17       	cp	r28, r24
    17b8:	10 f3       	brcs	.-60     	; 0x177e <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    17ba:	cf 91       	pop	r28
    17bc:	08 95       	ret

000017be <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    17be:	0f 93       	push	r16
    17c0:	1f 93       	push	r17
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    17c6:	e6 e9       	ldi	r30, 0x96	; 150
    17c8:	f4 e2       	ldi	r31, 0x24	; 36
    17ca:	12 86       	std	Z+10, r1	; 0x0a
    17cc:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    17ce:	14 86       	std	Z+12, r1	; 0x0c
    17d0:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    17d2:	16 86       	std	Z+14, r1	; 0x0e
    17d4:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    17d6:	80 81       	ld	r24, Z
    17d8:	88 23       	and	r24, r24
    17da:	0c f0       	brlt	.+2      	; 0x17de <udc_process_setup+0x20>
    17dc:	63 c2       	rjmp	.+1222   	; 0x1ca4 <udc_process_setup+0x4e6>
		if (udd_g_ctrlreq.req.wLength == 0) {
    17de:	20 91 9c 24 	lds	r18, 0x249C	; 0x80249c <udd_g_ctrlreq+0x6>
    17e2:	30 91 9d 24 	lds	r19, 0x249D	; 0x80249d <udd_g_ctrlreq+0x7>
    17e6:	21 15       	cp	r18, r1
    17e8:	31 05       	cpc	r19, r1
    17ea:	09 f0       	breq	.+2      	; 0x17ee <udc_process_setup+0x30>
    17ec:	56 c2       	rjmp	.+1196   	; 0x1c9a <udc_process_setup+0x4dc>
    17ee:	51 c2       	rjmp	.+1186   	; 0x1c92 <udc_process_setup+0x4d4>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    17f0:	8f 71       	andi	r24, 0x1F	; 31
    17f2:	09 f0       	breq	.+2      	; 0x17f6 <udc_process_setup+0x38>
    17f4:	a7 c0       	rjmp	.+334    	; 0x1944 <udc_process_setup+0x186>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    17f6:	90 91 97 24 	lds	r25, 0x2497	; 0x802497 <udd_g_ctrlreq+0x1>
    17fa:	96 30       	cpi	r25, 0x06	; 6
    17fc:	79 f0       	breq	.+30     	; 0x181c <udc_process_setup+0x5e>
    17fe:	98 30       	cpi	r25, 0x08	; 8
    1800:	09 f4       	brne	.+2      	; 0x1804 <udc_process_setup+0x46>
    1802:	96 c0       	rjmp	.+300    	; 0x1930 <udc_process_setup+0x172>
    1804:	91 11       	cpse	r25, r1
    1806:	9e c0       	rjmp	.+316    	; 0x1944 <udc_process_setup+0x186>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1808:	22 30       	cpi	r18, 0x02	; 2
    180a:	31 05       	cpc	r19, r1
    180c:	09 f0       	breq	.+2      	; 0x1810 <udc_process_setup+0x52>
    180e:	ca c1       	rjmp	.+916    	; 0x1ba4 <udc_process_setup+0x3e6>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1810:	62 e0       	ldi	r22, 0x02	; 2
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	86 e6       	ldi	r24, 0x66	; 102
    1816:	92 e2       	ldi	r25, 0x22	; 34
    1818:	31 d6       	rcall	.+3170   	; 0x247c <udd_set_setup_payload>
    181a:	4d c2       	rjmp	.+1178   	; 0x1cb6 <udc_process_setup+0x4f8>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    181c:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <udd_g_ctrlreq+0x2>
    1820:	90 91 99 24 	lds	r25, 0x2499	; 0x802499 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1824:	29 2f       	mov	r18, r25
    1826:	33 27       	eor	r19, r19
    1828:	22 30       	cpi	r18, 0x02	; 2
    182a:	31 05       	cpc	r19, r1
    182c:	a9 f0       	breq	.+42     	; 0x1858 <udc_process_setup+0x9a>
    182e:	24 f4       	brge	.+8      	; 0x1838 <udc_process_setup+0x7a>
    1830:	21 30       	cpi	r18, 0x01	; 1
    1832:	31 05       	cpc	r19, r1
    1834:	41 f0       	breq	.+16     	; 0x1846 <udc_process_setup+0x88>
    1836:	ad c1       	rjmp	.+858    	; 0x1b92 <udc_process_setup+0x3d4>
    1838:	23 30       	cpi	r18, 0x03	; 3
    183a:	31 05       	cpc	r19, r1
    183c:	d9 f1       	breq	.+118    	; 0x18b4 <udc_process_setup+0xf6>
    183e:	2f 30       	cpi	r18, 0x0F	; 15
    1840:	31 05       	cpc	r19, r1
    1842:	51 f1       	breq	.+84     	; 0x1898 <udc_process_setup+0xda>
    1844:	a6 c1       	rjmp	.+844    	; 0x1b92 <udc_process_setup+0x3d4>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1846:	80 91 72 20 	lds	r24, 0x2072	; 0x802072 <udc_config>
    184a:	90 91 73 20 	lds	r25, 0x2073	; 0x802073 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    184e:	dc 01       	movw	r26, r24
    1850:	6c 91       	ld	r22, X
    1852:	70 e0       	ldi	r23, 0x00	; 0
    1854:	13 d6       	rcall	.+3110   	; 0x247c <udd_set_setup_payload>
    1856:	5d c0       	rjmp	.+186    	; 0x1912 <udc_process_setup+0x154>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1858:	e0 91 72 20 	lds	r30, 0x2072	; 0x802072 <udc_config>
    185c:	f0 91 73 20 	lds	r31, 0x2073	; 0x802073 <udc_config+0x1>
    1860:	21 89       	ldd	r18, Z+17	; 0x11
    1862:	82 17       	cp	r24, r18
    1864:	08 f0       	brcs	.+2      	; 0x1868 <udc_process_setup+0xaa>
    1866:	9e c1       	rjmp	.+828    	; 0x1ba4 <udc_process_setup+0x3e6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1868:	99 27       	eor	r25, r25
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	e0 91 74 20 	lds	r30, 0x2074	; 0x802074 <udc_config+0x2>
    1876:	f0 91 75 20 	lds	r31, 0x2075	; 0x802075 <udc_config+0x3>
    187a:	e8 0f       	add	r30, r24
    187c:	f9 1f       	adc	r31, r25
    187e:	80 81       	ld	r24, Z
    1880:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1882:	fc 01       	movw	r30, r24
    1884:	62 81       	ldd	r22, Z+2	; 0x02
    1886:	73 81       	ldd	r23, Z+3	; 0x03
    1888:	f9 d5       	rcall	.+3058   	; 0x247c <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    188a:	e0 91 9e 24 	lds	r30, 0x249E	; 0x80249e <udd_g_ctrlreq+0x8>
    188e:	f0 91 9f 24 	lds	r31, 0x249F	; 0x80249f <udd_g_ctrlreq+0x9>
    1892:	82 e0       	ldi	r24, 0x02	; 2
    1894:	81 83       	std	Z+1, r24	; 0x01
    1896:	3d c0       	rjmp	.+122    	; 0x1912 <udc_process_setup+0x154>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1898:	80 91 76 20 	lds	r24, 0x2076	; 0x802076 <udc_config+0x4>
    189c:	90 91 77 20 	lds	r25, 0x2077	; 0x802077 <udc_config+0x5>
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <udc_process_setup+0xe8>
    18a4:	7f c1       	rjmp	.+766    	; 0x1ba4 <udc_process_setup+0x3e6>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    18a6:	dc 01       	movw	r26, r24
    18a8:	12 96       	adiw	r26, 0x02	; 2
    18aa:	6d 91       	ld	r22, X+
    18ac:	7c 91       	ld	r23, X
    18ae:	13 97       	sbiw	r26, 0x03	; 3
    18b0:	e5 d5       	rcall	.+3018   	; 0x247c <udd_set_setup_payload>
    18b2:	2f c0       	rjmp	.+94     	; 0x1912 <udc_process_setup+0x154>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    18b4:	99 27       	eor	r25, r25
    18b6:	81 30       	cpi	r24, 0x01	; 1
    18b8:	91 05       	cpc	r25, r1
    18ba:	91 f0       	breq	.+36     	; 0x18e0 <udc_process_setup+0x122>
    18bc:	58 f0       	brcs	.+22     	; 0x18d4 <udc_process_setup+0x116>
    18be:	82 30       	cpi	r24, 0x02	; 2
    18c0:	91 05       	cpc	r25, r1
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <udc_process_setup+0x108>
    18c4:	f4 c1       	rjmp	.+1000   	; 0x1cae <udc_process_setup+0x4f0>
    18c6:	03 97       	sbiw	r24, 0x03	; 3
    18c8:	09 f0       	breq	.+2      	; 0x18cc <udc_process_setup+0x10e>
    18ca:	6c c1       	rjmp	.+728    	; 0x1ba4 <udc_process_setup+0x3e6>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    18cc:	27 e0       	ldi	r18, 0x07	; 7
		str = udc_get_string_serial_name();
    18ce:	8d e1       	ldi	r24, 0x1D	; 29
    18d0:	91 e2       	ldi	r25, 0x21	; 33
    18d2:	09 c0       	rjmp	.+18     	; 0x18e6 <udc_process_setup+0x128>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    18d4:	64 e0       	ldi	r22, 0x04	; 4
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	8e e6       	ldi	r24, 0x6E	; 110
    18da:	90 e2       	ldi	r25, 0x20	; 32
    18dc:	cf d5       	rcall	.+2974   	; 0x247c <udd_set_setup_payload>
    18de:	19 c0       	rjmp	.+50     	; 0x1912 <udc_process_setup+0x154>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    18e0:	8b e5       	ldi	r24, 0x5B	; 91
    18e2:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    18e4:	22 e1       	ldi	r18, 0x12	; 18
    18e6:	38 2f       	mov	r19, r24
    18e8:	a4 e2       	ldi	r26, 0x24	; 36
    18ea:	b0 e2       	ldi	r27, 0x20	; 32
    18ec:	e8 2f       	mov	r30, r24
    18ee:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    18f0:	81 91       	ld	r24, Z+
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	8d 93       	st	X+, r24
    18f6:	9d 93       	st	X+, r25
    18f8:	8e 2f       	mov	r24, r30
    18fa:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    18fc:	82 17       	cp	r24, r18
    18fe:	c0 f3       	brcs	.-16     	; 0x18f0 <udc_process_setup+0x132>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1900:	62 2f       	mov	r22, r18
    1902:	66 0f       	add	r22, r22
    1904:	6e 5f       	subi	r22, 0xFE	; 254
    1906:	60 93 22 20 	sts	0x2022, r22	; 0x802022 <udc_string_desc>
		udd_set_setup_payload(
    190a:	70 e0       	ldi	r23, 0x00	; 0
    190c:	82 e2       	ldi	r24, 0x22	; 34
    190e:	90 e2       	ldi	r25, 0x20	; 32
    1910:	b5 d5       	rcall	.+2922   	; 0x247c <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1912:	e6 e9       	ldi	r30, 0x96	; 150
    1914:	f4 e2       	ldi	r31, 0x24	; 36
    1916:	86 81       	ldd	r24, Z+6	; 0x06
    1918:	97 81       	ldd	r25, Z+7	; 0x07
    191a:	22 85       	ldd	r18, Z+10	; 0x0a
    191c:	33 85       	ldd	r19, Z+11	; 0x0b
    191e:	82 17       	cp	r24, r18
    1920:	93 07       	cpc	r25, r19
    1922:	08 f0       	brcs	.+2      	; 0x1926 <udc_process_setup+0x168>
    1924:	c8 c1       	rjmp	.+912    	; 0x1cb6 <udc_process_setup+0x4f8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1926:	80 93 a0 24 	sts	0x24A0, r24	; 0x8024a0 <udd_g_ctrlreq+0xa>
    192a:	90 93 a1 24 	sts	0x24A1, r25	; 0x8024a1 <udd_g_ctrlreq+0xb>
    192e:	c3 c1       	rjmp	.+902    	; 0x1cb6 <udc_process_setup+0x4f8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1930:	21 30       	cpi	r18, 0x01	; 1
    1932:	31 05       	cpc	r19, r1
    1934:	09 f0       	breq	.+2      	; 0x1938 <udc_process_setup+0x17a>
    1936:	36 c1       	rjmp	.+620    	; 0x1ba4 <udc_process_setup+0x3e6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1938:	61 e0       	ldi	r22, 0x01	; 1
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	82 e6       	ldi	r24, 0x62	; 98
    193e:	92 e2       	ldi	r25, 0x22	; 34
    1940:	9d d5       	rcall	.+2874   	; 0x247c <udd_set_setup_payload>
    1942:	b9 c1       	rjmp	.+882    	; 0x1cb6 <udc_process_setup+0x4f8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1944:	81 30       	cpi	r24, 0x01	; 1
    1946:	e1 f5       	brne	.+120    	; 0x19c0 <udc_process_setup+0x202>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1948:	90 91 97 24 	lds	r25, 0x2497	; 0x802497 <udd_g_ctrlreq+0x1>
    194c:	9a 30       	cpi	r25, 0x0A	; 10
    194e:	c1 f5       	brne	.+112    	; 0x19c0 <udc_process_setup+0x202>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1950:	21 30       	cpi	r18, 0x01	; 1
    1952:	31 05       	cpc	r19, r1
    1954:	09 f0       	breq	.+2      	; 0x1958 <udc_process_setup+0x19a>
    1956:	26 c1       	rjmp	.+588    	; 0x1ba4 <udc_process_setup+0x3e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1958:	80 91 62 22 	lds	r24, 0x2262	; 0x802262 <udc_num_configuration>
    195c:	88 23       	and	r24, r24
    195e:	09 f4       	brne	.+2      	; 0x1962 <udc_process_setup+0x1a4>
    1960:	21 c1       	rjmp	.+578    	; 0x1ba4 <udc_process_setup+0x3e6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1962:	c0 91 9a 24 	lds	r28, 0x249A	; 0x80249a <udd_g_ctrlreq+0x4>
    1966:	d0 91 9b 24 	lds	r29, 0x249B	; 0x80249b <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    196a:	00 91 60 22 	lds	r16, 0x2260	; 0x802260 <udc_ptr_conf>
    196e:	10 91 61 22 	lds	r17, 0x2261	; 0x802261 <udc_ptr_conf+0x1>
    1972:	d8 01       	movw	r26, r16
    1974:	ed 91       	ld	r30, X+
    1976:	fc 91       	ld	r31, X
    1978:	84 81       	ldd	r24, Z+4	; 0x04
    197a:	c8 17       	cp	r28, r24
    197c:	08 f0       	brcs	.+2      	; 0x1980 <udc_process_setup+0x1c2>
    197e:	12 c1       	rjmp	.+548    	; 0x1ba4 <udc_process_setup+0x3e6>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1980:	60 e0       	ldi	r22, 0x00	; 0
    1982:	8c 2f       	mov	r24, r28
    1984:	15 de       	rcall	.-982    	; 0x15b0 <udc_update_iface_desc>
    1986:	88 23       	and	r24, r24
    1988:	09 f4       	brne	.+2      	; 0x198c <udc_process_setup+0x1ce>
    198a:	0c c1       	rjmp	.+536    	; 0x1ba4 <udc_process_setup+0x3e6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    198c:	ce 01       	movw	r24, r28
    198e:	99 27       	eor	r25, r25
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	d8 01       	movw	r26, r16
    1996:	12 96       	adiw	r26, 0x02	; 2
    1998:	ed 91       	ld	r30, X+
    199a:	fc 91       	ld	r31, X
    199c:	13 97       	sbiw	r26, 0x03	; 3
    199e:	e8 0f       	add	r30, r24
    19a0:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    19a2:	01 90       	ld	r0, Z+
    19a4:	f0 81       	ld	r31, Z
    19a6:	e0 2d       	mov	r30, r0
    19a8:	86 81       	ldd	r24, Z+6	; 0x06
    19aa:	97 81       	ldd	r25, Z+7	; 0x07
    19ac:	fc 01       	movw	r30, r24
    19ae:	19 95       	eicall
    19b0:	80 93 64 22 	sts	0x2264, r24	; 0x802264 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    19b4:	61 e0       	ldi	r22, 0x01	; 1
    19b6:	70 e0       	ldi	r23, 0x00	; 0
    19b8:	84 e6       	ldi	r24, 0x64	; 100
    19ba:	92 e2       	ldi	r25, 0x22	; 34
    19bc:	5f d5       	rcall	.+2750   	; 0x247c <udd_set_setup_payload>
    19be:	7b c1       	rjmp	.+758    	; 0x1cb6 <udc_process_setup+0x4f8>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    19c0:	82 30       	cpi	r24, 0x02	; 2
    19c2:	09 f0       	breq	.+2      	; 0x19c6 <udc_process_setup+0x208>
    19c4:	ef c0       	rjmp	.+478    	; 0x1ba4 <udc_process_setup+0x3e6>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    19c6:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <udd_g_ctrlreq+0x1>
    19ca:	81 11       	cpse	r24, r1
    19cc:	e4 c0       	rjmp	.+456    	; 0x1b96 <udc_process_setup+0x3d8>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    19ce:	22 30       	cpi	r18, 0x02	; 2
    19d0:	31 05       	cpc	r19, r1
    19d2:	09 f0       	breq	.+2      	; 0x19d6 <udc_process_setup+0x218>
    19d4:	e7 c0       	rjmp	.+462    	; 0x1ba4 <udc_process_setup+0x3e6>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    19d6:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <udd_g_ctrlreq+0x4>
    19da:	df d5       	rcall	.+3006   	; 0x259a <udd_ep_is_halted>
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	80 93 5c 22 	sts	0x225C, r24	; 0x80225c <udc_ep_status.4671>
    19e2:	90 93 5d 22 	sts	0x225D, r25	; 0x80225d <udc_ep_status.4671+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    19e6:	62 e0       	ldi	r22, 0x02	; 2
    19e8:	70 e0       	ldi	r23, 0x00	; 0
    19ea:	8c e5       	ldi	r24, 0x5C	; 92
    19ec:	92 e2       	ldi	r25, 0x22	; 34
    19ee:	46 d5       	rcall	.+2700   	; 0x247c <udd_set_setup_payload>
    19f0:	62 c1       	rjmp	.+708    	; 0x1cb6 <udc_process_setup+0x4f8>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    19f2:	8f 71       	andi	r24, 0x1F	; 31
    19f4:	09 f0       	breq	.+2      	; 0x19f8 <udc_process_setup+0x23a>
    19f6:	83 c0       	rjmp	.+262    	; 0x1afe <udc_process_setup+0x340>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    19f8:	90 91 97 24 	lds	r25, 0x2497	; 0x802497 <udd_g_ctrlreq+0x1>
    19fc:	93 30       	cpi	r25, 0x03	; 3
    19fe:	09 f4       	brne	.+2      	; 0x1a02 <udc_process_setup+0x244>
    1a00:	cc c0       	rjmp	.+408    	; 0x1b9a <udc_process_setup+0x3dc>
    1a02:	18 f4       	brcc	.+6      	; 0x1a0a <udc_process_setup+0x24c>
    1a04:	91 30       	cpi	r25, 0x01	; 1
    1a06:	a1 f0       	breq	.+40     	; 0x1a30 <udc_process_setup+0x272>
    1a08:	7a c0       	rjmp	.+244    	; 0x1afe <udc_process_setup+0x340>
    1a0a:	95 30       	cpi	r25, 0x05	; 5
    1a0c:	19 f0       	breq	.+6      	; 0x1a14 <udc_process_setup+0x256>
    1a0e:	99 30       	cpi	r25, 0x09	; 9
    1a10:	39 f1       	breq	.+78     	; 0x1a60 <udc_process_setup+0x2a2>
    1a12:	75 c0       	rjmp	.+234    	; 0x1afe <udc_process_setup+0x340>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1a14:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <udd_g_ctrlreq+0x6>
    1a18:	90 91 9d 24 	lds	r25, 0x249D	; 0x80249d <udd_g_ctrlreq+0x7>
    1a1c:	89 2b       	or	r24, r25
    1a1e:	09 f0       	breq	.+2      	; 0x1a22 <udc_process_setup+0x264>
    1a20:	c1 c0       	rjmp	.+386    	; 0x1ba4 <udc_process_setup+0x3e6>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1a22:	83 ed       	ldi	r24, 0xD3	; 211
    1a24:	9a e0       	ldi	r25, 0x0A	; 10
    1a26:	80 93 a2 24 	sts	0x24A2, r24	; 0x8024a2 <udd_g_ctrlreq+0xc>
    1a2a:	90 93 a3 24 	sts	0x24A3, r25	; 0x8024a3 <udd_g_ctrlreq+0xd>
    1a2e:	43 c1       	rjmp	.+646    	; 0x1cb6 <udc_process_setup+0x4f8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1a30:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <udd_g_ctrlreq+0x6>
    1a34:	90 91 9d 24 	lds	r25, 0x249D	; 0x80249d <udd_g_ctrlreq+0x7>
    1a38:	89 2b       	or	r24, r25
    1a3a:	09 f0       	breq	.+2      	; 0x1a3e <udc_process_setup+0x280>
    1a3c:	b3 c0       	rjmp	.+358    	; 0x1ba4 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1a3e:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <udd_g_ctrlreq+0x2>
    1a42:	90 91 99 24 	lds	r25, 0x2499	; 0x802499 <udd_g_ctrlreq+0x3>
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	09 f0       	breq	.+2      	; 0x1a4c <udc_process_setup+0x28e>
    1a4a:	ac c0       	rjmp	.+344    	; 0x1ba4 <udc_process_setup+0x3e6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1a4c:	80 91 66 22 	lds	r24, 0x2266	; 0x802266 <udc_device_status>
    1a50:	90 91 67 22 	lds	r25, 0x2267	; 0x802267 <udc_device_status+0x1>
    1a54:	8d 7f       	andi	r24, 0xFD	; 253
    1a56:	80 93 66 22 	sts	0x2266, r24	; 0x802266 <udc_device_status>
    1a5a:	90 93 67 22 	sts	0x2267, r25	; 0x802267 <udc_device_status+0x1>
    1a5e:	2b c1       	rjmp	.+598    	; 0x1cb6 <udc_process_setup+0x4f8>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1a60:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <udd_g_ctrlreq+0x6>
    1a64:	90 91 9d 24 	lds	r25, 0x249D	; 0x80249d <udd_g_ctrlreq+0x7>
    1a68:	89 2b       	or	r24, r25
    1a6a:	09 f0       	breq	.+2      	; 0x1a6e <udc_process_setup+0x2b0>
    1a6c:	9b c0       	rjmp	.+310    	; 0x1ba4 <udc_process_setup+0x3e6>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1a6e:	fb d4       	rcall	.+2550   	; 0x2466 <udd_getaddress>
    1a70:	88 23       	and	r24, r24
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <udc_process_setup+0x2b8>
    1a74:	97 c0       	rjmp	.+302    	; 0x1ba4 <udc_process_setup+0x3e6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1a76:	20 91 98 24 	lds	r18, 0x2498	; 0x802498 <udd_g_ctrlreq+0x2>
    1a7a:	30 91 99 24 	lds	r19, 0x2499	; 0x802499 <udd_g_ctrlreq+0x3>
    1a7e:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1a80:	e0 91 72 20 	lds	r30, 0x2072	; 0x802072 <udc_config>
    1a84:	f0 91 73 20 	lds	r31, 0x2073	; 0x802073 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1a88:	81 89       	ldd	r24, Z+17	; 0x11
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	82 17       	cp	r24, r18
    1a8e:	93 07       	cpc	r25, r19
    1a90:	08 f4       	brcc	.+2      	; 0x1a94 <udc_process_setup+0x2d6>
    1a92:	88 c0       	rjmp	.+272    	; 0x1ba4 <udc_process_setup+0x3e6>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1a94:	3d de       	rcall	.-902    	; 0x1710 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1a96:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <udd_g_ctrlreq+0x2>
    1a9a:	90 91 99 24 	lds	r25, 0x2499	; 0x802499 <udd_g_ctrlreq+0x3>
    1a9e:	80 93 62 22 	sts	0x2262, r24	; 0x802262 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1aa2:	88 23       	and	r24, r24
    1aa4:	09 f4       	brne	.+2      	; 0x1aa8 <udc_process_setup+0x2ea>
    1aa6:	07 c1       	rjmp	.+526    	; 0x1cb6 <udc_process_setup+0x4f8>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1aa8:	99 27       	eor	r25, r25
    1aaa:	81 50       	subi	r24, 0x01	; 1
    1aac:	90 4c       	sbci	r25, 0xC0	; 192
    1aae:	88 0f       	add	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	e0 91 74 20 	lds	r30, 0x2074	; 0x802074 <udc_config+0x2>
    1aba:	f0 91 75 20 	lds	r31, 0x2075	; 0x802075 <udc_config+0x3>
    1abe:	e8 0f       	add	r30, r24
    1ac0:	f9 1f       	adc	r31, r25
    1ac2:	e0 93 60 22 	sts	0x2260, r30	; 0x802260 <udc_ptr_conf>
    1ac6:	f0 93 61 22 	sts	0x2261, r31	; 0x802261 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1aca:	01 90       	ld	r0, Z+
    1acc:	f0 81       	ld	r31, Z
    1ace:	e0 2d       	mov	r30, r0
    1ad0:	84 81       	ldd	r24, Z+4	; 0x04
    1ad2:	88 23       	and	r24, r24
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <udc_process_setup+0x31a>
    1ad6:	ef c0       	rjmp	.+478    	; 0x1cb6 <udc_process_setup+0x4f8>
    1ad8:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1ada:	60 e0       	ldi	r22, 0x00	; 0
    1adc:	8c 2f       	mov	r24, r28
    1ade:	e4 dd       	rcall	.-1080   	; 0x16a8 <udc_iface_enable>
    1ae0:	88 23       	and	r24, r24
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <udc_process_setup+0x328>
    1ae4:	5f c0       	rjmp	.+190    	; 0x1ba4 <udc_process_setup+0x3e6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1ae6:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ae8:	e0 91 60 22 	lds	r30, 0x2260	; 0x802260 <udc_ptr_conf>
    1aec:	f0 91 61 22 	lds	r31, 0x2261	; 0x802261 <udc_ptr_conf+0x1>
    1af0:	01 90       	ld	r0, Z+
    1af2:	f0 81       	ld	r31, Z
    1af4:	e0 2d       	mov	r30, r0
    1af6:	84 81       	ldd	r24, Z+4	; 0x04
    1af8:	c8 17       	cp	r28, r24
    1afa:	78 f3       	brcs	.-34     	; 0x1ada <udc_process_setup+0x31c>
    1afc:	dc c0       	rjmp	.+440    	; 0x1cb6 <udc_process_setup+0x4f8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1afe:	81 30       	cpi	r24, 0x01	; 1
    1b00:	e1 f4       	brne	.+56     	; 0x1b3a <udc_process_setup+0x37c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b02:	90 91 97 24 	lds	r25, 0x2497	; 0x802497 <udd_g_ctrlreq+0x1>
    1b06:	9b 30       	cpi	r25, 0x0B	; 11
    1b08:	c1 f4       	brne	.+48     	; 0x1b3a <udc_process_setup+0x37c>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1b0a:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <udd_g_ctrlreq+0x6>
    1b0e:	90 91 9d 24 	lds	r25, 0x249D	; 0x80249d <udd_g_ctrlreq+0x7>
    1b12:	89 2b       	or	r24, r25
    1b14:	09 f0       	breq	.+2      	; 0x1b18 <udc_process_setup+0x35a>
    1b16:	46 c0       	rjmp	.+140    	; 0x1ba4 <udc_process_setup+0x3e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1b18:	80 91 62 22 	lds	r24, 0x2262	; 0x802262 <udc_num_configuration>
    1b1c:	88 23       	and	r24, r24
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <udc_process_setup+0x364>
    1b20:	41 c0       	rjmp	.+130    	; 0x1ba4 <udc_process_setup+0x3e6>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1b22:	e6 e9       	ldi	r30, 0x96	; 150
    1b24:	f4 e2       	ldi	r31, 0x24	; 36
    1b26:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1b28:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1b2a:	8c 2f       	mov	r24, r28
    1b2c:	7b dd       	rcall	.-1290   	; 0x1624 <udc_iface_disable>
    1b2e:	88 23       	and	r24, r24
    1b30:	c9 f1       	breq	.+114    	; 0x1ba4 <udc_process_setup+0x3e6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1b32:	6d 2f       	mov	r22, r29
    1b34:	8c 2f       	mov	r24, r28
    1b36:	b8 dd       	rcall	.-1168   	; 0x16a8 <udc_iface_enable>
    1b38:	33 c0       	rjmp	.+102    	; 0x1ba0 <udc_process_setup+0x3e2>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1b3a:	82 30       	cpi	r24, 0x02	; 2
    1b3c:	99 f5       	brne	.+102    	; 0x1ba4 <udc_process_setup+0x3e6>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b3e:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <udd_g_ctrlreq+0x1>
    1b42:	81 30       	cpi	r24, 0x01	; 1
    1b44:	19 f0       	breq	.+6      	; 0x1b4c <udc_process_setup+0x38e>
    1b46:	83 30       	cpi	r24, 0x03	; 3
    1b48:	89 f0       	breq	.+34     	; 0x1b6c <udc_process_setup+0x3ae>
    1b4a:	29 c0       	rjmp	.+82     	; 0x1b9e <udc_process_setup+0x3e0>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b4c:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <udd_g_ctrlreq+0x6>
    1b50:	90 91 9d 24 	lds	r25, 0x249D	; 0x80249d <udd_g_ctrlreq+0x7>
    1b54:	89 2b       	or	r24, r25
    1b56:	31 f5       	brne	.+76     	; 0x1ba4 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1b58:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <udd_g_ctrlreq+0x2>
    1b5c:	90 91 99 24 	lds	r25, 0x2499	; 0x802499 <udd_g_ctrlreq+0x3>
    1b60:	89 2b       	or	r24, r25
    1b62:	01 f5       	brne	.+64     	; 0x1ba4 <udc_process_setup+0x3e6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1b64:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <udd_g_ctrlreq+0x4>
    1b68:	33 d5       	rcall	.+2662   	; 0x25d0 <udd_ep_clear_halt>
    1b6a:	1a c0       	rjmp	.+52     	; 0x1ba0 <udc_process_setup+0x3e2>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b6c:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <udd_g_ctrlreq+0x6>
    1b70:	90 91 9d 24 	lds	r25, 0x249D	; 0x80249d <udd_g_ctrlreq+0x7>
    1b74:	89 2b       	or	r24, r25
    1b76:	b1 f4       	brne	.+44     	; 0x1ba4 <udc_process_setup+0x3e6>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1b78:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <udd_g_ctrlreq+0x2>
    1b7c:	90 91 99 24 	lds	r25, 0x2499	; 0x802499 <udd_g_ctrlreq+0x3>
    1b80:	89 2b       	or	r24, r25
    1b82:	81 f4       	brne	.+32     	; 0x1ba4 <udc_process_setup+0x3e6>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1b84:	c6 e9       	ldi	r28, 0x96	; 150
    1b86:	d4 e2       	ldi	r29, 0x24	; 36
    1b88:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8a:	20 d6       	rcall	.+3136   	; 0x27cc <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8e:	83 d6       	rcall	.+3334   	; 0x2896 <udd_ep_set_halt>
    1b90:	07 c0       	rjmp	.+14     	; 0x1ba0 <udc_process_setup+0x3e2>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	05 c0       	rjmp	.+10     	; 0x1ba0 <udc_process_setup+0x3e2>
				break;
			}
		}
#endif
	}
	return false;
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	03 c0       	rjmp	.+6      	; 0x1ba0 <udc_process_setup+0x3e2>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	01 c0       	rjmp	.+2      	; 0x1ba0 <udc_process_setup+0x3e2>
				break;
			}
		}
#endif
	}
	return false;
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1ba0:	81 11       	cpse	r24, r1
    1ba2:	8a c0       	rjmp	.+276    	; 0x1cb8 <udc_process_setup+0x4fa>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1ba4:	80 91 96 24 	lds	r24, 0x2496	; 0x802496 <udd_g_ctrlreq>
    1ba8:	8f 71       	andi	r24, 0x1F	; 31
    1baa:	81 30       	cpi	r24, 0x01	; 1
    1bac:	71 f5       	brne	.+92     	; 0x1c0a <udc_process_setup+0x44c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1bae:	80 91 62 22 	lds	r24, 0x2262	; 0x802262 <udc_num_configuration>
    1bb2:	88 23       	and	r24, r24
    1bb4:	51 f1       	breq	.+84     	; 0x1c0a <udc_process_setup+0x44c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1bb6:	00 91 9a 24 	lds	r16, 0x249A	; 0x80249a <udd_g_ctrlreq+0x4>
    1bba:	10 91 9b 24 	lds	r17, 0x249B	; 0x80249b <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1bbe:	c0 91 60 22 	lds	r28, 0x2260	; 0x802260 <udc_ptr_conf>
    1bc2:	d0 91 61 22 	lds	r29, 0x2261	; 0x802261 <udc_ptr_conf+0x1>
    1bc6:	e8 81       	ld	r30, Y
    1bc8:	f9 81       	ldd	r31, Y+1	; 0x01
    1bca:	84 81       	ldd	r24, Z+4	; 0x04
    1bcc:	08 17       	cp	r16, r24
    1bce:	e8 f4       	brcc	.+58     	; 0x1c0a <udc_process_setup+0x44c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1bd0:	60 e0       	ldi	r22, 0x00	; 0
    1bd2:	80 2f       	mov	r24, r16
    1bd4:	ed dc       	rcall	.-1574   	; 0x15b0 <udc_update_iface_desc>
    1bd6:	88 23       	and	r24, r24
    1bd8:	c1 f0       	breq	.+48     	; 0x1c0a <udc_process_setup+0x44c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1bda:	f8 01       	movw	r30, r16
    1bdc:	ff 27       	eor	r31, r31
    1bde:	cf 01       	movw	r24, r30
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	ea 81       	ldd	r30, Y+2	; 0x02
    1be6:	fb 81       	ldd	r31, Y+3	; 0x03
    1be8:	e8 0f       	add	r30, r24
    1bea:	f9 1f       	adc	r31, r25
    1bec:	c0 81       	ld	r28, Z
    1bee:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1bf0:	ee 81       	ldd	r30, Y+6	; 0x06
    1bf2:	ff 81       	ldd	r31, Y+7	; 0x07
    1bf4:	19 95       	eicall
    1bf6:	68 2f       	mov	r22, r24
    1bf8:	80 2f       	mov	r24, r16
    1bfa:	da dc       	rcall	.-1612   	; 0x15b0 <udc_update_iface_desc>
    1bfc:	88 23       	and	r24, r24
    1bfe:	29 f0       	breq	.+10     	; 0x1c0a <udc_process_setup+0x44c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1c00:	ec 81       	ldd	r30, Y+4	; 0x04
    1c02:	fd 81       	ldd	r31, Y+5	; 0x05
    1c04:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1c06:	81 11       	cpse	r24, r1
    1c08:	57 c0       	rjmp	.+174    	; 0x1cb8 <udc_process_setup+0x4fa>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1c0a:	80 91 96 24 	lds	r24, 0x2496	; 0x802496 <udd_g_ctrlreq>
    1c0e:	8f 71       	andi	r24, 0x1F	; 31
    1c10:	82 30       	cpi	r24, 0x02	; 2
    1c12:	09 f0       	breq	.+2      	; 0x1c16 <udc_process_setup+0x458>
    1c14:	40 c0       	rjmp	.+128    	; 0x1c96 <udc_process_setup+0x4d8>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1c16:	80 91 62 22 	lds	r24, 0x2262	; 0x802262 <udc_num_configuration>
    1c1a:	88 23       	and	r24, r24
    1c1c:	b1 f1       	breq	.+108    	; 0x1c8a <udc_process_setup+0x4cc>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c1e:	a0 91 60 22 	lds	r26, 0x2260	; 0x802260 <udc_ptr_conf>
    1c22:	b0 91 61 22 	lds	r27, 0x2261	; 0x802261 <udc_ptr_conf+0x1>
    1c26:	ed 91       	ld	r30, X+
    1c28:	fc 91       	ld	r31, X
    1c2a:	11 97       	sbiw	r26, 0x01	; 1
    1c2c:	84 81       	ldd	r24, Z+4	; 0x04
    1c2e:	88 23       	and	r24, r24
    1c30:	71 f1       	breq	.+92     	; 0x1c8e <udc_process_setup+0x4d0>
    1c32:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1c34:	ec 2f       	mov	r30, r28
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	ee 0f       	add	r30, r30
    1c3a:	ff 1f       	adc	r31, r31
    1c3c:	12 96       	adiw	r26, 0x02	; 2
    1c3e:	8d 91       	ld	r24, X+
    1c40:	9c 91       	ld	r25, X
    1c42:	13 97       	sbiw	r26, 0x03	; 3
    1c44:	e8 0f       	add	r30, r24
    1c46:	f9 1f       	adc	r31, r25
    1c48:	00 81       	ld	r16, Z
    1c4a:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1c4c:	d8 01       	movw	r26, r16
    1c4e:	16 96       	adiw	r26, 0x06	; 6
    1c50:	ed 91       	ld	r30, X+
    1c52:	fc 91       	ld	r31, X
    1c54:	17 97       	sbiw	r26, 0x07	; 7
    1c56:	19 95       	eicall
    1c58:	68 2f       	mov	r22, r24
    1c5a:	8c 2f       	mov	r24, r28
    1c5c:	a9 dc       	rcall	.-1710   	; 0x15b0 <udc_update_iface_desc>
    1c5e:	88 23       	and	r24, r24
    1c60:	59 f1       	breq	.+86     	; 0x1cb8 <udc_process_setup+0x4fa>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1c62:	d8 01       	movw	r26, r16
    1c64:	14 96       	adiw	r26, 0x04	; 4
    1c66:	ed 91       	ld	r30, X+
    1c68:	fc 91       	ld	r31, X
    1c6a:	15 97       	sbiw	r26, 0x05	; 5
    1c6c:	19 95       	eicall
    1c6e:	81 11       	cpse	r24, r1
    1c70:	23 c0       	rjmp	.+70     	; 0x1cb8 <udc_process_setup+0x4fa>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1c72:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c74:	a0 91 60 22 	lds	r26, 0x2260	; 0x802260 <udc_ptr_conf>
    1c78:	b0 91 61 22 	lds	r27, 0x2261	; 0x802261 <udc_ptr_conf+0x1>
    1c7c:	ed 91       	ld	r30, X+
    1c7e:	fc 91       	ld	r31, X
    1c80:	11 97       	sbiw	r26, 0x01	; 1
    1c82:	94 81       	ldd	r25, Z+4	; 0x04
    1c84:	c9 17       	cp	r28, r25
    1c86:	b0 f2       	brcs	.-84     	; 0x1c34 <udc_process_setup+0x476>
    1c88:	17 c0       	rjmp	.+46     	; 0x1cb8 <udc_process_setup+0x4fa>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	15 c0       	rjmp	.+42     	; 0x1cb8 <udc_process_setup+0x4fa>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	13 c0       	rjmp	.+38     	; 0x1cb8 <udc_process_setup+0x4fa>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	11 c0       	rjmp	.+34     	; 0x1cb8 <udc_process_setup+0x4fa>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	0f c0       	rjmp	.+30     	; 0x1cb8 <udc_process_setup+0x4fa>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1c9a:	98 2f       	mov	r25, r24
    1c9c:	90 76       	andi	r25, 0x60	; 96
    1c9e:	09 f0       	breq	.+2      	; 0x1ca2 <udc_process_setup+0x4e4>
    1ca0:	81 cf       	rjmp	.-254    	; 0x1ba4 <udc_process_setup+0x3e6>
    1ca2:	a6 cd       	rjmp	.-1204   	; 0x17f0 <udc_process_setup+0x32>
    1ca4:	98 2f       	mov	r25, r24
    1ca6:	90 76       	andi	r25, 0x60	; 96
    1ca8:	09 f0       	breq	.+2      	; 0x1cac <udc_process_setup+0x4ee>
    1caa:	7c cf       	rjmp	.-264    	; 0x1ba4 <udc_process_setup+0x3e6>
    1cac:	a2 ce       	rjmp	.-700    	; 0x19f2 <udc_process_setup+0x234>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1cae:	22 e1       	ldi	r18, 0x12	; 18
		str = udc_string_product_name;
    1cb0:	88 e4       	ldi	r24, 0x48	; 72
    1cb2:	90 e2       	ldi	r25, 0x20	; 32
    1cb4:	18 ce       	rjmp	.-976    	; 0x18e6 <udc_process_setup+0x128>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1cb8:	df 91       	pop	r29
    1cba:	cf 91       	pop	r28
    1cbc:	1f 91       	pop	r17
    1cbe:	0f 91       	pop	r16
    1cc0:	08 95       	ret

00001cc2 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	1f 92       	push	r1
    1cc8:	1f 92       	push	r1
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
    1cce:	81 11       	cpse	r24, r1
    1cd0:	26 c0       	rjmp	.+76     	; 0x1d1e <udd_sleep_mode+0x5c>
    1cd2:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <udd_b_idle>
    1cd6:	99 23       	and	r25, r25
    1cd8:	f9 f0       	breq	.+62     	; 0x1d18 <udd_sleep_mode+0x56>
    1cda:	90 91 a7 24 	lds	r25, 0x24A7	; 0x8024a7 <sleepmgr_locks+0x1>
    1cde:	91 11       	cpse	r25, r1
    1ce0:	01 c0       	rjmp	.+2      	; 0x1ce4 <udd_sleep_mode+0x22>
    1ce2:	ff cf       	rjmp	.-2      	; 0x1ce2 <udd_sleep_mode+0x20>
    1ce4:	9f b7       	in	r25, 0x3f	; 63
    1ce6:	9a 83       	std	Y+2, r25	; 0x02
    1ce8:	f8 94       	cli
    1cea:	2a 81       	ldd	r18, Y+2	; 0x02
    1cec:	e6 ea       	ldi	r30, 0xA6	; 166
    1cee:	f4 e2       	ldi	r31, 0x24	; 36
    1cf0:	91 81       	ldd	r25, Z+1	; 0x01
    1cf2:	91 50       	subi	r25, 0x01	; 1
    1cf4:	91 83       	std	Z+1, r25	; 0x01
    1cf6:	2f bf       	out	0x3f, r18	; 63
    1cf8:	0f c0       	rjmp	.+30     	; 0x1d18 <udd_sleep_mode+0x56>
    1cfa:	90 91 a7 24 	lds	r25, 0x24A7	; 0x8024a7 <sleepmgr_locks+0x1>
    1cfe:	9f 3f       	cpi	r25, 0xFF	; 255
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <udd_sleep_mode+0x42>
    1d02:	ff cf       	rjmp	.-2      	; 0x1d02 <udd_sleep_mode+0x40>
    1d04:	9f b7       	in	r25, 0x3f	; 63
    1d06:	99 83       	std	Y+1, r25	; 0x01
    1d08:	f8 94       	cli
    1d0a:	29 81       	ldd	r18, Y+1	; 0x01
    1d0c:	e6 ea       	ldi	r30, 0xA6	; 166
    1d0e:	f4 e2       	ldi	r31, 0x24	; 36
    1d10:	91 81       	ldd	r25, Z+1	; 0x01
    1d12:	9f 5f       	subi	r25, 0xFF	; 255
    1d14:	91 83       	std	Z+1, r25	; 0x01
    1d16:	2f bf       	out	0x3f, r18	; 63
    1d18:	80 93 94 23 	sts	0x2394, r24	; 0x802394 <udd_b_idle>
    1d1c:	05 c0       	rjmp	.+10     	; 0x1d28 <udd_sleep_mode+0x66>
    1d1e:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <udd_b_idle>
    1d22:	99 23       	and	r25, r25
    1d24:	51 f3       	breq	.-44     	; 0x1cfa <udd_sleep_mode+0x38>
    1d26:	f8 cf       	rjmp	.-16     	; 0x1d18 <udd_sleep_mode+0x56>
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	08 95       	ret

00001d32 <udd_ctrl_init>:
    1d32:	0f 93       	push	r16
    1d34:	e8 ec       	ldi	r30, 0xC8	; 200
    1d36:	f4 e0       	ldi	r31, 0x04	; 4
    1d38:	80 81       	ld	r24, Z
    1d3a:	8f 7d       	andi	r24, 0xDF	; 223
    1d3c:	80 83       	st	Z, r24
    1d3e:	80 81       	ld	r24, Z
    1d40:	8f 7d       	andi	r24, 0xDF	; 223
    1d42:	80 83       	st	Z, r24
    1d44:	e8 e6       	ldi	r30, 0x68	; 104
    1d46:	f3 e2       	ldi	r31, 0x23	; 35
    1d48:	02 e0       	ldi	r16, 0x02	; 2
    1d4a:	05 93       	las	Z, r16
    1d4c:	10 92 6a 23 	sts	0x236A, r1	; 0x80236a <udd_sram+0x16>
    1d50:	10 92 6b 23 	sts	0x236B, r1	; 0x80236b <udd_sram+0x17>
    1d54:	00 e2       	ldi	r16, 0x20	; 32
    1d56:	06 93       	lac	Z, r16
    1d58:	00 e4       	ldi	r16, 0x40	; 64
    1d5a:	06 93       	lac	Z, r16
    1d5c:	e0 e6       	ldi	r30, 0x60	; 96
    1d5e:	f3 e2       	ldi	r31, 0x23	; 35
    1d60:	00 e4       	ldi	r16, 0x40	; 64
    1d62:	06 93       	lac	Z, r16
    1d64:	e6 e9       	ldi	r30, 0x96	; 150
    1d66:	f4 e2       	ldi	r31, 0x24	; 36
    1d68:	14 86       	std	Z+12, r1	; 0x0c
    1d6a:	15 86       	std	Z+13, r1	; 0x0d
    1d6c:	16 86       	std	Z+14, r1	; 0x0e
    1d6e:	17 86       	std	Z+15, r1	; 0x0f
    1d70:	12 86       	std	Z+10, r1	; 0x0a
    1d72:	13 86       	std	Z+11, r1	; 0x0b
    1d74:	10 92 51 23 	sts	0x2351, r1	; 0x802351 <udd_ep_control_state>
    1d78:	0f 91       	pop	r16
    1d7a:	08 95       	ret

00001d7c <udd_ctrl_stall_data>:
    1d7c:	0f 93       	push	r16
    1d7e:	85 e0       	ldi	r24, 0x05	; 5
    1d80:	80 93 51 23 	sts	0x2351, r24	; 0x802351 <udd_ep_control_state>
    1d84:	e9 e6       	ldi	r30, 0x69	; 105
    1d86:	f3 e2       	ldi	r31, 0x23	; 35
    1d88:	04 e0       	ldi	r16, 0x04	; 4
    1d8a:	05 93       	las	Z, r16
    1d8c:	e1 e6       	ldi	r30, 0x61	; 97
    1d8e:	f3 e2       	ldi	r31, 0x23	; 35
    1d90:	04 e0       	ldi	r16, 0x04	; 4
    1d92:	05 93       	las	Z, r16
    1d94:	0f 91       	pop	r16
    1d96:	08 95       	ret

00001d98 <udd_ctrl_send_zlp_in>:
    1d98:	0f 93       	push	r16
    1d9a:	83 e0       	ldi	r24, 0x03	; 3
    1d9c:	80 93 51 23 	sts	0x2351, r24	; 0x802351 <udd_ep_control_state>
    1da0:	10 92 6a 23 	sts	0x236A, r1	; 0x80236a <udd_sram+0x16>
    1da4:	10 92 6b 23 	sts	0x236B, r1	; 0x80236b <udd_sram+0x17>
    1da8:	e8 e6       	ldi	r30, 0x68	; 104
    1daa:	f3 e2       	ldi	r31, 0x23	; 35
    1dac:	02 e0       	ldi	r16, 0x02	; 2
    1dae:	06 93       	lac	Z, r16
    1db0:	0f 91       	pop	r16
    1db2:	08 95       	ret

00001db4 <udd_ctrl_endofrequest>:
    1db4:	e0 91 a2 24 	lds	r30, 0x24A2	; 0x8024a2 <udd_g_ctrlreq+0xc>
    1db8:	f0 91 a3 24 	lds	r31, 0x24A3	; 0x8024a3 <udd_g_ctrlreq+0xd>
    1dbc:	30 97       	sbiw	r30, 0x00	; 0
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <udd_ctrl_endofrequest+0xe>
    1dc0:	19 95       	eicall
    1dc2:	08 95       	ret

00001dc4 <udd_ctrl_in_sent>:
    1dc4:	0f 93       	push	r16
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	80 91 51 23 	lds	r24, 0x2351	; 0x802351 <udd_ep_control_state>
    1dce:	83 30       	cpi	r24, 0x03	; 3
    1dd0:	19 f4       	brne	.+6      	; 0x1dd8 <udd_ctrl_in_sent+0x14>
    1dd2:	f0 df       	rcall	.-32     	; 0x1db4 <udd_ctrl_endofrequest>
    1dd4:	ae df       	rcall	.-164    	; 0x1d32 <udd_ctrl_init>
    1dd6:	5e c0       	rjmp	.+188    	; 0x1e94 <udd_ctrl_in_sent+0xd0>
    1dd8:	80 91 4d 23 	lds	r24, 0x234D	; 0x80234d <udd_ctrl_payload_nb_trans>
    1ddc:	90 91 4e 23 	lds	r25, 0x234E	; 0x80234e <udd_ctrl_payload_nb_trans+0x1>
    1de0:	c0 91 a0 24 	lds	r28, 0x24A0	; 0x8024a0 <udd_g_ctrlreq+0xa>
    1de4:	d0 91 a1 24 	lds	r29, 0x24A1	; 0x8024a1 <udd_g_ctrlreq+0xb>
    1de8:	c8 1b       	sub	r28, r24
    1dea:	d9 0b       	sbc	r29, r25
    1dec:	71 f5       	brne	.+92     	; 0x1e4a <udd_ctrl_in_sent+0x86>
    1dee:	20 91 4f 23 	lds	r18, 0x234F	; 0x80234f <udd_ctrl_prev_payload_nb_trans>
    1df2:	30 91 50 23 	lds	r19, 0x2350	; 0x802350 <udd_ctrl_prev_payload_nb_trans+0x1>
    1df6:	82 0f       	add	r24, r18
    1df8:	93 1f       	adc	r25, r19
    1dfa:	80 93 4f 23 	sts	0x234F, r24	; 0x80234f <udd_ctrl_prev_payload_nb_trans>
    1dfe:	90 93 50 23 	sts	0x2350, r25	; 0x802350 <udd_ctrl_prev_payload_nb_trans+0x1>
    1e02:	20 91 9c 24 	lds	r18, 0x249C	; 0x80249c <udd_g_ctrlreq+0x6>
    1e06:	30 91 9d 24 	lds	r19, 0x249D	; 0x80249d <udd_g_ctrlreq+0x7>
    1e0a:	82 17       	cp	r24, r18
    1e0c:	93 07       	cpc	r25, r19
    1e0e:	21 f0       	breq	.+8      	; 0x1e18 <udd_ctrl_in_sent+0x54>
    1e10:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <b_shortpacket.5383>
    1e14:	88 23       	and	r24, r24
    1e16:	41 f0       	breq	.+16     	; 0x1e28 <udd_ctrl_in_sent+0x64>
    1e18:	84 e0       	ldi	r24, 0x04	; 4
    1e1a:	80 93 51 23 	sts	0x2351, r24	; 0x802351 <udd_ep_control_state>
    1e1e:	e0 e6       	ldi	r30, 0x60	; 96
    1e20:	f3 e2       	ldi	r31, 0x23	; 35
    1e22:	02 e0       	ldi	r16, 0x02	; 2
    1e24:	06 93       	lac	Z, r16
    1e26:	36 c0       	rjmp	.+108    	; 0x1e94 <udd_ctrl_in_sent+0xd0>
    1e28:	e0 91 a4 24 	lds	r30, 0x24A4	; 0x8024a4 <udd_g_ctrlreq+0xe>
    1e2c:	f0 91 a5 24 	lds	r31, 0x24A5	; 0x8024a5 <udd_g_ctrlreq+0xf>
    1e30:	30 97       	sbiw	r30, 0x00	; 0
    1e32:	99 f0       	breq	.+38     	; 0x1e5a <udd_ctrl_in_sent+0x96>
    1e34:	19 95       	eicall
    1e36:	88 23       	and	r24, r24
    1e38:	81 f0       	breq	.+32     	; 0x1e5a <udd_ctrl_in_sent+0x96>
    1e3a:	10 92 4d 23 	sts	0x234D, r1	; 0x80234d <udd_ctrl_payload_nb_trans>
    1e3e:	10 92 4e 23 	sts	0x234E, r1	; 0x80234e <udd_ctrl_payload_nb_trans+0x1>
    1e42:	c0 91 a0 24 	lds	r28, 0x24A0	; 0x8024a0 <udd_g_ctrlreq+0xa>
    1e46:	d0 91 a1 24 	lds	r29, 0x24A1	; 0x8024a1 <udd_g_ctrlreq+0xb>
    1e4a:	c0 34       	cpi	r28, 0x40	; 64
    1e4c:	d1 05       	cpc	r29, r1
    1e4e:	28 f0       	brcs	.+10     	; 0x1e5a <udd_ctrl_in_sent+0x96>
    1e50:	10 92 68 22 	sts	0x2268, r1	; 0x802268 <b_shortpacket.5383>
    1e54:	c0 e4       	ldi	r28, 0x40	; 64
    1e56:	d0 e0       	ldi	r29, 0x00	; 0
    1e58:	03 c0       	rjmp	.+6      	; 0x1e60 <udd_ctrl_in_sent+0x9c>
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <b_shortpacket.5383>
    1e60:	e4 e5       	ldi	r30, 0x54	; 84
    1e62:	f3 e2       	ldi	r31, 0x23	; 35
    1e64:	c6 8b       	std	Z+22, r28	; 0x16
    1e66:	d7 8b       	std	Z+23, r29	; 0x17
    1e68:	80 91 4d 23 	lds	r24, 0x234D	; 0x80234d <udd_ctrl_payload_nb_trans>
    1e6c:	90 91 4e 23 	lds	r25, 0x234E	; 0x80234e <udd_ctrl_payload_nb_trans+0x1>
    1e70:	20 91 9e 24 	lds	r18, 0x249E	; 0x80249e <udd_g_ctrlreq+0x8>
    1e74:	30 91 9f 24 	lds	r19, 0x249F	; 0x80249f <udd_g_ctrlreq+0x9>
    1e78:	28 0f       	add	r18, r24
    1e7a:	39 1f       	adc	r19, r25
    1e7c:	20 8f       	std	Z+24, r18	; 0x18
    1e7e:	31 8f       	std	Z+25, r19	; 0x19
    1e80:	c8 0f       	add	r28, r24
    1e82:	d9 1f       	adc	r29, r25
    1e84:	c0 93 4d 23 	sts	0x234D, r28	; 0x80234d <udd_ctrl_payload_nb_trans>
    1e88:	d0 93 4e 23 	sts	0x234E, r29	; 0x80234e <udd_ctrl_payload_nb_trans+0x1>
    1e8c:	e8 e6       	ldi	r30, 0x68	; 104
    1e8e:	f3 e2       	ldi	r31, 0x23	; 35
    1e90:	02 e0       	ldi	r16, 0x02	; 2
    1e92:	06 93       	lac	Z, r16
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
    1e98:	0f 91       	pop	r16
    1e9a:	08 95       	ret

00001e9c <udd_ep_get_size>:
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	81 81       	ldd	r24, Z+1	; 0x01
    1ea0:	e8 2f       	mov	r30, r24
    1ea2:	e7 70       	andi	r30, 0x07	; 7
    1ea4:	8e 2f       	mov	r24, r30
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	31 97       	sbiw	r30, 0x01	; 1
    1eac:	e7 30       	cpi	r30, 0x07	; 7
    1eae:	f1 05       	cpc	r31, r1
    1eb0:	d0 f4       	brcc	.+52     	; 0x1ee6 <udd_ep_get_size+0x4a>
    1eb2:	88 27       	eor	r24, r24
    1eb4:	e2 50       	subi	r30, 0x02	; 2
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1eba:	93 c7       	rjmp	.+3878   	; 0x2de2 <__tablejump2__>
    1ebc:	80 e1       	ldi	r24, 0x10	; 16
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	08 95       	ret
    1ec2:	80 e2       	ldi	r24, 0x20	; 32
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	08 95       	ret
    1ec8:	80 e4       	ldi	r24, 0x40	; 64
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	08 95       	ret
    1ece:	80 e8       	ldi	r24, 0x80	; 128
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	08 95       	ret
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	91 e0       	ldi	r25, 0x01	; 1
    1ed8:	08 95       	ret
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	92 e0       	ldi	r25, 0x02	; 2
    1ede:	08 95       	ret
    1ee0:	8f ef       	ldi	r24, 0xFF	; 255
    1ee2:	93 e0       	ldi	r25, 0x03	; 3
    1ee4:	08 95       	ret
    1ee6:	88 e0       	ldi	r24, 0x08	; 8
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	08 95       	ret

00001eec <udd_ep_get_job>:
    1eec:	28 2f       	mov	r18, r24
    1eee:	2f 70       	andi	r18, 0x0F	; 15
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	22 0f       	add	r18, r18
    1ef4:	33 1f       	adc	r19, r19
    1ef6:	08 2e       	mov	r0, r24
    1ef8:	00 0c       	add	r0, r0
    1efa:	99 0b       	sbc	r25, r25
    1efc:	88 27       	eor	r24, r24
    1efe:	99 0f       	add	r25, r25
    1f00:	88 1f       	adc	r24, r24
    1f02:	99 27       	eor	r25, r25
    1f04:	82 0f       	add	r24, r18
    1f06:	93 1f       	adc	r25, r19
    1f08:	02 97       	sbiw	r24, 0x02	; 2
    1f0a:	9c 01       	movw	r18, r24
    1f0c:	22 0f       	add	r18, r18
    1f0e:	33 1f       	adc	r19, r19
    1f10:	22 0f       	add	r18, r18
    1f12:	33 1f       	adc	r19, r19
    1f14:	22 0f       	add	r18, r18
    1f16:	33 1f       	adc	r19, r19
    1f18:	82 0f       	add	r24, r18
    1f1a:	93 1f       	adc	r25, r19
    1f1c:	87 51       	subi	r24, 0x17	; 23
    1f1e:	9d 4d       	sbci	r25, 0xDD	; 221
    1f20:	08 95       	ret

00001f22 <udd_ctrl_interrupt_tc_setup>:
    1f22:	0f 93       	push	r16
    1f24:	cf 93       	push	r28
    1f26:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1f2a:	80 ff       	sbrs	r24, 0
    1f2c:	64 c0       	rjmp	.+200    	; 0x1ff6 <udd_ctrl_interrupt_tc_setup+0xd4>
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1f34:	e0 e6       	ldi	r30, 0x60	; 96
    1f36:	f3 e2       	ldi	r31, 0x23	; 35
    1f38:	00 e8       	ldi	r16, 0x80	; 128
    1f3a:	06 93       	lac	Z, r16
    1f3c:	e8 e6       	ldi	r30, 0x68	; 104
    1f3e:	f3 e2       	ldi	r31, 0x23	; 35
    1f40:	00 e8       	ldi	r16, 0x80	; 128
    1f42:	06 93       	lac	Z, r16
    1f44:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    1f48:	e0 e6       	ldi	r30, 0x60	; 96
    1f4a:	f3 e2       	ldi	r31, 0x23	; 35
    1f4c:	00 e1       	ldi	r16, 0x10	; 16
    1f4e:	06 93       	lac	Z, r16
    1f50:	80 91 51 23 	lds	r24, 0x2351	; 0x802351 <udd_ep_control_state>
    1f54:	88 23       	and	r24, r24
    1f56:	29 f0       	breq	.+10     	; 0x1f62 <udd_ctrl_interrupt_tc_setup+0x40>
    1f58:	83 50       	subi	r24, 0x03	; 3
    1f5a:	82 30       	cpi	r24, 0x02	; 2
    1f5c:	08 f4       	brcc	.+2      	; 0x1f60 <udd_ctrl_interrupt_tc_setup+0x3e>
    1f5e:	2a df       	rcall	.-428    	; 0x1db4 <udd_ctrl_endofrequest>
    1f60:	e8 de       	rcall	.-560    	; 0x1d32 <udd_ctrl_init>
    1f62:	80 91 62 23 	lds	r24, 0x2362	; 0x802362 <udd_sram+0xe>
    1f66:	90 91 63 23 	lds	r25, 0x2363	; 0x802363 <udd_sram+0xf>
    1f6a:	08 97       	sbiw	r24, 0x08	; 8
    1f6c:	09 f0       	breq	.+2      	; 0x1f70 <udd_ctrl_interrupt_tc_setup+0x4e>
    1f6e:	45 c0       	rjmp	.+138    	; 0x1ffa <udd_ctrl_interrupt_tc_setup+0xd8>
    1f70:	88 e0       	ldi	r24, 0x08	; 8
    1f72:	ed e0       	ldi	r30, 0x0D	; 13
    1f74:	f3 e2       	ldi	r31, 0x23	; 35
    1f76:	a6 e9       	ldi	r26, 0x96	; 150
    1f78:	b4 e2       	ldi	r27, 0x24	; 36
    1f7a:	01 90       	ld	r0, Z+
    1f7c:	0d 92       	st	X+, r0
    1f7e:	8a 95       	dec	r24
    1f80:	e1 f7       	brne	.-8      	; 0x1f7a <udd_ctrl_interrupt_tc_setup+0x58>
    1f82:	e8 ec       	ldi	r30, 0xC8	; 200
    1f84:	f4 e0       	ldi	r31, 0x04	; 4
    1f86:	80 81       	ld	r24, Z
    1f88:	80 62       	ori	r24, 0x20	; 32
    1f8a:	80 83       	st	Z, r24
    1f8c:	80 81       	ld	r24, Z
    1f8e:	80 62       	ori	r24, 0x20	; 32
    1f90:	80 83       	st	Z, r24
    1f92:	15 dc       	rcall	.-2006   	; 0x17be <udc_process_setup>
    1f94:	c8 2f       	mov	r28, r24
    1f96:	81 11       	cpse	r24, r1
    1f98:	03 c0       	rjmp	.+6      	; 0x1fa0 <udd_ctrl_interrupt_tc_setup+0x7e>
    1f9a:	f0 de       	rcall	.-544    	; 0x1d7c <udd_ctrl_stall_data>
    1f9c:	c1 e0       	ldi	r28, 0x01	; 1
    1f9e:	2e c0       	rjmp	.+92     	; 0x1ffc <udd_ctrl_interrupt_tc_setup+0xda>
    1fa0:	80 91 96 24 	lds	r24, 0x2496	; 0x802496 <udd_g_ctrlreq>
    1fa4:	88 23       	and	r24, r24
    1fa6:	6c f4       	brge	.+26     	; 0x1fc2 <udd_ctrl_interrupt_tc_setup+0xa0>
    1fa8:	10 92 4f 23 	sts	0x234F, r1	; 0x80234f <udd_ctrl_prev_payload_nb_trans>
    1fac:	10 92 50 23 	sts	0x2350, r1	; 0x802350 <udd_ctrl_prev_payload_nb_trans+0x1>
    1fb0:	10 92 4d 23 	sts	0x234D, r1	; 0x80234d <udd_ctrl_payload_nb_trans>
    1fb4:	10 92 4e 23 	sts	0x234E, r1	; 0x80234e <udd_ctrl_payload_nb_trans+0x1>
    1fb8:	82 e0       	ldi	r24, 0x02	; 2
    1fba:	80 93 51 23 	sts	0x2351, r24	; 0x802351 <udd_ep_control_state>
    1fbe:	02 df       	rcall	.-508    	; 0x1dc4 <udd_ctrl_in_sent>
    1fc0:	1d c0       	rjmp	.+58     	; 0x1ffc <udd_ctrl_interrupt_tc_setup+0xda>
    1fc2:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <udd_g_ctrlreq+0x6>
    1fc6:	90 91 9d 24 	lds	r25, 0x249D	; 0x80249d <udd_g_ctrlreq+0x7>
    1fca:	89 2b       	or	r24, r25
    1fcc:	11 f4       	brne	.+4      	; 0x1fd2 <udd_ctrl_interrupt_tc_setup+0xb0>
    1fce:	e4 de       	rcall	.-568    	; 0x1d98 <udd_ctrl_send_zlp_in>
    1fd0:	15 c0       	rjmp	.+42     	; 0x1ffc <udd_ctrl_interrupt_tc_setup+0xda>
    1fd2:	10 92 4f 23 	sts	0x234F, r1	; 0x80234f <udd_ctrl_prev_payload_nb_trans>
    1fd6:	10 92 50 23 	sts	0x2350, r1	; 0x802350 <udd_ctrl_prev_payload_nb_trans+0x1>
    1fda:	10 92 4d 23 	sts	0x234D, r1	; 0x80234d <udd_ctrl_payload_nb_trans>
    1fde:	10 92 4e 23 	sts	0x234E, r1	; 0x80234e <udd_ctrl_payload_nb_trans+0x1>
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	80 93 51 23 	sts	0x2351, r24	; 0x802351 <udd_ep_control_state>
    1fe8:	e0 e6       	ldi	r30, 0x60	; 96
    1fea:	f3 e2       	ldi	r31, 0x23	; 35
    1fec:	02 e0       	ldi	r16, 0x02	; 2
    1fee:	06 93       	lac	Z, r16
    1ff0:	00 e2       	ldi	r16, 0x20	; 32
    1ff2:	06 93       	lac	Z, r16
    1ff4:	03 c0       	rjmp	.+6      	; 0x1ffc <udd_ctrl_interrupt_tc_setup+0xda>
    1ff6:	c0 e0       	ldi	r28, 0x00	; 0
    1ff8:	01 c0       	rjmp	.+2      	; 0x1ffc <udd_ctrl_interrupt_tc_setup+0xda>
    1ffa:	c1 e0       	ldi	r28, 0x01	; 1
    1ffc:	8c 2f       	mov	r24, r28
    1ffe:	cf 91       	pop	r28
    2000:	0f 91       	pop	r16
    2002:	08 95       	ret

00002004 <udd_ep_trans_complet>:
    2004:	8f 92       	push	r8
    2006:	9f 92       	push	r9
    2008:	af 92       	push	r10
    200a:	bf 92       	push	r11
    200c:	df 92       	push	r13
    200e:	ef 92       	push	r14
    2010:	ff 92       	push	r15
    2012:	0f 93       	push	r16
    2014:	1f 93       	push	r17
    2016:	cf 93       	push	r28
    2018:	df 93       	push	r29
    201a:	d8 2e       	mov	r13, r24
    201c:	67 df       	rcall	.-306    	; 0x1eec <udd_ep_get_job>
    201e:	8c 01       	movw	r16, r24
    2020:	bd 2c       	mov	r11, r13
    2022:	bb 1c       	adc	r11, r11
    2024:	bb 24       	eor	r11, r11
    2026:	bb 1c       	adc	r11, r11
    2028:	cd 2d       	mov	r28, r13
    202a:	cf 70       	andi	r28, 0x0F	; 15
    202c:	d0 e0       	ldi	r29, 0x00	; 0
    202e:	cc 0f       	add	r28, r28
    2030:	dd 1f       	adc	r29, r29
    2032:	cb 0d       	add	r28, r11
    2034:	d1 1d       	adc	r29, r1
    2036:	ce 01       	movw	r24, r28
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	88 0f       	add	r24, r24
    203e:	99 1f       	adc	r25, r25
    2040:	88 0f       	add	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	9c 01       	movw	r18, r24
    2046:	20 5a       	subi	r18, 0xA0	; 160
    2048:	3c 4d       	sbci	r19, 0xDC	; 220
    204a:	79 01       	movw	r14, r18
    204c:	c9 01       	movw	r24, r18
    204e:	26 df       	rcall	.-436    	; 0x1e9c <udd_ep_get_size>
    2050:	4c 01       	movw	r8, r24
    2052:	bb 20       	and	r11, r11
    2054:	09 f4       	brne	.+2      	; 0x2058 <udd_ep_trans_complet+0x54>
    2056:	79 c0       	rjmp	.+242    	; 0x214a <udd_ep_trans_complet+0x146>
    2058:	fe 01       	movw	r30, r28
    205a:	ee 0f       	add	r30, r30
    205c:	ff 1f       	adc	r31, r31
    205e:	ee 0f       	add	r30, r30
    2060:	ff 1f       	adc	r31, r31
    2062:	ee 0f       	add	r30, r30
    2064:	ff 1f       	adc	r31, r31
    2066:	ec 5a       	subi	r30, 0xAC	; 172
    2068:	fc 4d       	sbci	r31, 0xDC	; 220
    206a:	22 89       	ldd	r18, Z+18	; 0x12
    206c:	33 89       	ldd	r19, Z+19	; 0x13
    206e:	d8 01       	movw	r26, r16
    2070:	15 96       	adiw	r26, 0x05	; 5
    2072:	8d 91       	ld	r24, X+
    2074:	9c 91       	ld	r25, X
    2076:	16 97       	sbiw	r26, 0x06	; 6
    2078:	82 0f       	add	r24, r18
    207a:	93 1f       	adc	r25, r19
    207c:	15 96       	adiw	r26, 0x05	; 5
    207e:	8d 93       	st	X+, r24
    2080:	9c 93       	st	X, r25
    2082:	16 97       	sbiw	r26, 0x06	; 6
    2084:	13 96       	adiw	r26, 0x03	; 3
    2086:	2d 91       	ld	r18, X+
    2088:	3c 91       	ld	r19, X
    208a:	14 97       	sbiw	r26, 0x04	; 4
    208c:	82 17       	cp	r24, r18
    208e:	93 07       	cpc	r25, r19
    2090:	09 f4       	brne	.+2      	; 0x2094 <udd_ep_trans_complet+0x90>
    2092:	45 c0       	rjmp	.+138    	; 0x211e <udd_ep_trans_complet+0x11a>
    2094:	28 1b       	sub	r18, r24
    2096:	39 0b       	sbc	r19, r25
    2098:	21 15       	cp	r18, r1
    209a:	b4 e0       	ldi	r27, 0x04	; 4
    209c:	3b 07       	cpc	r19, r27
    209e:	38 f0       	brcs	.+14     	; 0x20ae <udd_ep_trans_complet+0xaa>
    20a0:	2f ef       	ldi	r18, 0xFF	; 255
    20a2:	33 e0       	ldi	r19, 0x03	; 3
    20a4:	c9 01       	movw	r24, r18
    20a6:	b4 01       	movw	r22, r8
    20a8:	88 d6       	rcall	.+3344   	; 0x2dba <__udivmodhi4>
    20aa:	28 1b       	sub	r18, r24
    20ac:	39 0b       	sbc	r19, r25
    20ae:	f8 01       	movw	r30, r16
    20b0:	80 81       	ld	r24, Z
    20b2:	81 ff       	sbrs	r24, 1
    20b4:	09 c0       	rjmp	.+18     	; 0x20c8 <udd_ep_trans_complet+0xc4>
    20b6:	c9 01       	movw	r24, r18
    20b8:	b4 01       	movw	r22, r8
    20ba:	7f d6       	rcall	.+3326   	; 0x2dba <__udivmodhi4>
    20bc:	41 e0       	ldi	r20, 0x01	; 1
    20be:	89 2b       	or	r24, r25
    20c0:	09 f0       	breq	.+2      	; 0x20c4 <udd_ep_trans_complet+0xc0>
    20c2:	40 e0       	ldi	r20, 0x00	; 0
    20c4:	84 2f       	mov	r24, r20
    20c6:	01 c0       	rjmp	.+2      	; 0x20ca <udd_ep_trans_complet+0xc6>
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	d8 01       	movw	r26, r16
    20cc:	9c 91       	ld	r25, X
    20ce:	80 fb       	bst	r24, 0
    20d0:	91 f9       	bld	r25, 1
    20d2:	9c 93       	st	X, r25
    20d4:	fe 01       	movw	r30, r28
    20d6:	ee 0f       	add	r30, r30
    20d8:	ff 1f       	adc	r31, r31
    20da:	ee 0f       	add	r30, r30
    20dc:	ff 1f       	adc	r31, r31
    20de:	ee 0f       	add	r30, r30
    20e0:	ff 1f       	adc	r31, r31
    20e2:	ec 5a       	subi	r30, 0xAC	; 172
    20e4:	fc 4d       	sbci	r31, 0xDC	; 220
    20e6:	12 8a       	std	Z+18, r1	; 0x12
    20e8:	13 8a       	std	Z+19, r1	; 0x13
    20ea:	26 87       	std	Z+14, r18	; 0x0e
    20ec:	37 87       	std	Z+15, r19	; 0x0f
    20ee:	11 96       	adiw	r26, 0x01	; 1
    20f0:	2d 91       	ld	r18, X+
    20f2:	3c 91       	ld	r19, X
    20f4:	12 97       	sbiw	r26, 0x02	; 2
    20f6:	15 96       	adiw	r26, 0x05	; 5
    20f8:	8d 91       	ld	r24, X+
    20fa:	9c 91       	ld	r25, X
    20fc:	16 97       	sbiw	r26, 0x06	; 6
    20fe:	82 0f       	add	r24, r18
    2100:	93 1f       	adc	r25, r19
    2102:	cc 0f       	add	r28, r28
    2104:	dd 1f       	adc	r29, r29
    2106:	cc 0f       	add	r28, r28
    2108:	dd 1f       	adc	r29, r29
    210a:	cc 0f       	add	r28, r28
    210c:	dd 1f       	adc	r29, r29
    210e:	cc 59       	subi	r28, 0x9C	; 156
    2110:	dc 4d       	sbci	r29, 0xDC	; 220
    2112:	88 83       	st	Y, r24
    2114:	99 83       	std	Y+1, r25	; 0x01
    2116:	f7 01       	movw	r30, r14
    2118:	02 e0       	ldi	r16, 0x02	; 2
    211a:	06 93       	lac	Z, r16
    211c:	e4 c0       	rjmp	.+456    	; 0x22e6 <udd_ep_trans_complet+0x2e2>
    211e:	d8 01       	movw	r26, r16
    2120:	8c 91       	ld	r24, X
    2122:	81 ff       	sbrs	r24, 1
    2124:	cd c0       	rjmp	.+410    	; 0x22c0 <udd_ep_trans_complet+0x2bc>
    2126:	8d 7f       	andi	r24, 0xFD	; 253
    2128:	8c 93       	st	X, r24
    212a:	cc 0f       	add	r28, r28
    212c:	dd 1f       	adc	r29, r29
    212e:	cc 0f       	add	r28, r28
    2130:	dd 1f       	adc	r29, r29
    2132:	cc 0f       	add	r28, r28
    2134:	dd 1f       	adc	r29, r29
    2136:	cc 5a       	subi	r28, 0xAC	; 172
    2138:	dc 4d       	sbci	r29, 0xDC	; 220
    213a:	1a 8a       	std	Y+18, r1	; 0x12
    213c:	1b 8a       	std	Y+19, r1	; 0x13
    213e:	1e 86       	std	Y+14, r1	; 0x0e
    2140:	1f 86       	std	Y+15, r1	; 0x0f
    2142:	f7 01       	movw	r30, r14
    2144:	02 e0       	ldi	r16, 0x02	; 2
    2146:	06 93       	lac	Z, r16
    2148:	ce c0       	rjmp	.+412    	; 0x22e6 <udd_ep_trans_complet+0x2e2>
    214a:	fe 01       	movw	r30, r28
    214c:	ee 0f       	add	r30, r30
    214e:	ff 1f       	adc	r31, r31
    2150:	ee 0f       	add	r30, r30
    2152:	ff 1f       	adc	r31, r31
    2154:	ee 0f       	add	r30, r30
    2156:	ff 1f       	adc	r31, r31
    2158:	ec 5a       	subi	r30, 0xAC	; 172
    215a:	fc 4d       	sbci	r31, 0xDC	; 220
    215c:	a6 84       	ldd	r10, Z+14	; 0x0e
    215e:	b7 84       	ldd	r11, Z+15	; 0x0f
    2160:	d8 01       	movw	r26, r16
    2162:	8c 91       	ld	r24, X
    2164:	82 ff       	sbrs	r24, 2
    2166:	19 c0       	rjmp	.+50     	; 0x219a <udd_ep_trans_complet+0x196>
    2168:	11 96       	adiw	r26, 0x01	; 1
    216a:	ed 91       	ld	r30, X+
    216c:	fc 91       	ld	r31, X
    216e:	12 97       	sbiw	r26, 0x02	; 2
    2170:	15 96       	adiw	r26, 0x05	; 5
    2172:	2d 91       	ld	r18, X+
    2174:	3c 91       	ld	r19, X
    2176:	16 97       	sbiw	r26, 0x06	; 6
    2178:	13 96       	adiw	r26, 0x03	; 3
    217a:	8d 91       	ld	r24, X+
    217c:	9c 91       	ld	r25, X
    217e:	14 97       	sbiw	r26, 0x04	; 4
    2180:	b4 01       	movw	r22, r8
    2182:	1b d6       	rcall	.+3126   	; 0x2dba <__udivmodhi4>
    2184:	b0 e4       	ldi	r27, 0x40	; 64
    2186:	db 9e       	mul	r13, r27
    2188:	b0 01       	movw	r22, r0
    218a:	11 24       	eor	r1, r1
    218c:	67 5d       	subi	r22, 0xD7	; 215
    218e:	7d 4d       	sbci	r23, 0xDD	; 221
    2190:	ac 01       	movw	r20, r24
    2192:	cf 01       	movw	r24, r30
    2194:	82 0f       	add	r24, r18
    2196:	93 1f       	adc	r25, r19
    2198:	2d d6       	rcall	.+3162   	; 0x2df4 <memcpy>
    219a:	f8 01       	movw	r30, r16
    219c:	25 81       	ldd	r18, Z+5	; 0x05
    219e:	36 81       	ldd	r19, Z+6	; 0x06
    21a0:	2a 0d       	add	r18, r10
    21a2:	3b 1d       	adc	r19, r11
    21a4:	25 83       	std	Z+5, r18	; 0x05
    21a6:	36 83       	std	Z+6, r19	; 0x06
    21a8:	83 81       	ldd	r24, Z+3	; 0x03
    21aa:	94 81       	ldd	r25, Z+4	; 0x04
    21ac:	82 17       	cp	r24, r18
    21ae:	93 07       	cpc	r25, r19
    21b0:	68 f4       	brcc	.+26     	; 0x21cc <udd_ep_trans_complet+0x1c8>
    21b2:	85 83       	std	Z+5, r24	; 0x05
    21b4:	96 83       	std	Z+6, r25	; 0x06
    21b6:	cc 0f       	add	r28, r28
    21b8:	dd 1f       	adc	r29, r29
    21ba:	cc 0f       	add	r28, r28
    21bc:	dd 1f       	adc	r29, r29
    21be:	cc 0f       	add	r28, r28
    21c0:	dd 1f       	adc	r29, r29
    21c2:	cc 5a       	subi	r28, 0xAC	; 172
    21c4:	dc 4d       	sbci	r29, 0xDC	; 220
    21c6:	8a 89       	ldd	r24, Y+18	; 0x12
    21c8:	9b 89       	ldd	r25, Y+19	; 0x13
    21ca:	7a c0       	rjmp	.+244    	; 0x22c0 <udd_ep_trans_complet+0x2bc>
    21cc:	fe 01       	movw	r30, r28
    21ce:	ee 0f       	add	r30, r30
    21d0:	ff 1f       	adc	r31, r31
    21d2:	ee 0f       	add	r30, r30
    21d4:	ff 1f       	adc	r31, r31
    21d6:	ee 0f       	add	r30, r30
    21d8:	ff 1f       	adc	r31, r31
    21da:	ec 5a       	subi	r30, 0xAC	; 172
    21dc:	fc 4d       	sbci	r31, 0xDC	; 220
    21de:	42 89       	ldd	r20, Z+18	; 0x12
    21e0:	53 89       	ldd	r21, Z+19	; 0x13
    21e2:	4a 15       	cp	r20, r10
    21e4:	5b 05       	cpc	r21, r11
    21e6:	09 f0       	breq	.+2      	; 0x21ea <udd_ep_trans_complet+0x1e6>
    21e8:	6b c0       	rjmp	.+214    	; 0x22c0 <udd_ep_trans_complet+0x2bc>
    21ea:	28 17       	cp	r18, r24
    21ec:	39 07       	cpc	r19, r25
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <udd_ep_trans_complet+0x1ee>
    21f0:	67 c0       	rjmp	.+206    	; 0x22c0 <udd_ep_trans_complet+0x2bc>
    21f2:	ac 01       	movw	r20, r24
    21f4:	42 1b       	sub	r20, r18
    21f6:	53 0b       	sbc	r21, r19
    21f8:	9a 01       	movw	r18, r20
    21fa:	21 15       	cp	r18, r1
    21fc:	54 e0       	ldi	r21, 0x04	; 4
    21fe:	35 07       	cpc	r19, r21
    2200:	50 f0       	brcs	.+20     	; 0x2216 <udd_ep_trans_complet+0x212>
    2202:	2f ef       	ldi	r18, 0xFF	; 255
    2204:	33 e0       	ldi	r19, 0x03	; 3
    2206:	c9 01       	movw	r24, r18
    2208:	b4 01       	movw	r22, r8
    220a:	d7 d5       	rcall	.+2990   	; 0x2dba <__udivmodhi4>
    220c:	d9 01       	movw	r26, r18
    220e:	a8 1b       	sub	r26, r24
    2210:	b9 0b       	sbc	r27, r25
    2212:	cd 01       	movw	r24, r26
    2214:	07 c0       	rjmp	.+14     	; 0x2224 <udd_ep_trans_complet+0x220>
    2216:	c9 01       	movw	r24, r18
    2218:	b4 01       	movw	r22, r8
    221a:	cf d5       	rcall	.+2974   	; 0x2dba <__udivmodhi4>
    221c:	f9 01       	movw	r30, r18
    221e:	e8 1b       	sub	r30, r24
    2220:	f9 0b       	sbc	r31, r25
    2222:	cf 01       	movw	r24, r30
    2224:	fe 01       	movw	r30, r28
    2226:	ee 0f       	add	r30, r30
    2228:	ff 1f       	adc	r31, r31
    222a:	ee 0f       	add	r30, r30
    222c:	ff 1f       	adc	r31, r31
    222e:	ee 0f       	add	r30, r30
    2230:	ff 1f       	adc	r31, r31
    2232:	ec 5a       	subi	r30, 0xAC	; 172
    2234:	fc 4d       	sbci	r31, 0xDC	; 220
    2236:	16 86       	std	Z+14, r1	; 0x0e
    2238:	17 86       	std	Z+15, r1	; 0x0f
    223a:	88 15       	cp	r24, r8
    223c:	99 05       	cpc	r25, r9
    223e:	00 f5       	brcc	.+64     	; 0x2280 <udd_ep_trans_complet+0x27c>
    2240:	d8 01       	movw	r26, r16
    2242:	8c 91       	ld	r24, X
    2244:	84 60       	ori	r24, 0x04	; 4
    2246:	8c 93       	st	X, r24
    2248:	b0 e4       	ldi	r27, 0x40	; 64
    224a:	db 9e       	mul	r13, r27
    224c:	c0 01       	movw	r24, r0
    224e:	11 24       	eor	r1, r1
    2250:	87 5d       	subi	r24, 0xD7	; 215
    2252:	9d 4d       	sbci	r25, 0xDD	; 221
    2254:	fe 01       	movw	r30, r28
    2256:	ee 0f       	add	r30, r30
    2258:	ff 1f       	adc	r31, r31
    225a:	ee 0f       	add	r30, r30
    225c:	ff 1f       	adc	r31, r31
    225e:	ee 0f       	add	r30, r30
    2260:	ff 1f       	adc	r31, r31
    2262:	ec 59       	subi	r30, 0x9C	; 156
    2264:	fc 4d       	sbci	r31, 0xDC	; 220
    2266:	80 83       	st	Z, r24
    2268:	91 83       	std	Z+1, r25	; 0x01
    226a:	cc 0f       	add	r28, r28
    226c:	dd 1f       	adc	r29, r29
    226e:	cc 0f       	add	r28, r28
    2270:	dd 1f       	adc	r29, r29
    2272:	cc 0f       	add	r28, r28
    2274:	dd 1f       	adc	r29, r29
    2276:	cc 5a       	subi	r28, 0xAC	; 172
    2278:	dc 4d       	sbci	r29, 0xDC	; 220
    227a:	8a 8a       	std	Y+18, r8	; 0x12
    227c:	9b 8a       	std	Y+19, r9	; 0x13
    227e:	1c c0       	rjmp	.+56     	; 0x22b8 <udd_ep_trans_complet+0x2b4>
    2280:	f8 01       	movw	r30, r16
    2282:	41 81       	ldd	r20, Z+1	; 0x01
    2284:	52 81       	ldd	r21, Z+2	; 0x02
    2286:	25 81       	ldd	r18, Z+5	; 0x05
    2288:	36 81       	ldd	r19, Z+6	; 0x06
    228a:	24 0f       	add	r18, r20
    228c:	35 1f       	adc	r19, r21
    228e:	fe 01       	movw	r30, r28
    2290:	ee 0f       	add	r30, r30
    2292:	ff 1f       	adc	r31, r31
    2294:	ee 0f       	add	r30, r30
    2296:	ff 1f       	adc	r31, r31
    2298:	ee 0f       	add	r30, r30
    229a:	ff 1f       	adc	r31, r31
    229c:	ec 59       	subi	r30, 0x9C	; 156
    229e:	fc 4d       	sbci	r31, 0xDC	; 220
    22a0:	20 83       	st	Z, r18
    22a2:	31 83       	std	Z+1, r19	; 0x01
    22a4:	cc 0f       	add	r28, r28
    22a6:	dd 1f       	adc	r29, r29
    22a8:	cc 0f       	add	r28, r28
    22aa:	dd 1f       	adc	r29, r29
    22ac:	cc 0f       	add	r28, r28
    22ae:	dd 1f       	adc	r29, r29
    22b0:	cc 5a       	subi	r28, 0xAC	; 172
    22b2:	dc 4d       	sbci	r29, 0xDC	; 220
    22b4:	8a 8b       	std	Y+18, r24	; 0x12
    22b6:	9b 8b       	std	Y+19, r25	; 0x13
    22b8:	f7 01       	movw	r30, r14
    22ba:	02 e0       	ldi	r16, 0x02	; 2
    22bc:	06 93       	lac	Z, r16
    22be:	13 c0       	rjmp	.+38     	; 0x22e6 <udd_ep_trans_complet+0x2e2>
    22c0:	d8 01       	movw	r26, r16
    22c2:	8c 91       	ld	r24, X
    22c4:	80 ff       	sbrs	r24, 0
    22c6:	0f c0       	rjmp	.+30     	; 0x22e6 <udd_ep_trans_complet+0x2e2>
    22c8:	8e 7f       	andi	r24, 0xFE	; 254
    22ca:	8c 93       	st	X, r24
    22cc:	17 96       	adiw	r26, 0x07	; 7
    22ce:	ed 91       	ld	r30, X+
    22d0:	fc 91       	ld	r31, X
    22d2:	18 97       	sbiw	r26, 0x08	; 8
    22d4:	30 97       	sbiw	r30, 0x00	; 0
    22d6:	39 f0       	breq	.+14     	; 0x22e6 <udd_ep_trans_complet+0x2e2>
    22d8:	15 96       	adiw	r26, 0x05	; 5
    22da:	6d 91       	ld	r22, X+
    22dc:	7c 91       	ld	r23, X
    22de:	16 97       	sbiw	r26, 0x06	; 6
    22e0:	4d 2d       	mov	r20, r13
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	19 95       	eicall
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	1f 91       	pop	r17
    22ec:	0f 91       	pop	r16
    22ee:	ff 90       	pop	r15
    22f0:	ef 90       	pop	r14
    22f2:	df 90       	pop	r13
    22f4:	bf 90       	pop	r11
    22f6:	af 90       	pop	r10
    22f8:	9f 90       	pop	r9
    22fa:	8f 90       	pop	r8
    22fc:	08 95       	ret

000022fe <udd_attach>:
    22fe:	1f 93       	push	r17
    2300:	cf 93       	push	r28
    2302:	df 93       	push	r29
    2304:	1f 92       	push	r1
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	8f b7       	in	r24, 0x3f	; 63
    230c:	89 83       	std	Y+1, r24	; 0x01
    230e:	f8 94       	cli
    2310:	19 81       	ldd	r17, Y+1	; 0x01
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	d6 dc       	rcall	.-1620   	; 0x1cc2 <udd_sleep_mode>
    2316:	ea ec       	ldi	r30, 0xCA	; 202
    2318:	f4 e0       	ldi	r31, 0x04	; 4
    231a:	80 e4       	ldi	r24, 0x40	; 64
    231c:	80 83       	st	Z, r24
    231e:	80 e2       	ldi	r24, 0x20	; 32
    2320:	80 83       	st	Z, r24
    2322:	e1 ec       	ldi	r30, 0xC1	; 193
    2324:	f4 e0       	ldi	r31, 0x04	; 4
    2326:	80 81       	ld	r24, Z
    2328:	81 60       	ori	r24, 0x01	; 1
    232a:	80 83       	st	Z, r24
    232c:	a9 ec       	ldi	r26, 0xC9	; 201
    232e:	b4 e0       	ldi	r27, 0x04	; 4
    2330:	8c 91       	ld	r24, X
    2332:	82 60       	ori	r24, 0x02	; 2
    2334:	8c 93       	st	X, r24
    2336:	e8 ec       	ldi	r30, 0xC8	; 200
    2338:	f4 e0       	ldi	r31, 0x04	; 4
    233a:	80 81       	ld	r24, Z
    233c:	80 64       	ori	r24, 0x40	; 64
    233e:	80 83       	st	Z, r24
    2340:	8c 91       	ld	r24, X
    2342:	81 60       	ori	r24, 0x01	; 1
    2344:	8c 93       	st	X, r24
    2346:	80 81       	ld	r24, Z
    2348:	80 68       	ori	r24, 0x80	; 128
    234a:	80 83       	st	Z, r24
    234c:	1f bf       	out	0x3f, r17	; 63
    234e:	0f 90       	pop	r0
    2350:	df 91       	pop	r29
    2352:	cf 91       	pop	r28
    2354:	1f 91       	pop	r17
    2356:	08 95       	ret

00002358 <udd_enable>:
    2358:	0f 93       	push	r16
    235a:	1f 93       	push	r17
    235c:	cf 93       	push	r28
    235e:	df 93       	push	r29
    2360:	1f 92       	push	r1
    2362:	1f 92       	push	r1
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
    2368:	00 e6       	ldi	r16, 0x60	; 96
    236a:	10 e0       	ldi	r17, 0x00	; 0
    236c:	f8 01       	movw	r30, r16
    236e:	10 82       	st	Z, r1
    2370:	80 e3       	ldi	r24, 0x30	; 48
    2372:	ce d4       	rcall	.+2460   	; 0x2d10 <sysclk_enable_usb>
    2374:	e0 ec       	ldi	r30, 0xC0	; 192
    2376:	f4 e0       	ldi	r31, 0x04	; 4
    2378:	80 81       	ld	r24, Z
    237a:	80 64       	ori	r24, 0x40	; 64
    237c:	80 83       	st	Z, r24
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	f8 01       	movw	r30, r16
    2382:	80 83       	st	Z, r24
    2384:	8f b7       	in	r24, 0x3f	; 63
    2386:	8a 83       	std	Y+2, r24	; 0x02
    2388:	f8 94       	cli
    238a:	1a 81       	ldd	r17, Y+2	; 0x02
    238c:	e4 e5       	ldi	r30, 0x54	; 84
    238e:	f3 e2       	ldi	r31, 0x23	; 35
    2390:	15 86       	std	Z+13, r1	; 0x0d
    2392:	15 8a       	std	Z+21, r1	; 0x15
    2394:	15 8e       	std	Z+29, r1	; 0x1d
    2396:	15 a2       	std	Z+37, r1	; 0x25
    2398:	15 a6       	std	Z+45, r1	; 0x2d
    239a:	15 aa       	std	Z+53, r1	; 0x35
    239c:	e9 ee       	ldi	r30, 0xE9	; 233
    239e:	f2 e2       	ldi	r31, 0x22	; 34
    23a0:	80 81       	ld	r24, Z
    23a2:	8e 7f       	andi	r24, 0xFE	; 254
    23a4:	80 83       	st	Z, r24
    23a6:	e2 ef       	ldi	r30, 0xF2	; 242
    23a8:	f2 e2       	ldi	r31, 0x22	; 34
    23aa:	80 81       	ld	r24, Z
    23ac:	8e 7f       	andi	r24, 0xFE	; 254
    23ae:	80 83       	st	Z, r24
    23b0:	eb ef       	ldi	r30, 0xFB	; 251
    23b2:	f2 e2       	ldi	r31, 0x22	; 34
    23b4:	80 81       	ld	r24, Z
    23b6:	8e 7f       	andi	r24, 0xFE	; 254
    23b8:	80 83       	st	Z, r24
    23ba:	e4 e0       	ldi	r30, 0x04	; 4
    23bc:	f3 e2       	ldi	r31, 0x23	; 35
    23be:	80 81       	ld	r24, Z
    23c0:	8e 7f       	andi	r24, 0xFE	; 254
    23c2:	80 83       	st	Z, r24
    23c4:	6a e1       	ldi	r22, 0x1A	; 26
    23c6:	70 e0       	ldi	r23, 0x00	; 0
    23c8:	82 e0       	ldi	r24, 0x02	; 2
    23ca:	e7 d4       	rcall	.+2510   	; 0x2d9a <nvm_read_byte>
    23cc:	8f 3f       	cpi	r24, 0xFF	; 255
    23ce:	19 f0       	breq	.+6      	; 0x23d6 <udd_enable+0x7e>
    23d0:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    23d4:	03 c0       	rjmp	.+6      	; 0x23dc <udd_enable+0x84>
    23d6:	8f e1       	ldi	r24, 0x1F	; 31
    23d8:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    23dc:	6b e1       	ldi	r22, 0x1B	; 27
    23de:	70 e0       	ldi	r23, 0x00	; 0
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	db d4       	rcall	.+2486   	; 0x2d9a <nvm_read_byte>
    23e4:	8f 3f       	cpi	r24, 0xFF	; 255
    23e6:	19 f0       	breq	.+6      	; 0x23ee <udd_enable+0x96>
    23e8:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    23ec:	03 c0       	rjmp	.+6      	; 0x23f4 <udd_enable+0x9c>
    23ee:	8f e1       	ldi	r24, 0x1F	; 31
    23f0:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    23f4:	e0 ec       	ldi	r30, 0xC0	; 192
    23f6:	f4 e0       	ldi	r31, 0x04	; 4
    23f8:	80 81       	ld	r24, Z
    23fa:	82 60       	ori	r24, 0x02	; 2
    23fc:	80 83       	st	Z, r24
    23fe:	80 81       	ld	r24, Z
    2400:	80 68       	ori	r24, 0x80	; 128
    2402:	80 83       	st	Z, r24
    2404:	80 81       	ld	r24, Z
    2406:	80 61       	ori	r24, 0x10	; 16
    2408:	80 83       	st	Z, r24
    240a:	80 e6       	ldi	r24, 0x60	; 96
    240c:	93 e2       	ldi	r25, 0x23	; 35
    240e:	86 83       	std	Z+6, r24	; 0x06
    2410:	97 83       	std	Z+7, r25	; 0x07
    2412:	80 81       	ld	r24, Z
    2414:	80 62       	ori	r24, 0x20	; 32
    2416:	80 83       	st	Z, r24
    2418:	8f ef       	ldi	r24, 0xFF	; 255
    241a:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    241e:	e8 ec       	ldi	r30, 0xC8	; 200
    2420:	f4 e0       	ldi	r31, 0x04	; 4
    2422:	80 81       	ld	r24, Z
    2424:	81 60       	ori	r24, 0x01	; 1
    2426:	80 83       	st	Z, r24
    2428:	10 92 94 23 	sts	0x2394, r1	; 0x802394 <udd_b_idle>
    242c:	80 91 ab 24 	lds	r24, 0x24AB	; 0x8024ab <sleepmgr_locks+0x5>
    2430:	8f 3f       	cpi	r24, 0xFF	; 255
    2432:	09 f4       	brne	.+2      	; 0x2436 <udd_enable+0xde>
    2434:	ff cf       	rjmp	.-2      	; 0x2434 <udd_enable+0xdc>
    2436:	8f b7       	in	r24, 0x3f	; 63
    2438:	89 83       	std	Y+1, r24	; 0x01
    243a:	f8 94       	cli
    243c:	99 81       	ldd	r25, Y+1	; 0x01
    243e:	e6 ea       	ldi	r30, 0xA6	; 166
    2440:	f4 e2       	ldi	r31, 0x24	; 36
    2442:	85 81       	ldd	r24, Z+5	; 0x05
    2444:	8f 5f       	subi	r24, 0xFF	; 255
    2446:	85 83       	std	Z+5, r24	; 0x05
    2448:	9f bf       	out	0x3f, r25	; 63
    244a:	59 df       	rcall	.-334    	; 0x22fe <udd_attach>
    244c:	1f bf       	out	0x3f, r17	; 63
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	1f 91       	pop	r17
    2458:	0f 91       	pop	r16
    245a:	08 95       	ret

0000245c <udd_is_high_speed>:
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	08 95       	ret

00002460 <udd_set_address>:
    2460:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2464:	08 95       	ret

00002466 <udd_getaddress>:
    2466:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    246a:	08 95       	ret

0000246c <udd_get_frame_number>:
    246c:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <udd_sram+0x3c>
    2470:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <udd_sram+0x3d>
    2474:	08 95       	ret

00002476 <udd_get_micro_frame_number>:
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	08 95       	ret

0000247c <udd_set_setup_payload>:
    247c:	e6 e9       	ldi	r30, 0x96	; 150
    247e:	f4 e2       	ldi	r31, 0x24	; 36
    2480:	80 87       	std	Z+8, r24	; 0x08
    2482:	91 87       	std	Z+9, r25	; 0x09
    2484:	62 87       	std	Z+10, r22	; 0x0a
    2486:	73 87       	std	Z+11, r23	; 0x0b
    2488:	08 95       	ret

0000248a <udd_ep_alloc>:
    248a:	28 2f       	mov	r18, r24
    248c:	2f 70       	andi	r18, 0x0F	; 15
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	22 0f       	add	r18, r18
    2492:	33 1f       	adc	r19, r19
    2494:	08 2e       	mov	r0, r24
    2496:	00 0c       	add	r0, r0
    2498:	99 0b       	sbc	r25, r25
    249a:	88 27       	eor	r24, r24
    249c:	99 0f       	add	r25, r25
    249e:	88 1f       	adc	r24, r24
    24a0:	99 27       	eor	r25, r25
    24a2:	82 0f       	add	r24, r18
    24a4:	93 1f       	adc	r25, r19
    24a6:	fc 01       	movw	r30, r24
    24a8:	ee 0f       	add	r30, r30
    24aa:	ff 1f       	adc	r31, r31
    24ac:	ee 0f       	add	r30, r30
    24ae:	ff 1f       	adc	r31, r31
    24b0:	ee 0f       	add	r30, r30
    24b2:	ff 1f       	adc	r31, r31
    24b4:	ec 5a       	subi	r30, 0xAC	; 172
    24b6:	fc 4d       	sbci	r31, 0xDC	; 220
    24b8:	25 85       	ldd	r18, Z+13	; 0x0d
    24ba:	20 7c       	andi	r18, 0xC0	; 192
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <udd_ep_alloc+0x36>
    24be:	69 c0       	rjmp	.+210    	; 0x2592 <udd_ep_alloc+0x108>
    24c0:	63 70       	andi	r22, 0x03	; 3
    24c2:	61 30       	cpi	r22, 0x01	; 1
    24c4:	11 f0       	breq	.+4      	; 0x24ca <udd_ep_alloc+0x40>
    24c6:	18 f4       	brcc	.+6      	; 0x24ce <udd_ep_alloc+0x44>
    24c8:	04 c0       	rjmp	.+8      	; 0x24d2 <udd_ep_alloc+0x48>
    24ca:	20 ec       	ldi	r18, 0xC0	; 192
    24cc:	03 c0       	rjmp	.+6      	; 0x24d4 <udd_ep_alloc+0x4a>
    24ce:	20 e8       	ldi	r18, 0x80	; 128
    24d0:	01 c0       	rjmp	.+2      	; 0x24d4 <udd_ep_alloc+0x4a>
    24d2:	20 e4       	ldi	r18, 0x40	; 64
    24d4:	40 38       	cpi	r20, 0x80	; 128
    24d6:	51 05       	cpc	r21, r1
    24d8:	e9 f0       	breq	.+58     	; 0x2514 <udd_ep_alloc+0x8a>
    24da:	50 f4       	brcc	.+20     	; 0x24f0 <udd_ep_alloc+0x66>
    24dc:	40 32       	cpi	r20, 0x20	; 32
    24de:	51 05       	cpc	r21, r1
    24e0:	a9 f0       	breq	.+42     	; 0x250c <udd_ep_alloc+0x82>
    24e2:	40 34       	cpi	r20, 0x40	; 64
    24e4:	51 05       	cpc	r21, r1
    24e6:	a1 f0       	breq	.+40     	; 0x2510 <udd_ep_alloc+0x86>
    24e8:	40 31       	cpi	r20, 0x10	; 16
    24ea:	51 05       	cpc	r21, r1
    24ec:	d9 f4       	brne	.+54     	; 0x2524 <udd_ep_alloc+0x9a>
    24ee:	0c c0       	rjmp	.+24     	; 0x2508 <udd_ep_alloc+0x7e>
    24f0:	41 15       	cp	r20, r1
    24f2:	32 e0       	ldi	r19, 0x02	; 2
    24f4:	53 07       	cpc	r21, r19
    24f6:	91 f0       	breq	.+36     	; 0x251c <udd_ep_alloc+0x92>
    24f8:	4f 3f       	cpi	r20, 0xFF	; 255
    24fa:	33 e0       	ldi	r19, 0x03	; 3
    24fc:	53 07       	cpc	r21, r19
    24fe:	81 f0       	breq	.+32     	; 0x2520 <udd_ep_alloc+0x96>
    2500:	41 15       	cp	r20, r1
    2502:	51 40       	sbci	r21, 0x01	; 1
    2504:	79 f4       	brne	.+30     	; 0x2524 <udd_ep_alloc+0x9a>
    2506:	08 c0       	rjmp	.+16     	; 0x2518 <udd_ep_alloc+0x8e>
    2508:	41 e0       	ldi	r20, 0x01	; 1
    250a:	0d c0       	rjmp	.+26     	; 0x2526 <udd_ep_alloc+0x9c>
    250c:	42 e0       	ldi	r20, 0x02	; 2
    250e:	0b c0       	rjmp	.+22     	; 0x2526 <udd_ep_alloc+0x9c>
    2510:	43 e0       	ldi	r20, 0x03	; 3
    2512:	09 c0       	rjmp	.+18     	; 0x2526 <udd_ep_alloc+0x9c>
    2514:	44 e0       	ldi	r20, 0x04	; 4
    2516:	07 c0       	rjmp	.+14     	; 0x2526 <udd_ep_alloc+0x9c>
    2518:	45 e0       	ldi	r20, 0x05	; 5
    251a:	05 c0       	rjmp	.+10     	; 0x2526 <udd_ep_alloc+0x9c>
    251c:	46 e0       	ldi	r20, 0x06	; 6
    251e:	03 c0       	rjmp	.+6      	; 0x2526 <udd_ep_alloc+0x9c>
    2520:	47 e0       	ldi	r20, 0x07	; 7
    2522:	01 c0       	rjmp	.+2      	; 0x2526 <udd_ep_alloc+0x9c>
    2524:	40 e0       	ldi	r20, 0x00	; 0
    2526:	fc 01       	movw	r30, r24
    2528:	ee 0f       	add	r30, r30
    252a:	ff 1f       	adc	r31, r31
    252c:	ee 0f       	add	r30, r30
    252e:	ff 1f       	adc	r31, r31
    2530:	ee 0f       	add	r30, r30
    2532:	ff 1f       	adc	r31, r31
    2534:	ec 5a       	subi	r30, 0xAC	; 172
    2536:	fc 4d       	sbci	r31, 0xDC	; 220
    2538:	15 86       	std	Z+13, r1	; 0x0d
    253a:	36 e0       	ldi	r19, 0x06	; 6
    253c:	34 87       	std	Z+12, r19	; 0x0c
    253e:	24 2b       	or	r18, r20
    2540:	25 87       	std	Z+13, r18	; 0x0d
    2542:	fc 01       	movw	r30, r24
    2544:	ee 0f       	add	r30, r30
    2546:	ff 1f       	adc	r31, r31
    2548:	ee 0f       	add	r30, r30
    254a:	ff 1f       	adc	r31, r31
    254c:	ee 0f       	add	r30, r30
    254e:	ff 1f       	adc	r31, r31
    2550:	ec 5a       	subi	r30, 0xAC	; 172
    2552:	fc 4d       	sbci	r31, 0xDC	; 220
    2554:	25 85       	ldd	r18, Z+13	; 0x0d
    2556:	20 7c       	andi	r18, 0xC0	; 192
    2558:	20 3c       	cpi	r18, 0xC0	; 192
    255a:	69 f4       	brne	.+26     	; 0x2576 <udd_ep_alloc+0xec>
    255c:	fc 01       	movw	r30, r24
    255e:	ee 0f       	add	r30, r30
    2560:	ff 1f       	adc	r31, r31
    2562:	ee 0f       	add	r30, r30
    2564:	ff 1f       	adc	r31, r31
    2566:	ee 0f       	add	r30, r30
    2568:	ff 1f       	adc	r31, r31
    256a:	ec 5a       	subi	r30, 0xAC	; 172
    256c:	fc 4d       	sbci	r31, 0xDC	; 220
    256e:	25 85       	ldd	r18, Z+13	; 0x0d
    2570:	27 70       	andi	r18, 0x07	; 7
    2572:	27 30       	cpi	r18, 0x07	; 7
    2574:	81 f0       	breq	.+32     	; 0x2596 <udd_ep_alloc+0x10c>
    2576:	88 0f       	add	r24, r24
    2578:	99 1f       	adc	r25, r25
    257a:	88 0f       	add	r24, r24
    257c:	99 1f       	adc	r25, r25
    257e:	88 0f       	add	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	fc 01       	movw	r30, r24
    2584:	ec 5a       	subi	r30, 0xAC	; 172
    2586:	fc 4d       	sbci	r31, 0xDC	; 220
    2588:	85 85       	ldd	r24, Z+13	; 0x0d
    258a:	80 62       	ori	r24, 0x20	; 32
    258c:	85 87       	std	Z+13, r24	; 0x0d
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	08 95       	ret
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	08 95       	ret
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	08 95       	ret

0000259a <udd_ep_is_halted>:
    259a:	e8 2f       	mov	r30, r24
    259c:	ef 70       	andi	r30, 0x0F	; 15
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	ee 0f       	add	r30, r30
    25a2:	ff 1f       	adc	r31, r31
    25a4:	08 2e       	mov	r0, r24
    25a6:	00 0c       	add	r0, r0
    25a8:	99 0b       	sbc	r25, r25
    25aa:	88 27       	eor	r24, r24
    25ac:	99 0f       	add	r25, r25
    25ae:	88 1f       	adc	r24, r24
    25b0:	99 27       	eor	r25, r25
    25b2:	e8 0f       	add	r30, r24
    25b4:	f9 1f       	adc	r31, r25
    25b6:	ee 0f       	add	r30, r30
    25b8:	ff 1f       	adc	r31, r31
    25ba:	ee 0f       	add	r30, r30
    25bc:	ff 1f       	adc	r31, r31
    25be:	ee 0f       	add	r30, r30
    25c0:	ff 1f       	adc	r31, r31
    25c2:	ec 5a       	subi	r30, 0xAC	; 172
    25c4:	fc 4d       	sbci	r31, 0xDC	; 220
    25c6:	85 85       	ldd	r24, Z+13	; 0x0d
    25c8:	82 fb       	bst	r24, 2
    25ca:	88 27       	eor	r24, r24
    25cc:	80 f9       	bld	r24, 0
    25ce:	08 95       	ret

000025d0 <udd_ep_clear_halt>:
    25d0:	0f 93       	push	r16
    25d2:	28 2f       	mov	r18, r24
    25d4:	2f 70       	andi	r18, 0x0F	; 15
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	a9 01       	movw	r20, r18
    25da:	44 0f       	add	r20, r20
    25dc:	55 1f       	adc	r21, r21
    25de:	28 2f       	mov	r18, r24
    25e0:	08 2e       	mov	r0, r24
    25e2:	00 0c       	add	r0, r0
    25e4:	33 0b       	sbc	r19, r19
    25e6:	22 27       	eor	r18, r18
    25e8:	33 0f       	add	r19, r19
    25ea:	22 1f       	adc	r18, r18
    25ec:	33 27       	eor	r19, r19
    25ee:	24 0f       	add	r18, r20
    25f0:	35 1f       	adc	r19, r21
    25f2:	a9 01       	movw	r20, r18
    25f4:	44 0f       	add	r20, r20
    25f6:	55 1f       	adc	r21, r21
    25f8:	44 0f       	add	r20, r20
    25fa:	55 1f       	adc	r21, r21
    25fc:	44 0f       	add	r20, r20
    25fe:	55 1f       	adc	r21, r21
    2600:	fa 01       	movw	r30, r20
    2602:	e0 5a       	subi	r30, 0xA0	; 160
    2604:	fc 4d       	sbci	r31, 0xDC	; 220
    2606:	01 e0       	ldi	r16, 0x01	; 1
    2608:	06 93       	lac	Z, r16
    260a:	fa 01       	movw	r30, r20
    260c:	ec 5a       	subi	r30, 0xAC	; 172
    260e:	fc 4d       	sbci	r31, 0xDC	; 220
    2610:	95 85       	ldd	r25, Z+13	; 0x0d
    2612:	92 ff       	sbrs	r25, 2
    2614:	11 c0       	rjmp	.+34     	; 0x2638 <udd_ep_clear_halt+0x68>
    2616:	fa 01       	movw	r30, r20
    2618:	ec 5a       	subi	r30, 0xAC	; 172
    261a:	fc 4d       	sbci	r31, 0xDC	; 220
    261c:	95 85       	ldd	r25, Z+13	; 0x0d
    261e:	9b 7f       	andi	r25, 0xFB	; 251
    2620:	95 87       	std	Z+13, r25	; 0x0d
    2622:	64 dc       	rcall	.-1848   	; 0x1eec <udd_ep_get_job>
    2624:	fc 01       	movw	r30, r24
    2626:	80 81       	ld	r24, Z
    2628:	80 ff       	sbrs	r24, 0
    262a:	06 c0       	rjmp	.+12     	; 0x2638 <udd_ep_clear_halt+0x68>
    262c:	8e 7f       	andi	r24, 0xFE	; 254
    262e:	80 83       	st	Z, r24
    2630:	07 80       	ldd	r0, Z+7	; 0x07
    2632:	f0 85       	ldd	r31, Z+8	; 0x08
    2634:	e0 2d       	mov	r30, r0
    2636:	19 95       	eicall
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	0f 91       	pop	r16
    263c:	08 95       	ret

0000263e <udd_ep_run>:
    263e:	5f 92       	push	r5
    2640:	6f 92       	push	r6
    2642:	7f 92       	push	r7
    2644:	8f 92       	push	r8
    2646:	9f 92       	push	r9
    2648:	af 92       	push	r10
    264a:	bf 92       	push	r11
    264c:	cf 92       	push	r12
    264e:	df 92       	push	r13
    2650:	ef 92       	push	r14
    2652:	ff 92       	push	r15
    2654:	0f 93       	push	r16
    2656:	1f 93       	push	r17
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	1f 92       	push	r1
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
    2662:	78 2e       	mov	r7, r24
    2664:	66 2e       	mov	r6, r22
    2666:	4a 01       	movw	r8, r20
    2668:	59 01       	movw	r10, r18
    266a:	40 dc       	rcall	.-1920   	; 0x1eec <udd_ep_get_job>
    266c:	6c 01       	movw	r12, r24
    266e:	57 2c       	mov	r5, r7
    2670:	55 1c       	adc	r5, r5
    2672:	55 24       	eor	r5, r5
    2674:	55 1c       	adc	r5, r5
    2676:	87 2d       	mov	r24, r7
    2678:	8f 70       	andi	r24, 0x0F	; 15
    267a:	e8 2e       	mov	r14, r24
    267c:	f1 2c       	mov	r15, r1
    267e:	ee 0c       	add	r14, r14
    2680:	ff 1c       	adc	r15, r15
    2682:	e5 0c       	add	r14, r5
    2684:	f1 1c       	adc	r15, r1
    2686:	f7 01       	movw	r30, r14
    2688:	ee 0f       	add	r30, r30
    268a:	ff 1f       	adc	r31, r31
    268c:	ee 0f       	add	r30, r30
    268e:	ff 1f       	adc	r31, r31
    2690:	ee 0f       	add	r30, r30
    2692:	ff 1f       	adc	r31, r31
    2694:	ec 5a       	subi	r30, 0xAC	; 172
    2696:	fc 4d       	sbci	r31, 0xDC	; 220
    2698:	85 85       	ldd	r24, Z+13	; 0x0d
    269a:	80 7c       	andi	r24, 0xC0	; 192
    269c:	09 f4       	brne	.+2      	; 0x26a0 <udd_ep_run+0x62>
    269e:	81 c0       	rjmp	.+258    	; 0x27a2 <udd_ep_run+0x164>
    26a0:	f7 01       	movw	r30, r14
    26a2:	ee 0f       	add	r30, r30
    26a4:	ff 1f       	adc	r31, r31
    26a6:	ee 0f       	add	r30, r30
    26a8:	ff 1f       	adc	r31, r31
    26aa:	ee 0f       	add	r30, r30
    26ac:	ff 1f       	adc	r31, r31
    26ae:	ec 5a       	subi	r30, 0xAC	; 172
    26b0:	fc 4d       	sbci	r31, 0xDC	; 220
    26b2:	85 85       	ldd	r24, Z+13	; 0x0d
    26b4:	80 7c       	andi	r24, 0xC0	; 192
    26b6:	80 3c       	cpi	r24, 0xC0	; 192
    26b8:	61 f0       	breq	.+24     	; 0x26d2 <udd_ep_run+0x94>
    26ba:	f7 01       	movw	r30, r14
    26bc:	ee 0f       	add	r30, r30
    26be:	ff 1f       	adc	r31, r31
    26c0:	ee 0f       	add	r30, r30
    26c2:	ff 1f       	adc	r31, r31
    26c4:	ee 0f       	add	r30, r30
    26c6:	ff 1f       	adc	r31, r31
    26c8:	ec 5a       	subi	r30, 0xAC	; 172
    26ca:	fc 4d       	sbci	r31, 0xDC	; 220
    26cc:	85 85       	ldd	r24, Z+13	; 0x0d
    26ce:	82 fd       	sbrc	r24, 2
    26d0:	6a c0       	rjmp	.+212    	; 0x27a6 <udd_ep_run+0x168>
    26d2:	8f b7       	in	r24, 0x3f	; 63
    26d4:	89 83       	std	Y+1, r24	; 0x01
    26d6:	f8 94       	cli
    26d8:	89 81       	ldd	r24, Y+1	; 0x01
    26da:	f6 01       	movw	r30, r12
    26dc:	90 81       	ld	r25, Z
    26de:	90 ff       	sbrs	r25, 0
    26e0:	03 c0       	rjmp	.+6      	; 0x26e8 <udd_ep_run+0xaa>
    26e2:	8f bf       	out	0x3f, r24	; 63
    26e4:	51 2c       	mov	r5, r1
    26e6:	60 c0       	rjmp	.+192    	; 0x27a8 <udd_ep_run+0x16a>
    26e8:	f6 01       	movw	r30, r12
    26ea:	90 81       	ld	r25, Z
    26ec:	91 60       	ori	r25, 0x01	; 1
    26ee:	90 83       	st	Z, r25
    26f0:	8f bf       	out	0x3f, r24	; 63
    26f2:	81 82       	std	Z+1, r8	; 0x01
    26f4:	92 82       	std	Z+2, r9	; 0x02
    26f6:	a3 82       	std	Z+3, r10	; 0x03
    26f8:	b4 82       	std	Z+4, r11	; 0x04
    26fa:	15 82       	std	Z+5, r1	; 0x05
    26fc:	16 82       	std	Z+6, r1	; 0x06
    26fe:	07 83       	std	Z+7, r16	; 0x07
    2700:	10 87       	std	Z+8, r17	; 0x08
    2702:	61 10       	cpse	r6, r1
    2704:	06 c0       	rjmp	.+12     	; 0x2712 <udd_ep_run+0xd4>
    2706:	91 e0       	ldi	r25, 0x01	; 1
    2708:	a1 14       	cp	r10, r1
    270a:	b1 04       	cpc	r11, r1
    270c:	19 f0       	breq	.+6      	; 0x2714 <udd_ep_run+0xd6>
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	01 c0       	rjmp	.+2      	; 0x2714 <udd_ep_run+0xd6>
    2712:	91 e0       	ldi	r25, 0x01	; 1
    2714:	f6 01       	movw	r30, r12
    2716:	80 81       	ld	r24, Z
    2718:	90 fb       	bst	r25, 0
    271a:	81 f9       	bld	r24, 1
    271c:	8b 7f       	andi	r24, 0xFB	; 251
    271e:	80 83       	st	Z, r24
    2720:	55 20       	and	r5, r5
    2722:	61 f0       	breq	.+24     	; 0x273c <udd_ep_run+0xfe>
    2724:	f7 01       	movw	r30, r14
    2726:	ee 0f       	add	r30, r30
    2728:	ff 1f       	adc	r31, r31
    272a:	ee 0f       	add	r30, r30
    272c:	ff 1f       	adc	r31, r31
    272e:	ee 0f       	add	r30, r30
    2730:	ff 1f       	adc	r31, r31
    2732:	ec 5a       	subi	r30, 0xAC	; 172
    2734:	fc 4d       	sbci	r31, 0xDC	; 220
    2736:	12 8a       	std	Z+18, r1	; 0x12
    2738:	13 8a       	std	Z+19, r1	; 0x13
    273a:	2e c0       	rjmp	.+92     	; 0x2798 <udd_ep_run+0x15a>
    273c:	f7 01       	movw	r30, r14
    273e:	ee 0f       	add	r30, r30
    2740:	ff 1f       	adc	r31, r31
    2742:	ee 0f       	add	r30, r30
    2744:	ff 1f       	adc	r31, r31
    2746:	ee 0f       	add	r30, r30
    2748:	ff 1f       	adc	r31, r31
    274a:	ec 5a       	subi	r30, 0xAC	; 172
    274c:	fc 4d       	sbci	r31, 0xDC	; 220
    274e:	85 85       	ldd	r24, Z+13	; 0x0d
    2750:	80 7c       	andi	r24, 0xC0	; 192
    2752:	80 3c       	cpi	r24, 0xC0	; 192
    2754:	a1 f4       	brne	.+40     	; 0x277e <udd_ep_run+0x140>
    2756:	c7 01       	movw	r24, r14
    2758:	88 0f       	add	r24, r24
    275a:	99 1f       	adc	r25, r25
    275c:	88 0f       	add	r24, r24
    275e:	99 1f       	adc	r25, r25
    2760:	88 0f       	add	r24, r24
    2762:	99 1f       	adc	r25, r25
    2764:	80 5a       	subi	r24, 0xA0	; 160
    2766:	9c 4d       	sbci	r25, 0xDC	; 220
    2768:	99 db       	rcall	.-2254   	; 0x1e9c <udd_ep_get_size>
    276a:	bc 01       	movw	r22, r24
    276c:	c5 01       	movw	r24, r10
    276e:	25 d3       	rcall	.+1610   	; 0x2dba <__udivmodhi4>
    2770:	89 2b       	or	r24, r25
    2772:	29 f0       	breq	.+10     	; 0x277e <udd_ep_run+0x140>
    2774:	f6 01       	movw	r30, r12
    2776:	80 81       	ld	r24, Z
    2778:	8e 7f       	andi	r24, 0xFE	; 254
    277a:	80 83       	st	Z, r24
    277c:	15 c0       	rjmp	.+42     	; 0x27a8 <udd_ep_run+0x16a>
    277e:	f7 01       	movw	r30, r14
    2780:	ee 0f       	add	r30, r30
    2782:	ff 1f       	adc	r31, r31
    2784:	ee 0f       	add	r30, r30
    2786:	ff 1f       	adc	r31, r31
    2788:	ee 0f       	add	r30, r30
    278a:	ff 1f       	adc	r31, r31
    278c:	ec 5a       	subi	r30, 0xAC	; 172
    278e:	fc 4d       	sbci	r31, 0xDC	; 220
    2790:	16 86       	std	Z+14, r1	; 0x0e
    2792:	17 86       	std	Z+15, r1	; 0x0f
    2794:	12 8a       	std	Z+18, r1	; 0x12
    2796:	13 8a       	std	Z+19, r1	; 0x13
    2798:	87 2d       	mov	r24, r7
    279a:	34 dc       	rcall	.-1944   	; 0x2004 <udd_ep_trans_complet>
    279c:	55 24       	eor	r5, r5
    279e:	53 94       	inc	r5
    27a0:	03 c0       	rjmp	.+6      	; 0x27a8 <udd_ep_run+0x16a>
    27a2:	51 2c       	mov	r5, r1
    27a4:	01 c0       	rjmp	.+2      	; 0x27a8 <udd_ep_run+0x16a>
    27a6:	51 2c       	mov	r5, r1
    27a8:	85 2d       	mov	r24, r5
    27aa:	0f 90       	pop	r0
    27ac:	df 91       	pop	r29
    27ae:	cf 91       	pop	r28
    27b0:	1f 91       	pop	r17
    27b2:	0f 91       	pop	r16
    27b4:	ff 90       	pop	r15
    27b6:	ef 90       	pop	r14
    27b8:	df 90       	pop	r13
    27ba:	cf 90       	pop	r12
    27bc:	bf 90       	pop	r11
    27be:	af 90       	pop	r10
    27c0:	9f 90       	pop	r9
    27c2:	8f 90       	pop	r8
    27c4:	7f 90       	pop	r7
    27c6:	6f 90       	pop	r6
    27c8:	5f 90       	pop	r5
    27ca:	08 95       	ret

000027cc <udd_ep_abort>:
    27cc:	ff 92       	push	r15
    27ce:	0f 93       	push	r16
    27d0:	1f 93       	push	r17
    27d2:	cf 93       	push	r28
    27d4:	df 93       	push	r29
    27d6:	18 2f       	mov	r17, r24
    27d8:	f8 2e       	mov	r15, r24
    27da:	ff 1c       	adc	r15, r15
    27dc:	ff 24       	eor	r15, r15
    27de:	ff 1c       	adc	r15, r15
    27e0:	c8 2f       	mov	r28, r24
    27e2:	cf 70       	andi	r28, 0x0F	; 15
    27e4:	d0 e0       	ldi	r29, 0x00	; 0
    27e6:	cc 0f       	add	r28, r28
    27e8:	dd 1f       	adc	r29, r29
    27ea:	cf 0d       	add	r28, r15
    27ec:	d1 1d       	adc	r29, r1
    27ee:	7e db       	rcall	.-2308   	; 0x1eec <udd_ep_get_job>
    27f0:	dc 01       	movw	r26, r24
    27f2:	fe 01       	movw	r30, r28
    27f4:	ee 0f       	add	r30, r30
    27f6:	ff 1f       	adc	r31, r31
    27f8:	ee 0f       	add	r30, r30
    27fa:	ff 1f       	adc	r31, r31
    27fc:	ee 0f       	add	r30, r30
    27fe:	ff 1f       	adc	r31, r31
    2800:	e0 5a       	subi	r30, 0xA0	; 160
    2802:	fc 4d       	sbci	r31, 0xDC	; 220
    2804:	02 e0       	ldi	r16, 0x02	; 2
    2806:	05 93       	las	Z, r16
    2808:	8c 91       	ld	r24, X
    280a:	80 ff       	sbrs	r24, 0
    280c:	22 c0       	rjmp	.+68     	; 0x2852 <udd_ep_abort+0x86>
    280e:	8e 7f       	andi	r24, 0xFE	; 254
    2810:	8c 93       	st	X, r24
    2812:	17 96       	adiw	r26, 0x07	; 7
    2814:	ed 91       	ld	r30, X+
    2816:	fc 91       	ld	r31, X
    2818:	18 97       	sbiw	r26, 0x08	; 8
    281a:	30 97       	sbiw	r30, 0x00	; 0
    281c:	d1 f0       	breq	.+52     	; 0x2852 <udd_ep_abort+0x86>
    281e:	ff 20       	and	r15, r15
    2820:	59 f0       	breq	.+22     	; 0x2838 <udd_ep_abort+0x6c>
    2822:	cc 0f       	add	r28, r28
    2824:	dd 1f       	adc	r29, r29
    2826:	cc 0f       	add	r28, r28
    2828:	dd 1f       	adc	r29, r29
    282a:	cc 0f       	add	r28, r28
    282c:	dd 1f       	adc	r29, r29
    282e:	cc 5a       	subi	r28, 0xAC	; 172
    2830:	dc 4d       	sbci	r29, 0xDC	; 220
    2832:	6a 89       	ldd	r22, Y+18	; 0x12
    2834:	7b 89       	ldd	r23, Y+19	; 0x13
    2836:	0a c0       	rjmp	.+20     	; 0x284c <udd_ep_abort+0x80>
    2838:	cc 0f       	add	r28, r28
    283a:	dd 1f       	adc	r29, r29
    283c:	cc 0f       	add	r28, r28
    283e:	dd 1f       	adc	r29, r29
    2840:	cc 0f       	add	r28, r28
    2842:	dd 1f       	adc	r29, r29
    2844:	cc 5a       	subi	r28, 0xAC	; 172
    2846:	dc 4d       	sbci	r29, 0xDC	; 220
    2848:	6e 85       	ldd	r22, Y+14	; 0x0e
    284a:	7f 85       	ldd	r23, Y+15	; 0x0f
    284c:	41 2f       	mov	r20, r17
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	19 95       	eicall
    2852:	df 91       	pop	r29
    2854:	cf 91       	pop	r28
    2856:	1f 91       	pop	r17
    2858:	0f 91       	pop	r16
    285a:	ff 90       	pop	r15
    285c:	08 95       	ret

0000285e <udd_ep_free>:
    285e:	cf 93       	push	r28
    2860:	c8 2f       	mov	r28, r24
    2862:	b4 df       	rcall	.-152    	; 0x27cc <udd_ep_abort>
    2864:	ec 2f       	mov	r30, r28
    2866:	ef 70       	andi	r30, 0x0F	; 15
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	ee 0f       	add	r30, r30
    286c:	ff 1f       	adc	r31, r31
    286e:	8c 2f       	mov	r24, r28
    2870:	cc 0f       	add	r28, r28
    2872:	99 0b       	sbc	r25, r25
    2874:	88 27       	eor	r24, r24
    2876:	99 0f       	add	r25, r25
    2878:	88 1f       	adc	r24, r24
    287a:	99 27       	eor	r25, r25
    287c:	e8 0f       	add	r30, r24
    287e:	f9 1f       	adc	r31, r25
    2880:	ee 0f       	add	r30, r30
    2882:	ff 1f       	adc	r31, r31
    2884:	ee 0f       	add	r30, r30
    2886:	ff 1f       	adc	r31, r31
    2888:	ee 0f       	add	r30, r30
    288a:	ff 1f       	adc	r31, r31
    288c:	ec 5a       	subi	r30, 0xAC	; 172
    288e:	fc 4d       	sbci	r31, 0xDC	; 220
    2890:	15 86       	std	Z+13, r1	; 0x0d
    2892:	cf 91       	pop	r28
    2894:	08 95       	ret

00002896 <udd_ep_set_halt>:
    2896:	e8 2f       	mov	r30, r24
    2898:	ef 70       	andi	r30, 0x0F	; 15
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	ee 0f       	add	r30, r30
    289e:	ff 1f       	adc	r31, r31
    28a0:	28 2f       	mov	r18, r24
    28a2:	08 2e       	mov	r0, r24
    28a4:	00 0c       	add	r0, r0
    28a6:	33 0b       	sbc	r19, r19
    28a8:	22 27       	eor	r18, r18
    28aa:	33 0f       	add	r19, r19
    28ac:	22 1f       	adc	r18, r18
    28ae:	33 27       	eor	r19, r19
    28b0:	e2 0f       	add	r30, r18
    28b2:	f3 1f       	adc	r31, r19
    28b4:	ee 0f       	add	r30, r30
    28b6:	ff 1f       	adc	r31, r31
    28b8:	ee 0f       	add	r30, r30
    28ba:	ff 1f       	adc	r31, r31
    28bc:	ee 0f       	add	r30, r30
    28be:	ff 1f       	adc	r31, r31
    28c0:	ec 5a       	subi	r30, 0xAC	; 172
    28c2:	fc 4d       	sbci	r31, 0xDC	; 220
    28c4:	95 85       	ldd	r25, Z+13	; 0x0d
    28c6:	94 60       	ori	r25, 0x04	; 4
    28c8:	95 87       	std	Z+13, r25	; 0x0d
    28ca:	80 df       	rcall	.-256    	; 0x27cc <udd_ep_abort>
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	08 95       	ret

000028d0 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    28d0:	1f 92       	push	r1
    28d2:	0f 92       	push	r0
    28d4:	0f b6       	in	r0, 0x3f	; 63
    28d6:	0f 92       	push	r0
    28d8:	11 24       	eor	r1, r1
    28da:	08 b6       	in	r0, 0x38	; 56
    28dc:	0f 92       	push	r0
    28de:	18 be       	out	0x38, r1	; 56
    28e0:	09 b6       	in	r0, 0x39	; 57
    28e2:	0f 92       	push	r0
    28e4:	19 be       	out	0x39, r1	; 57
    28e6:	0b b6       	in	r0, 0x3b	; 59
    28e8:	0f 92       	push	r0
    28ea:	1b be       	out	0x3b, r1	; 59
    28ec:	0f 93       	push	r16
    28ee:	2f 93       	push	r18
    28f0:	3f 93       	push	r19
    28f2:	4f 93       	push	r20
    28f4:	5f 93       	push	r21
    28f6:	6f 93       	push	r22
    28f8:	7f 93       	push	r23
    28fa:	8f 93       	push	r24
    28fc:	9f 93       	push	r25
    28fe:	af 93       	push	r26
    2900:	bf 93       	push	r27
    2902:	ef 93       	push	r30
    2904:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2906:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    290a:	88 23       	and	r24, r24
    290c:	34 f4       	brge	.+12     	; 0x291a <__vector_125+0x4a>
		udd_ack_start_of_frame_event();
    290e:	80 e8       	ldi	r24, 0x80	; 128
    2910:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2914:	0e 94 af 0b 	call	0x175e	; 0x175e <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2918:	86 c0       	rjmp	.+268    	; 0x2a26 <__vector_125+0x156>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    291a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    291e:	82 ff       	sbrs	r24, 2
    2920:	20 c0       	rjmp	.+64     	; 0x2962 <__vector_125+0x92>
		udd_ack_underflow_event();
    2922:	84 e0       	ldi	r24, 0x04	; 4
    2924:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2928:	80 91 68 23 	lds	r24, 0x2368	; 0x802368 <udd_sram+0x14>
    292c:	86 ff       	sbrs	r24, 6
    292e:	7b c0       	rjmp	.+246    	; 0x2a26 <__vector_125+0x156>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2930:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2934:	81 fd       	sbrc	r24, 1
    2936:	77 c0       	rjmp	.+238    	; 0x2a26 <__vector_125+0x156>
    2938:	f4 da       	rcall	.-2584   	; 0x1f22 <udd_ctrl_interrupt_tc_setup>
    293a:	81 11       	cpse	r24, r1
    293c:	74 c0       	rjmp	.+232    	; 0x2a26 <__vector_125+0x156>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    293e:	80 91 51 23 	lds	r24, 0x2351	; 0x802351 <udd_ep_control_state>
    2942:	81 30       	cpi	r24, 0x01	; 1
    2944:	11 f4       	brne	.+4      	; 0x294a <__vector_125+0x7a>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2946:	28 da       	rcall	.-2992   	; 0x1d98 <udd_ctrl_send_zlp_in>
    2948:	6e c0       	rjmp	.+220    	; 0x2a26 <__vector_125+0x156>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    294a:	84 30       	cpi	r24, 0x04	; 4
    294c:	09 f0       	breq	.+2      	; 0x2950 <__vector_125+0x80>
    294e:	6b c0       	rjmp	.+214    	; 0x2a26 <__vector_125+0x156>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2950:	e9 e6       	ldi	r30, 0x69	; 105
    2952:	f3 e2       	ldi	r31, 0x23	; 35
    2954:	04 e0       	ldi	r16, 0x04	; 4
    2956:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2958:	e1 e6       	ldi	r30, 0x61	; 97
    295a:	f3 e2       	ldi	r31, 0x23	; 35
    295c:	04 e0       	ldi	r16, 0x04	; 4
    295e:	05 93       	las	Z, r16
    2960:	62 c0       	rjmp	.+196    	; 0x2a26 <__vector_125+0x156>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2962:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2966:	81 ff       	sbrs	r24, 1
    2968:	59 c0       	rjmp	.+178    	; 0x2a1c <__vector_125+0x14c>
		udd_ack_overflow_event();
    296a:	82 e0       	ldi	r24, 0x02	; 2
    296c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2970:	80 91 60 23 	lds	r24, 0x2360	; 0x802360 <udd_sram+0xc>
    2974:	86 ff       	sbrs	r24, 6
    2976:	57 c0       	rjmp	.+174    	; 0x2a26 <__vector_125+0x156>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2978:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    297c:	81 fd       	sbrc	r24, 1
    297e:	53 c0       	rjmp	.+166    	; 0x2a26 <__vector_125+0x156>
    2980:	d0 da       	rcall	.-2656   	; 0x1f22 <udd_ctrl_interrupt_tc_setup>
    2982:	81 11       	cpse	r24, r1
    2984:	50 c0       	rjmp	.+160    	; 0x2a26 <__vector_125+0x156>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2986:	80 91 51 23 	lds	r24, 0x2351	; 0x802351 <udd_ep_control_state>
    298a:	82 30       	cpi	r24, 0x02	; 2
    298c:	41 f4       	brne	.+16     	; 0x299e <__vector_125+0xce>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    298e:	84 e0       	ldi	r24, 0x04	; 4
    2990:	80 93 51 23 	sts	0x2351, r24	; 0x802351 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2994:	e0 e6       	ldi	r30, 0x60	; 96
    2996:	f3 e2       	ldi	r31, 0x23	; 35
    2998:	02 e0       	ldi	r16, 0x02	; 2
    299a:	06 93       	lac	Z, r16
    299c:	44 c0       	rjmp	.+136    	; 0x2a26 <__vector_125+0x156>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    299e:	83 30       	cpi	r24, 0x03	; 3
    29a0:	09 f0       	breq	.+2      	; 0x29a4 <__vector_125+0xd4>
    29a2:	41 c0       	rjmp	.+130    	; 0x2a26 <__vector_125+0x156>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    29a4:	e9 e6       	ldi	r30, 0x69	; 105
    29a6:	f3 e2       	ldi	r31, 0x23	; 35
    29a8:	04 e0       	ldi	r16, 0x04	; 4
    29aa:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    29ac:	e1 e6       	ldi	r30, 0x61	; 97
    29ae:	f3 e2       	ldi	r31, 0x23	; 35
    29b0:	04 e0       	ldi	r16, 0x04	; 4
    29b2:	05 93       	las	Z, r16
    29b4:	38 c0       	rjmp	.+112    	; 0x2a26 <__vector_125+0x156>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    29b6:	80 e1       	ldi	r24, 0x10	; 16
    29b8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	06 df       	rcall	.-500    	; 0x27cc <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    29c0:	81 e8       	ldi	r24, 0x81	; 129
    29c2:	04 df       	rcall	.-504    	; 0x27cc <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    29c4:	82 e0       	ldi	r24, 0x02	; 2
    29c6:	02 df       	rcall	.-508    	; 0x27cc <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    29c8:	82 e8       	ldi	r24, 0x82	; 130
    29ca:	00 df       	rcall	.-512    	; 0x27cc <udd_ep_abort>
		}
#endif
		udc_reset();
    29cc:	0e 94 88 0b 	call	0x1710	; 0x1710 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    29d0:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    29d4:	e4 e5       	ldi	r30, 0x54	; 84
    29d6:	f3 e2       	ldi	r31, 0x23	; 35
    29d8:	15 86       	std	Z+13, r1	; 0x0d
	udd_endpoint_clear_status(ep_ctrl);
    29da:	96 e0       	ldi	r25, 0x06	; 6
    29dc:	94 87       	std	Z+12, r25	; 0x0c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    29de:	83 e4       	ldi	r24, 0x43	; 67
    29e0:	85 87       	std	Z+13, r24	; 0x0d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    29e2:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    29e4:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    29e6:	85 8b       	std	Z+21, r24	; 0x15
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    29e8:	8d e0       	ldi	r24, 0x0D	; 13
    29ea:	93 e2       	ldi	r25, 0x23	; 35
    29ec:	80 8b       	std	Z+16, r24	; 0x10
    29ee:	91 8b       	std	Z+17, r25	; 0x11
		// Reset endpoint control management
		udd_ctrl_init();
    29f0:	a0 d9       	rcall	.-3264   	; 0x1d32 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    29f2:	19 c0       	rjmp	.+50     	; 0x2a26 <__vector_125+0x156>
	}

	if (udd_is_suspend_event()) {
    29f4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    29f8:	86 ff       	sbrs	r24, 6
    29fa:	06 c0       	rjmp	.+12     	; 0x2a08 <__vector_125+0x138>
		udd_ack_suspend_event();
    29fc:	80 e4       	ldi	r24, 0x40	; 64
    29fe:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	5e d9       	rcall	.-3396   	; 0x1cc2 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2a06:	0f c0       	rjmp	.+30     	; 0x2a26 <__vector_125+0x156>
	}

	if (udd_is_resume_event()) {
    2a08:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a0c:	85 ff       	sbrs	r24, 5
    2a0e:	0b c0       	rjmp	.+22     	; 0x2a26 <__vector_125+0x156>
		udd_ack_resume_event();
    2a10:	80 e2       	ldi	r24, 0x20	; 32
    2a12:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	54 d9       	rcall	.-3416   	; 0x1cc2 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2a1a:	05 c0       	rjmp	.+10     	; 0x2a26 <__vector_125+0x156>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2a1c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a20:	84 fd       	sbrc	r24, 4
    2a22:	c9 cf       	rjmp	.-110    	; 0x29b6 <__vector_125+0xe6>
    2a24:	e7 cf       	rjmp	.-50     	; 0x29f4 <__vector_125+0x124>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2a26:	ff 91       	pop	r31
    2a28:	ef 91       	pop	r30
    2a2a:	bf 91       	pop	r27
    2a2c:	af 91       	pop	r26
    2a2e:	9f 91       	pop	r25
    2a30:	8f 91       	pop	r24
    2a32:	7f 91       	pop	r23
    2a34:	6f 91       	pop	r22
    2a36:	5f 91       	pop	r21
    2a38:	4f 91       	pop	r20
    2a3a:	3f 91       	pop	r19
    2a3c:	2f 91       	pop	r18
    2a3e:	0f 91       	pop	r16
    2a40:	0f 90       	pop	r0
    2a42:	0b be       	out	0x3b, r0	; 59
    2a44:	0f 90       	pop	r0
    2a46:	09 be       	out	0x39, r0	; 57
    2a48:	0f 90       	pop	r0
    2a4a:	08 be       	out	0x38, r0	; 56
    2a4c:	0f 90       	pop	r0
    2a4e:	0f be       	out	0x3f, r0	; 63
    2a50:	0f 90       	pop	r0
    2a52:	1f 90       	pop	r1
    2a54:	18 95       	reti

00002a56 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2a56:	1f 92       	push	r1
    2a58:	0f 92       	push	r0
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	0f 92       	push	r0
    2a5e:	11 24       	eor	r1, r1
    2a60:	08 b6       	in	r0, 0x38	; 56
    2a62:	0f 92       	push	r0
    2a64:	18 be       	out	0x38, r1	; 56
    2a66:	09 b6       	in	r0, 0x39	; 57
    2a68:	0f 92       	push	r0
    2a6a:	19 be       	out	0x39, r1	; 57
    2a6c:	0a b6       	in	r0, 0x3a	; 58
    2a6e:	0f 92       	push	r0
    2a70:	1a be       	out	0x3a, r1	; 58
    2a72:	0b b6       	in	r0, 0x3b	; 59
    2a74:	0f 92       	push	r0
    2a76:	1b be       	out	0x3b, r1	; 59
    2a78:	0f 93       	push	r16
    2a7a:	1f 93       	push	r17
    2a7c:	2f 93       	push	r18
    2a7e:	3f 93       	push	r19
    2a80:	4f 93       	push	r20
    2a82:	5f 93       	push	r21
    2a84:	6f 93       	push	r22
    2a86:	7f 93       	push	r23
    2a88:	8f 93       	push	r24
    2a8a:	9f 93       	push	r25
    2a8c:	af 93       	push	r26
    2a8e:	bf 93       	push	r27
    2a90:	cf 93       	push	r28
    2a92:	df 93       	push	r29
    2a94:	ef 93       	push	r30
    2a96:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2a98:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2a9c:	81 fd       	sbrc	r24, 1
    2a9e:	03 c0       	rjmp	.+6      	; 0x2aa6 <__vector_126+0x50>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2aa0:	40 da       	rcall	.-2944   	; 0x1f22 <udd_ctrl_interrupt_tc_setup>
    2aa2:	81 11       	cpse	r24, r1
    2aa4:	c3 c0       	rjmp	.+390    	; 0x2c2c <__vector_126+0x1d6>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2aa6:	82 e0       	ldi	r24, 0x02	; 2
    2aa8:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2aac:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2ab0:	81 95       	neg	r24
    2ab2:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2ab4:	e0 e6       	ldi	r30, 0x60	; 96
    2ab6:	f3 e2       	ldi	r31, 0x23	; 35
    2ab8:	e8 1b       	sub	r30, r24
    2aba:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2abc:	20 81       	ld	r18, Z
    2abe:	31 81       	ldd	r19, Z+1	; 0x01
    2ac0:	20 56       	subi	r18, 0x60	; 96
    2ac2:	33 42       	sbci	r19, 0x23	; 35
    2ac4:	36 95       	lsr	r19
    2ac6:	27 95       	ror	r18
    2ac8:	36 95       	lsr	r19
    2aca:	27 95       	ror	r18
    2acc:	36 95       	lsr	r19
    2ace:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2ad0:	82 2f       	mov	r24, r18
    2ad2:	86 95       	lsr	r24
    2ad4:	20 fd       	sbrc	r18, 0
    2ad6:	02 c0       	rjmp	.+4      	; 0x2adc <__vector_126+0x86>
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	01 c0       	rjmp	.+2      	; 0x2ade <__vector_126+0x88>
    2adc:	90 e8       	ldi	r25, 0x80	; 128
    2ade:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2ae0:	e8 2f       	mov	r30, r24
    2ae2:	ef 70       	andi	r30, 0x0F	; 15
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	ee 0f       	add	r30, r30
    2ae8:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2aea:	28 2f       	mov	r18, r24
    2aec:	08 2e       	mov	r0, r24
    2aee:	00 0c       	add	r0, r0
    2af0:	33 0b       	sbc	r19, r19
    2af2:	22 27       	eor	r18, r18
    2af4:	33 0f       	add	r19, r19
    2af6:	22 1f       	adc	r18, r18
    2af8:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2afa:	e2 0f       	add	r30, r18
    2afc:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2afe:	df 01       	movw	r26, r30
    2b00:	aa 0f       	add	r26, r26
    2b02:	bb 1f       	adc	r27, r27
    2b04:	aa 0f       	add	r26, r26
    2b06:	bb 1f       	adc	r27, r27
    2b08:	aa 0f       	add	r26, r26
    2b0a:	bb 1f       	adc	r27, r27
    2b0c:	ac 5a       	subi	r26, 0xAC	; 172
    2b0e:	bc 4d       	sbci	r27, 0xDC	; 220
    2b10:	1c 96       	adiw	r26, 0x0c	; 12
    2b12:	9c 91       	ld	r25, X
    2b14:	95 ff       	sbrs	r25, 5
    2b16:	8a c0       	rjmp	.+276    	; 0x2c2c <__vector_126+0x1d6>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2b18:	ee 0f       	add	r30, r30
    2b1a:	ff 1f       	adc	r31, r31
    2b1c:	ee 0f       	add	r30, r30
    2b1e:	ff 1f       	adc	r31, r31
    2b20:	ee 0f       	add	r30, r30
    2b22:	ff 1f       	adc	r31, r31
    2b24:	e0 5a       	subi	r30, 0xA0	; 160
    2b26:	fc 4d       	sbci	r31, 0xDC	; 220
    2b28:	00 e2       	ldi	r16, 0x20	; 32
    2b2a:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2b2c:	81 11       	cpse	r24, r1
    2b2e:	79 c0       	rjmp	.+242    	; 0x2c22 <__vector_126+0x1cc>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2b30:	80 91 51 23 	lds	r24, 0x2351	; 0x802351 <udd_ep_control_state>
    2b34:	84 30       	cpi	r24, 0x04	; 4
    2b36:	19 f4       	brne	.+6      	; 0x2b3e <__vector_126+0xe8>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2b38:	3d d9       	rcall	.-3462   	; 0x1db4 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2b3a:	fb d8       	rcall	.-3594   	; 0x1d32 <udd_ctrl_init>
    2b3c:	77 c0       	rjmp	.+238    	; 0x2c2c <__vector_126+0x1d6>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2b3e:	00 91 62 23 	lds	r16, 0x2362	; 0x802362 <udd_sram+0xe>
    2b42:	10 91 63 23 	lds	r17, 0x2363	; 0x802363 <udd_sram+0xf>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2b46:	80 91 a0 24 	lds	r24, 0x24A0	; 0x8024a0 <udd_g_ctrlreq+0xa>
    2b4a:	90 91 a1 24 	lds	r25, 0x24A1	; 0x8024a1 <udd_g_ctrlreq+0xb>
    2b4e:	c0 91 4d 23 	lds	r28, 0x234D	; 0x80234d <udd_ctrl_payload_nb_trans>
    2b52:	d0 91 4e 23 	lds	r29, 0x234E	; 0x80234e <udd_ctrl_payload_nb_trans+0x1>
    2b56:	9e 01       	movw	r18, r28
    2b58:	20 0f       	add	r18, r16
    2b5a:	31 1f       	adc	r19, r17
    2b5c:	82 17       	cp	r24, r18
    2b5e:	93 07       	cpc	r25, r19
    2b60:	18 f4       	brcc	.+6      	; 0x2b68 <__vector_126+0x112>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2b62:	8c 01       	movw	r16, r24
    2b64:	0c 1b       	sub	r16, r28
    2b66:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2b68:	80 91 9e 24 	lds	r24, 0x249E	; 0x80249e <udd_g_ctrlreq+0x8>
    2b6c:	90 91 9f 24 	lds	r25, 0x249F	; 0x80249f <udd_g_ctrlreq+0x9>
    2b70:	a8 01       	movw	r20, r16
    2b72:	6d e0       	ldi	r22, 0x0D	; 13
    2b74:	73 e2       	ldi	r23, 0x23	; 35
    2b76:	8c 0f       	add	r24, r28
    2b78:	9d 1f       	adc	r25, r29
    2b7a:	3c d1       	rcall	.+632    	; 0x2df4 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2b7c:	c0 0f       	add	r28, r16
    2b7e:	d1 1f       	adc	r29, r17
    2b80:	c0 93 4d 23 	sts	0x234D, r28	; 0x80234d <udd_ctrl_payload_nb_trans>
    2b84:	d0 93 4e 23 	sts	0x234E, r29	; 0x80234e <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2b88:	00 34       	cpi	r16, 0x40	; 64
    2b8a:	11 05       	cpc	r17, r1
    2b8c:	69 f4       	brne	.+26     	; 0x2ba8 <__vector_126+0x152>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2b8e:	80 91 4f 23 	lds	r24, 0x234F	; 0x80234f <udd_ctrl_prev_payload_nb_trans>
    2b92:	90 91 50 23 	lds	r25, 0x2350	; 0x802350 <udd_ctrl_prev_payload_nb_trans+0x1>
    2b96:	8c 0f       	add	r24, r28
    2b98:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2b9a:	20 91 9c 24 	lds	r18, 0x249C	; 0x80249c <udd_g_ctrlreq+0x6>
    2b9e:	30 91 9d 24 	lds	r19, 0x249D	; 0x80249d <udd_g_ctrlreq+0x7>
    2ba2:	82 17       	cp	r24, r18
    2ba4:	93 07       	cpc	r25, r19
    2ba6:	80 f0       	brcs	.+32     	; 0x2bc8 <__vector_126+0x172>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2ba8:	e6 e9       	ldi	r30, 0x96	; 150
    2baa:	f4 e2       	ldi	r31, 0x24	; 36
    2bac:	c2 87       	std	Z+10, r28	; 0x0a
    2bae:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2bb0:	06 84       	ldd	r0, Z+14	; 0x0e
    2bb2:	f7 85       	ldd	r31, Z+15	; 0x0f
    2bb4:	e0 2d       	mov	r30, r0
    2bb6:	30 97       	sbiw	r30, 0x00	; 0
    2bb8:	29 f0       	breq	.+10     	; 0x2bc4 <__vector_126+0x16e>
			if (!udd_g_ctrlreq.over_under_run()) {
    2bba:	19 95       	eicall
    2bbc:	81 11       	cpse	r24, r1
    2bbe:	02 c0       	rjmp	.+4      	; 0x2bc4 <__vector_126+0x16e>
				// Stall ZLP
				udd_ctrl_stall_data();
    2bc0:	dd d8       	rcall	.-3654   	; 0x1d7c <udd_ctrl_stall_data>
    2bc2:	34 c0       	rjmp	.+104    	; 0x2c2c <__vector_126+0x1d6>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2bc4:	e9 d8       	rcall	.-3630   	; 0x1d98 <udd_ctrl_send_zlp_in>
    2bc6:	32 c0       	rjmp	.+100    	; 0x2c2c <__vector_126+0x1d6>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2bc8:	80 91 a0 24 	lds	r24, 0x24A0	; 0x8024a0 <udd_g_ctrlreq+0xa>
    2bcc:	90 91 a1 24 	lds	r25, 0x24A1	; 0x8024a1 <udd_g_ctrlreq+0xb>
    2bd0:	c8 17       	cp	r28, r24
    2bd2:	d9 07       	cpc	r29, r25
    2bd4:	f9 f4       	brne	.+62     	; 0x2c14 <__vector_126+0x1be>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2bd6:	e0 91 a4 24 	lds	r30, 0x24A4	; 0x8024a4 <udd_g_ctrlreq+0xe>
    2bda:	f0 91 a5 24 	lds	r31, 0x24A5	; 0x8024a5 <udd_g_ctrlreq+0xf>
    2bde:	30 97       	sbiw	r30, 0x00	; 0
    2be0:	11 f4       	brne	.+4      	; 0x2be6 <__vector_126+0x190>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2be2:	cc d8       	rcall	.-3688   	; 0x1d7c <udd_ctrl_stall_data>
    2be4:	23 c0       	rjmp	.+70     	; 0x2c2c <__vector_126+0x1d6>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2be6:	19 95       	eicall
    2be8:	81 11       	cpse	r24, r1
    2bea:	02 c0       	rjmp	.+4      	; 0x2bf0 <__vector_126+0x19a>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2bec:	c7 d8       	rcall	.-3698   	; 0x1d7c <udd_ctrl_stall_data>
    2bee:	1e c0       	rjmp	.+60     	; 0x2c2c <__vector_126+0x1d6>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2bf0:	20 91 4f 23 	lds	r18, 0x234F	; 0x80234f <udd_ctrl_prev_payload_nb_trans>
    2bf4:	30 91 50 23 	lds	r19, 0x2350	; 0x802350 <udd_ctrl_prev_payload_nb_trans+0x1>
    2bf8:	80 91 4d 23 	lds	r24, 0x234D	; 0x80234d <udd_ctrl_payload_nb_trans>
    2bfc:	90 91 4e 23 	lds	r25, 0x234E	; 0x80234e <udd_ctrl_payload_nb_trans+0x1>
    2c00:	82 0f       	add	r24, r18
    2c02:	93 1f       	adc	r25, r19
    2c04:	80 93 4f 23 	sts	0x234F, r24	; 0x80234f <udd_ctrl_prev_payload_nb_trans>
    2c08:	90 93 50 23 	sts	0x2350, r25	; 0x802350 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2c0c:	10 92 4d 23 	sts	0x234D, r1	; 0x80234d <udd_ctrl_payload_nb_trans>
    2c10:	10 92 4e 23 	sts	0x234E, r1	; 0x80234e <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2c14:	e0 e6       	ldi	r30, 0x60	; 96
    2c16:	f3 e2       	ldi	r31, 0x23	; 35
    2c18:	02 e0       	ldi	r16, 0x02	; 2
    2c1a:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    2c1c:	00 e2       	ldi	r16, 0x20	; 32
    2c1e:	06 93       	lac	Z, r16
    2c20:	05 c0       	rjmp	.+10     	; 0x2c2c <__vector_126+0x1d6>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2c22:	80 38       	cpi	r24, 0x80	; 128
    2c24:	11 f4       	brne	.+4      	; 0x2c2a <__vector_126+0x1d4>
		udd_ctrl_in_sent();
    2c26:	ce d8       	rcall	.-3684   	; 0x1dc4 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2c28:	01 c0       	rjmp	.+2      	; 0x2c2c <__vector_126+0x1d6>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2c2a:	ec d9       	rcall	.-3112   	; 0x2004 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2c2c:	ff 91       	pop	r31
    2c2e:	ef 91       	pop	r30
    2c30:	df 91       	pop	r29
    2c32:	cf 91       	pop	r28
    2c34:	bf 91       	pop	r27
    2c36:	af 91       	pop	r26
    2c38:	9f 91       	pop	r25
    2c3a:	8f 91       	pop	r24
    2c3c:	7f 91       	pop	r23
    2c3e:	6f 91       	pop	r22
    2c40:	5f 91       	pop	r21
    2c42:	4f 91       	pop	r20
    2c44:	3f 91       	pop	r19
    2c46:	2f 91       	pop	r18
    2c48:	1f 91       	pop	r17
    2c4a:	0f 91       	pop	r16
    2c4c:	0f 90       	pop	r0
    2c4e:	0b be       	out	0x3b, r0	; 59
    2c50:	0f 90       	pop	r0
    2c52:	0a be       	out	0x3a, r0	; 58
    2c54:	0f 90       	pop	r0
    2c56:	09 be       	out	0x39, r0	; 57
    2c58:	0f 90       	pop	r0
    2c5a:	08 be       	out	0x38, r0	; 56
    2c5c:	0f 90       	pop	r0
    2c5e:	0f be       	out	0x3f, r0	; 63
    2c60:	0f 90       	pop	r0
    2c62:	1f 90       	pop	r1
    2c64:	18 95       	reti

00002c66 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
    2c66:	cf 93       	push	r28
    2c68:	df 93       	push	r29
    2c6a:	cd b7       	in	r28, 0x3d	; 61
    2c6c:	de b7       	in	r29, 0x3e	; 62
    2c6e:	25 97       	sbiw	r28, 0x05	; 5
    2c70:	cd bf       	out	0x3d, r28	; 61
    2c72:	de bf       	out	0x3e, r29	; 62
    2c74:	6c e1       	ldi	r22, 0x1C	; 28
    2c76:	70 e0       	ldi	r23, 0x00	; 0
    2c78:	82 e0       	ldi	r24, 0x02	; 2
    2c7a:	8f d0       	rcall	.+286    	; 0x2d9a <nvm_read_byte>
    2c7c:	8a 83       	std	Y+2, r24	; 0x02
    2c7e:	6d e1       	ldi	r22, 0x1D	; 29
    2c80:	70 e0       	ldi	r23, 0x00	; 0
    2c82:	82 e0       	ldi	r24, 0x02	; 2
    2c84:	8a d0       	rcall	.+276    	; 0x2d9a <nvm_read_byte>
    2c86:	89 83       	std	Y+1, r24	; 0x01
    2c88:	89 81       	ldd	r24, Y+1	; 0x01
    2c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c8c:	01 96       	adiw	r24, 0x01	; 1
    2c8e:	21 f4       	brne	.+8      	; 0x2c98 <sysclk_init+0x32>
    2c90:	80 e4       	ldi	r24, 0x40	; 64
    2c92:	93 e2       	ldi	r25, 0x23	; 35
    2c94:	89 83       	std	Y+1, r24	; 0x01
    2c96:	9a 83       	std	Y+2, r25	; 0x02
    2c98:	89 81       	ldd	r24, Y+1	; 0x01
    2c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9c:	8b 83       	std	Y+3, r24	; 0x03
    2c9e:	9c 83       	std	Y+4, r25	; 0x04
    2ca0:	e0 e6       	ldi	r30, 0x60	; 96
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	82 83       	std	Z+2, r24	; 0x02
    2ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca8:	83 83       	std	Z+3, r24	; 0x03
    2caa:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    2cae:	84 fd       	sbrc	r24, 4
    2cb0:	0f c0       	rjmp	.+30     	; 0x2cd0 <sysclk_init+0x6a>
    2cb2:	8f b7       	in	r24, 0x3f	; 63
    2cb4:	8d 83       	std	Y+5, r24	; 0x05
    2cb6:	f8 94       	cli
    2cb8:	9d 81       	ldd	r25, Y+5	; 0x05
    2cba:	e0 e5       	ldi	r30, 0x50	; 80
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	80 e1       	ldi	r24, 0x10	; 16
    2cc0:	85 83       	std	Z+5, r24	; 0x05
    2cc2:	80 81       	ld	r24, Z
    2cc4:	80 61       	ori	r24, 0x10	; 16
    2cc6:	80 83       	st	Z, r24
    2cc8:	9f bf       	out	0x3f, r25	; 63
    2cca:	81 81       	ldd	r24, Z+1	; 0x01
    2ccc:	84 ff       	sbrs	r24, 4
    2cce:	fd cf       	rjmp	.-6      	; 0x2cca <sysclk_init+0x64>
    2cd0:	64 e0       	ldi	r22, 0x04	; 4
    2cd2:	80 e4       	ldi	r24, 0x40	; 64
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	6b d0       	rcall	.+214    	; 0x2dae <ccp_write_io>
    2cd8:	25 96       	adiw	r28, 0x05	; 5
    2cda:	cd bf       	out	0x3d, r28	; 61
    2cdc:	de bf       	out	0x3e, r29	; 62
    2cde:	df 91       	pop	r29
    2ce0:	cf 91       	pop	r28
    2ce2:	08 95       	ret

00002ce4 <sysclk_enable_module>:
    2ce4:	cf 93       	push	r28
    2ce6:	df 93       	push	r29
    2ce8:	1f 92       	push	r1
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
    2cee:	9f b7       	in	r25, 0x3f	; 63
    2cf0:	99 83       	std	Y+1, r25	; 0x01
    2cf2:	f8 94       	cli
    2cf4:	99 81       	ldd	r25, Y+1	; 0x01
    2cf6:	e8 2f       	mov	r30, r24
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	e0 59       	subi	r30, 0x90	; 144
    2cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfe:	60 95       	com	r22
    2d00:	80 81       	ld	r24, Z
    2d02:	68 23       	and	r22, r24
    2d04:	60 83       	st	Z, r22
    2d06:	9f bf       	out	0x3f, r25	; 63
    2d08:	0f 90       	pop	r0
    2d0a:	df 91       	pop	r29
    2d0c:	cf 91       	pop	r28
    2d0e:	08 95       	ret

00002d10 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    2d10:	cf 93       	push	r28
    2d12:	df 93       	push	r29
    2d14:	1f 92       	push	r1
    2d16:	1f 92       	push	r1
    2d18:	cd b7       	in	r28, 0x3d	; 61
    2d1a:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    2d1c:	86 30       	cpi	r24, 0x06	; 6
    2d1e:	11 f0       	breq	.+4      	; 0x2d24 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    2d20:	60 e0       	ldi	r22, 0x00	; 0
    2d22:	01 c0       	rjmp	.+2      	; 0x2d26 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    2d24:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2d26:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    2d2a:	81 fd       	sbrc	r24, 1
    2d2c:	2a c0       	rjmp	.+84     	; 0x2d82 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2d2e:	8f b7       	in	r24, 0x3f	; 63
    2d30:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    2d32:	f8 94       	cli
	return flags;
    2d34:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    2d36:	e0 e5       	ldi	r30, 0x50	; 80
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	80 81       	ld	r24, Z
    2d3c:	82 60       	ori	r24, 0x02	; 2
    2d3e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d40:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2d42:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2d44:	81 ff       	sbrs	r24, 1
    2d46:	fd cf       	rjmp	.-6      	; 0x2d42 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2d48:	8f b7       	in	r24, 0x3f	; 63
    2d4a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2d4c:	f8 94       	cli
	return flags;
    2d4e:	99 81       	ldd	r25, Y+1	; 0x01
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    2d50:	a0 e5       	ldi	r26, 0x50	; 80
    2d52:	b0 e0       	ldi	r27, 0x00	; 0
    2d54:	16 96       	adiw	r26, 0x06	; 6
    2d56:	8c 91       	ld	r24, X
    2d58:	16 97       	sbiw	r26, 0x06	; 6
    2d5a:	89 7f       	andi	r24, 0xF9	; 249
    2d5c:	16 96       	adiw	r26, 0x06	; 6
    2d5e:	8c 93       	st	X, r24
    2d60:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    2d62:	e0 e6       	ldi	r30, 0x60	; 96
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 e8       	ldi	r24, 0x80	; 128
    2d68:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    2d6a:	8b eb       	ldi	r24, 0xBB	; 187
    2d6c:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    2d6e:	16 96       	adiw	r26, 0x06	; 6
    2d70:	8c 91       	ld	r24, X
    2d72:	16 97       	sbiw	r26, 0x06	; 6
    2d74:	84 60       	ori	r24, 0x04	; 4
    2d76:	16 96       	adiw	r26, 0x06	; 6
    2d78:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    2d7a:	80 81       	ld	r24, Z
    2d7c:	81 60       	ori	r24, 0x01	; 1
    2d7e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d80:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    2d82:	63 60       	ori	r22, 0x03	; 3
    2d84:	84 e4       	ldi	r24, 0x44	; 68
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	12 d0       	rcall	.+36     	; 0x2dae <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    2d8a:	60 e4       	ldi	r22, 0x40	; 64
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	aa df       	rcall	.-172    	; 0x2ce4 <sysclk_enable_module>
}
    2d90:	0f 90       	pop	r0
    2d92:	0f 90       	pop	r0
    2d94:	df 91       	pop	r29
    2d96:	cf 91       	pop	r28
    2d98:	08 95       	ret

00002d9a <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    2d9a:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    2d9e:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    2da0:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    2da2:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    2da6:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    2da8:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    2dac:	08 95       	ret

00002dae <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2dae:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    2db0:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    2db2:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    2db4:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2db6:	60 83       	st	Z, r22
	ret                             // Return to caller
    2db8:	08 95       	ret

00002dba <__udivmodhi4>:
    2dba:	aa 1b       	sub	r26, r26
    2dbc:	bb 1b       	sub	r27, r27
    2dbe:	51 e1       	ldi	r21, 0x11	; 17
    2dc0:	07 c0       	rjmp	.+14     	; 0x2dd0 <__udivmodhi4_ep>

00002dc2 <__udivmodhi4_loop>:
    2dc2:	aa 1f       	adc	r26, r26
    2dc4:	bb 1f       	adc	r27, r27
    2dc6:	a6 17       	cp	r26, r22
    2dc8:	b7 07       	cpc	r27, r23
    2dca:	10 f0       	brcs	.+4      	; 0x2dd0 <__udivmodhi4_ep>
    2dcc:	a6 1b       	sub	r26, r22
    2dce:	b7 0b       	sbc	r27, r23

00002dd0 <__udivmodhi4_ep>:
    2dd0:	88 1f       	adc	r24, r24
    2dd2:	99 1f       	adc	r25, r25
    2dd4:	5a 95       	dec	r21
    2dd6:	a9 f7       	brne	.-22     	; 0x2dc2 <__udivmodhi4_loop>
    2dd8:	80 95       	com	r24
    2dda:	90 95       	com	r25
    2ddc:	bc 01       	movw	r22, r24
    2dde:	cd 01       	movw	r24, r26
    2de0:	08 95       	ret

00002de2 <__tablejump2__>:
    2de2:	ee 0f       	add	r30, r30
    2de4:	ff 1f       	adc	r31, r31
    2de6:	88 1f       	adc	r24, r24
    2de8:	8b bf       	out	0x3b, r24	; 59
    2dea:	07 90       	elpm	r0, Z+
    2dec:	f6 91       	elpm	r31, Z
    2dee:	e0 2d       	mov	r30, r0
    2df0:	1b be       	out	0x3b, r1	; 59
    2df2:	19 94       	eijmp

00002df4 <memcpy>:
    2df4:	fb 01       	movw	r30, r22
    2df6:	dc 01       	movw	r26, r24
    2df8:	02 c0       	rjmp	.+4      	; 0x2dfe <memcpy+0xa>
    2dfa:	01 90       	ld	r0, Z+
    2dfc:	0d 92       	st	X+, r0
    2dfe:	41 50       	subi	r20, 0x01	; 1
    2e00:	50 40       	sbci	r21, 0x00	; 0
    2e02:	d8 f7       	brcc	.-10     	; 0x2dfa <memcpy+0x6>
    2e04:	08 95       	ret

00002e06 <printf>:
    2e06:	cf 93       	push	r28
    2e08:	df 93       	push	r29
    2e0a:	cd b7       	in	r28, 0x3d	; 61
    2e0c:	de b7       	in	r29, 0x3e	; 62
    2e0e:	ae 01       	movw	r20, r28
    2e10:	4a 5f       	subi	r20, 0xFA	; 250
    2e12:	5f 4f       	sbci	r21, 0xFF	; 255
    2e14:	fa 01       	movw	r30, r20
    2e16:	61 91       	ld	r22, Z+
    2e18:	71 91       	ld	r23, Z+
    2e1a:	af 01       	movw	r20, r30
    2e1c:	80 91 ae 24 	lds	r24, 0x24AE	; 0x8024ae <__iob+0x2>
    2e20:	90 91 af 24 	lds	r25, 0x24AF	; 0x8024af <__iob+0x3>
    2e24:	38 d0       	rcall	.+112    	; 0x2e96 <vfprintf>
    2e26:	df 91       	pop	r29
    2e28:	cf 91       	pop	r28
    2e2a:	08 95       	ret

00002e2c <putchar>:
    2e2c:	60 91 ae 24 	lds	r22, 0x24AE	; 0x8024ae <__iob+0x2>
    2e30:	70 91 af 24 	lds	r23, 0x24AF	; 0x8024af <__iob+0x3>
    2e34:	2e c2       	rjmp	.+1116   	; 0x3292 <fputc>

00002e36 <puts>:
    2e36:	0f 93       	push	r16
    2e38:	1f 93       	push	r17
    2e3a:	cf 93       	push	r28
    2e3c:	df 93       	push	r29
    2e3e:	e0 91 ae 24 	lds	r30, 0x24AE	; 0x8024ae <__iob+0x2>
    2e42:	f0 91 af 24 	lds	r31, 0x24AF	; 0x8024af <__iob+0x3>
    2e46:	23 81       	ldd	r18, Z+3	; 0x03
    2e48:	21 ff       	sbrs	r18, 1
    2e4a:	1b c0       	rjmp	.+54     	; 0x2e82 <puts+0x4c>
    2e4c:	8c 01       	movw	r16, r24
    2e4e:	d0 e0       	ldi	r29, 0x00	; 0
    2e50:	c0 e0       	ldi	r28, 0x00	; 0
    2e52:	f8 01       	movw	r30, r16
    2e54:	81 91       	ld	r24, Z+
    2e56:	8f 01       	movw	r16, r30
    2e58:	60 91 ae 24 	lds	r22, 0x24AE	; 0x8024ae <__iob+0x2>
    2e5c:	70 91 af 24 	lds	r23, 0x24AF	; 0x8024af <__iob+0x3>
    2e60:	db 01       	movw	r26, r22
    2e62:	18 96       	adiw	r26, 0x08	; 8
    2e64:	ed 91       	ld	r30, X+
    2e66:	fc 91       	ld	r31, X
    2e68:	19 97       	sbiw	r26, 0x09	; 9
    2e6a:	88 23       	and	r24, r24
    2e6c:	31 f0       	breq	.+12     	; 0x2e7a <puts+0x44>
    2e6e:	19 95       	eicall
    2e70:	89 2b       	or	r24, r25
    2e72:	79 f3       	breq	.-34     	; 0x2e52 <puts+0x1c>
    2e74:	df ef       	ldi	r29, 0xFF	; 255
    2e76:	cf ef       	ldi	r28, 0xFF	; 255
    2e78:	ec cf       	rjmp	.-40     	; 0x2e52 <puts+0x1c>
    2e7a:	8a e0       	ldi	r24, 0x0A	; 10
    2e7c:	19 95       	eicall
    2e7e:	89 2b       	or	r24, r25
    2e80:	19 f0       	breq	.+6      	; 0x2e88 <puts+0x52>
    2e82:	8f ef       	ldi	r24, 0xFF	; 255
    2e84:	9f ef       	ldi	r25, 0xFF	; 255
    2e86:	02 c0       	rjmp	.+4      	; 0x2e8c <puts+0x56>
    2e88:	8d 2f       	mov	r24, r29
    2e8a:	9c 2f       	mov	r25, r28
    2e8c:	df 91       	pop	r29
    2e8e:	cf 91       	pop	r28
    2e90:	1f 91       	pop	r17
    2e92:	0f 91       	pop	r16
    2e94:	08 95       	ret

00002e96 <vfprintf>:
    2e96:	2f 92       	push	r2
    2e98:	3f 92       	push	r3
    2e9a:	4f 92       	push	r4
    2e9c:	5f 92       	push	r5
    2e9e:	6f 92       	push	r6
    2ea0:	7f 92       	push	r7
    2ea2:	8f 92       	push	r8
    2ea4:	9f 92       	push	r9
    2ea6:	af 92       	push	r10
    2ea8:	bf 92       	push	r11
    2eaa:	cf 92       	push	r12
    2eac:	df 92       	push	r13
    2eae:	ef 92       	push	r14
    2eb0:	ff 92       	push	r15
    2eb2:	0f 93       	push	r16
    2eb4:	1f 93       	push	r17
    2eb6:	cf 93       	push	r28
    2eb8:	df 93       	push	r29
    2eba:	cd b7       	in	r28, 0x3d	; 61
    2ebc:	de b7       	in	r29, 0x3e	; 62
    2ebe:	2c 97       	sbiw	r28, 0x0c	; 12
    2ec0:	cd bf       	out	0x3d, r28	; 61
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	7c 01       	movw	r14, r24
    2ec6:	6b 01       	movw	r12, r22
    2ec8:	8a 01       	movw	r16, r20
    2eca:	fc 01       	movw	r30, r24
    2ecc:	16 82       	std	Z+6, r1	; 0x06
    2ece:	17 82       	std	Z+7, r1	; 0x07
    2ed0:	83 81       	ldd	r24, Z+3	; 0x03
    2ed2:	81 ff       	sbrs	r24, 1
    2ed4:	b0 c1       	rjmp	.+864    	; 0x3236 <vfprintf+0x3a0>
    2ed6:	ce 01       	movw	r24, r28
    2ed8:	01 96       	adiw	r24, 0x01	; 1
    2eda:	4c 01       	movw	r8, r24
    2edc:	f7 01       	movw	r30, r14
    2ede:	93 81       	ldd	r25, Z+3	; 0x03
    2ee0:	f6 01       	movw	r30, r12
    2ee2:	93 fd       	sbrc	r25, 3
    2ee4:	85 91       	lpm	r24, Z+
    2ee6:	93 ff       	sbrs	r25, 3
    2ee8:	81 91       	ld	r24, Z+
    2eea:	6f 01       	movw	r12, r30
    2eec:	88 23       	and	r24, r24
    2eee:	09 f4       	brne	.+2      	; 0x2ef2 <vfprintf+0x5c>
    2ef0:	9e c1       	rjmp	.+828    	; 0x322e <vfprintf+0x398>
    2ef2:	85 32       	cpi	r24, 0x25	; 37
    2ef4:	39 f4       	brne	.+14     	; 0x2f04 <vfprintf+0x6e>
    2ef6:	93 fd       	sbrc	r25, 3
    2ef8:	85 91       	lpm	r24, Z+
    2efa:	93 ff       	sbrs	r25, 3
    2efc:	81 91       	ld	r24, Z+
    2efe:	6f 01       	movw	r12, r30
    2f00:	85 32       	cpi	r24, 0x25	; 37
    2f02:	21 f4       	brne	.+8      	; 0x2f0c <vfprintf+0x76>
    2f04:	b7 01       	movw	r22, r14
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	c4 d1       	rcall	.+904    	; 0x3292 <fputc>
    2f0a:	e8 cf       	rjmp	.-48     	; 0x2edc <vfprintf+0x46>
    2f0c:	51 2c       	mov	r5, r1
    2f0e:	31 2c       	mov	r3, r1
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	20 32       	cpi	r18, 0x20	; 32
    2f14:	a0 f4       	brcc	.+40     	; 0x2f3e <vfprintf+0xa8>
    2f16:	8b 32       	cpi	r24, 0x2B	; 43
    2f18:	69 f0       	breq	.+26     	; 0x2f34 <vfprintf+0x9e>
    2f1a:	30 f4       	brcc	.+12     	; 0x2f28 <vfprintf+0x92>
    2f1c:	80 32       	cpi	r24, 0x20	; 32
    2f1e:	59 f0       	breq	.+22     	; 0x2f36 <vfprintf+0xa0>
    2f20:	83 32       	cpi	r24, 0x23	; 35
    2f22:	69 f4       	brne	.+26     	; 0x2f3e <vfprintf+0xa8>
    2f24:	20 61       	ori	r18, 0x10	; 16
    2f26:	2c c0       	rjmp	.+88     	; 0x2f80 <vfprintf+0xea>
    2f28:	8d 32       	cpi	r24, 0x2D	; 45
    2f2a:	39 f0       	breq	.+14     	; 0x2f3a <vfprintf+0xa4>
    2f2c:	80 33       	cpi	r24, 0x30	; 48
    2f2e:	39 f4       	brne	.+14     	; 0x2f3e <vfprintf+0xa8>
    2f30:	21 60       	ori	r18, 0x01	; 1
    2f32:	26 c0       	rjmp	.+76     	; 0x2f80 <vfprintf+0xea>
    2f34:	22 60       	ori	r18, 0x02	; 2
    2f36:	24 60       	ori	r18, 0x04	; 4
    2f38:	23 c0       	rjmp	.+70     	; 0x2f80 <vfprintf+0xea>
    2f3a:	28 60       	ori	r18, 0x08	; 8
    2f3c:	21 c0       	rjmp	.+66     	; 0x2f80 <vfprintf+0xea>
    2f3e:	27 fd       	sbrc	r18, 7
    2f40:	27 c0       	rjmp	.+78     	; 0x2f90 <vfprintf+0xfa>
    2f42:	30 ed       	ldi	r19, 0xD0	; 208
    2f44:	38 0f       	add	r19, r24
    2f46:	3a 30       	cpi	r19, 0x0A	; 10
    2f48:	78 f4       	brcc	.+30     	; 0x2f68 <vfprintf+0xd2>
    2f4a:	26 ff       	sbrs	r18, 6
    2f4c:	06 c0       	rjmp	.+12     	; 0x2f5a <vfprintf+0xc4>
    2f4e:	fa e0       	ldi	r31, 0x0A	; 10
    2f50:	5f 9e       	mul	r5, r31
    2f52:	30 0d       	add	r19, r0
    2f54:	11 24       	eor	r1, r1
    2f56:	53 2e       	mov	r5, r19
    2f58:	13 c0       	rjmp	.+38     	; 0x2f80 <vfprintf+0xea>
    2f5a:	8a e0       	ldi	r24, 0x0A	; 10
    2f5c:	38 9e       	mul	r3, r24
    2f5e:	30 0d       	add	r19, r0
    2f60:	11 24       	eor	r1, r1
    2f62:	33 2e       	mov	r3, r19
    2f64:	20 62       	ori	r18, 0x20	; 32
    2f66:	0c c0       	rjmp	.+24     	; 0x2f80 <vfprintf+0xea>
    2f68:	8e 32       	cpi	r24, 0x2E	; 46
    2f6a:	21 f4       	brne	.+8      	; 0x2f74 <vfprintf+0xde>
    2f6c:	26 fd       	sbrc	r18, 6
    2f6e:	5f c1       	rjmp	.+702    	; 0x322e <vfprintf+0x398>
    2f70:	20 64       	ori	r18, 0x40	; 64
    2f72:	06 c0       	rjmp	.+12     	; 0x2f80 <vfprintf+0xea>
    2f74:	8c 36       	cpi	r24, 0x6C	; 108
    2f76:	11 f4       	brne	.+4      	; 0x2f7c <vfprintf+0xe6>
    2f78:	20 68       	ori	r18, 0x80	; 128
    2f7a:	02 c0       	rjmp	.+4      	; 0x2f80 <vfprintf+0xea>
    2f7c:	88 36       	cpi	r24, 0x68	; 104
    2f7e:	41 f4       	brne	.+16     	; 0x2f90 <vfprintf+0xfa>
    2f80:	f6 01       	movw	r30, r12
    2f82:	93 fd       	sbrc	r25, 3
    2f84:	85 91       	lpm	r24, Z+
    2f86:	93 ff       	sbrs	r25, 3
    2f88:	81 91       	ld	r24, Z+
    2f8a:	6f 01       	movw	r12, r30
    2f8c:	81 11       	cpse	r24, r1
    2f8e:	c1 cf       	rjmp	.-126    	; 0x2f12 <vfprintf+0x7c>
    2f90:	98 2f       	mov	r25, r24
    2f92:	9f 7d       	andi	r25, 0xDF	; 223
    2f94:	95 54       	subi	r25, 0x45	; 69
    2f96:	93 30       	cpi	r25, 0x03	; 3
    2f98:	28 f4       	brcc	.+10     	; 0x2fa4 <vfprintf+0x10e>
    2f9a:	0c 5f       	subi	r16, 0xFC	; 252
    2f9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f9e:	ff e3       	ldi	r31, 0x3F	; 63
    2fa0:	f9 83       	std	Y+1, r31	; 0x01
    2fa2:	0d c0       	rjmp	.+26     	; 0x2fbe <vfprintf+0x128>
    2fa4:	83 36       	cpi	r24, 0x63	; 99
    2fa6:	31 f0       	breq	.+12     	; 0x2fb4 <vfprintf+0x11e>
    2fa8:	83 37       	cpi	r24, 0x73	; 115
    2faa:	71 f0       	breq	.+28     	; 0x2fc8 <vfprintf+0x132>
    2fac:	83 35       	cpi	r24, 0x53	; 83
    2fae:	09 f0       	breq	.+2      	; 0x2fb2 <vfprintf+0x11c>
    2fb0:	57 c0       	rjmp	.+174    	; 0x3060 <vfprintf+0x1ca>
    2fb2:	21 c0       	rjmp	.+66     	; 0x2ff6 <vfprintf+0x160>
    2fb4:	f8 01       	movw	r30, r16
    2fb6:	80 81       	ld	r24, Z
    2fb8:	89 83       	std	Y+1, r24	; 0x01
    2fba:	0e 5f       	subi	r16, 0xFE	; 254
    2fbc:	1f 4f       	sbci	r17, 0xFF	; 255
    2fbe:	44 24       	eor	r4, r4
    2fc0:	43 94       	inc	r4
    2fc2:	51 2c       	mov	r5, r1
    2fc4:	54 01       	movw	r10, r8
    2fc6:	14 c0       	rjmp	.+40     	; 0x2ff0 <vfprintf+0x15a>
    2fc8:	38 01       	movw	r6, r16
    2fca:	f2 e0       	ldi	r31, 0x02	; 2
    2fcc:	6f 0e       	add	r6, r31
    2fce:	71 1c       	adc	r7, r1
    2fd0:	f8 01       	movw	r30, r16
    2fd2:	a0 80       	ld	r10, Z
    2fd4:	b1 80       	ldd	r11, Z+1	; 0x01
    2fd6:	26 ff       	sbrs	r18, 6
    2fd8:	03 c0       	rjmp	.+6      	; 0x2fe0 <vfprintf+0x14a>
    2fda:	65 2d       	mov	r22, r5
    2fdc:	70 e0       	ldi	r23, 0x00	; 0
    2fde:	02 c0       	rjmp	.+4      	; 0x2fe4 <vfprintf+0x14e>
    2fe0:	6f ef       	ldi	r22, 0xFF	; 255
    2fe2:	7f ef       	ldi	r23, 0xFF	; 255
    2fe4:	c5 01       	movw	r24, r10
    2fe6:	2c 87       	std	Y+12, r18	; 0x0c
    2fe8:	49 d1       	rcall	.+658    	; 0x327c <strnlen>
    2fea:	2c 01       	movw	r4, r24
    2fec:	83 01       	movw	r16, r6
    2fee:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ff0:	2f 77       	andi	r18, 0x7F	; 127
    2ff2:	22 2e       	mov	r2, r18
    2ff4:	16 c0       	rjmp	.+44     	; 0x3022 <vfprintf+0x18c>
    2ff6:	38 01       	movw	r6, r16
    2ff8:	f2 e0       	ldi	r31, 0x02	; 2
    2ffa:	6f 0e       	add	r6, r31
    2ffc:	71 1c       	adc	r7, r1
    2ffe:	f8 01       	movw	r30, r16
    3000:	a0 80       	ld	r10, Z
    3002:	b1 80       	ldd	r11, Z+1	; 0x01
    3004:	26 ff       	sbrs	r18, 6
    3006:	03 c0       	rjmp	.+6      	; 0x300e <vfprintf+0x178>
    3008:	65 2d       	mov	r22, r5
    300a:	70 e0       	ldi	r23, 0x00	; 0
    300c:	02 c0       	rjmp	.+4      	; 0x3012 <vfprintf+0x17c>
    300e:	6f ef       	ldi	r22, 0xFF	; 255
    3010:	7f ef       	ldi	r23, 0xFF	; 255
    3012:	c5 01       	movw	r24, r10
    3014:	2c 87       	std	Y+12, r18	; 0x0c
    3016:	27 d1       	rcall	.+590    	; 0x3266 <strnlen_P>
    3018:	2c 01       	movw	r4, r24
    301a:	2c 85       	ldd	r18, Y+12	; 0x0c
    301c:	20 68       	ori	r18, 0x80	; 128
    301e:	22 2e       	mov	r2, r18
    3020:	83 01       	movw	r16, r6
    3022:	23 fc       	sbrc	r2, 3
    3024:	19 c0       	rjmp	.+50     	; 0x3058 <vfprintf+0x1c2>
    3026:	83 2d       	mov	r24, r3
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	48 16       	cp	r4, r24
    302c:	59 06       	cpc	r5, r25
    302e:	a0 f4       	brcc	.+40     	; 0x3058 <vfprintf+0x1c2>
    3030:	b7 01       	movw	r22, r14
    3032:	80 e2       	ldi	r24, 0x20	; 32
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	2d d1       	rcall	.+602    	; 0x3292 <fputc>
    3038:	3a 94       	dec	r3
    303a:	f5 cf       	rjmp	.-22     	; 0x3026 <vfprintf+0x190>
    303c:	f5 01       	movw	r30, r10
    303e:	27 fc       	sbrc	r2, 7
    3040:	85 91       	lpm	r24, Z+
    3042:	27 fe       	sbrs	r2, 7
    3044:	81 91       	ld	r24, Z+
    3046:	5f 01       	movw	r10, r30
    3048:	b7 01       	movw	r22, r14
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	22 d1       	rcall	.+580    	; 0x3292 <fputc>
    304e:	31 10       	cpse	r3, r1
    3050:	3a 94       	dec	r3
    3052:	f1 e0       	ldi	r31, 0x01	; 1
    3054:	4f 1a       	sub	r4, r31
    3056:	51 08       	sbc	r5, r1
    3058:	41 14       	cp	r4, r1
    305a:	51 04       	cpc	r5, r1
    305c:	79 f7       	brne	.-34     	; 0x303c <vfprintf+0x1a6>
    305e:	de c0       	rjmp	.+444    	; 0x321c <vfprintf+0x386>
    3060:	84 36       	cpi	r24, 0x64	; 100
    3062:	11 f0       	breq	.+4      	; 0x3068 <vfprintf+0x1d2>
    3064:	89 36       	cpi	r24, 0x69	; 105
    3066:	31 f5       	brne	.+76     	; 0x30b4 <vfprintf+0x21e>
    3068:	f8 01       	movw	r30, r16
    306a:	27 ff       	sbrs	r18, 7
    306c:	07 c0       	rjmp	.+14     	; 0x307c <vfprintf+0x1e6>
    306e:	60 81       	ld	r22, Z
    3070:	71 81       	ldd	r23, Z+1	; 0x01
    3072:	82 81       	ldd	r24, Z+2	; 0x02
    3074:	93 81       	ldd	r25, Z+3	; 0x03
    3076:	0c 5f       	subi	r16, 0xFC	; 252
    3078:	1f 4f       	sbci	r17, 0xFF	; 255
    307a:	08 c0       	rjmp	.+16     	; 0x308c <vfprintf+0x1f6>
    307c:	60 81       	ld	r22, Z
    307e:	71 81       	ldd	r23, Z+1	; 0x01
    3080:	07 2e       	mov	r0, r23
    3082:	00 0c       	add	r0, r0
    3084:	88 0b       	sbc	r24, r24
    3086:	99 0b       	sbc	r25, r25
    3088:	0e 5f       	subi	r16, 0xFE	; 254
    308a:	1f 4f       	sbci	r17, 0xFF	; 255
    308c:	2f 76       	andi	r18, 0x6F	; 111
    308e:	72 2e       	mov	r7, r18
    3090:	97 ff       	sbrs	r25, 7
    3092:	09 c0       	rjmp	.+18     	; 0x30a6 <vfprintf+0x210>
    3094:	90 95       	com	r25
    3096:	80 95       	com	r24
    3098:	70 95       	com	r23
    309a:	61 95       	neg	r22
    309c:	7f 4f       	sbci	r23, 0xFF	; 255
    309e:	8f 4f       	sbci	r24, 0xFF	; 255
    30a0:	9f 4f       	sbci	r25, 0xFF	; 255
    30a2:	20 68       	ori	r18, 0x80	; 128
    30a4:	72 2e       	mov	r7, r18
    30a6:	2a e0       	ldi	r18, 0x0A	; 10
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	a4 01       	movw	r20, r8
    30ac:	2a d1       	rcall	.+596    	; 0x3302 <__ultoa_invert>
    30ae:	a8 2e       	mov	r10, r24
    30b0:	a8 18       	sub	r10, r8
    30b2:	43 c0       	rjmp	.+134    	; 0x313a <vfprintf+0x2a4>
    30b4:	85 37       	cpi	r24, 0x75	; 117
    30b6:	29 f4       	brne	.+10     	; 0x30c2 <vfprintf+0x22c>
    30b8:	2f 7e       	andi	r18, 0xEF	; 239
    30ba:	b2 2e       	mov	r11, r18
    30bc:	2a e0       	ldi	r18, 0x0A	; 10
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	25 c0       	rjmp	.+74     	; 0x310c <vfprintf+0x276>
    30c2:	f2 2f       	mov	r31, r18
    30c4:	f9 7f       	andi	r31, 0xF9	; 249
    30c6:	bf 2e       	mov	r11, r31
    30c8:	8f 36       	cpi	r24, 0x6F	; 111
    30ca:	c1 f0       	breq	.+48     	; 0x30fc <vfprintf+0x266>
    30cc:	18 f4       	brcc	.+6      	; 0x30d4 <vfprintf+0x23e>
    30ce:	88 35       	cpi	r24, 0x58	; 88
    30d0:	79 f0       	breq	.+30     	; 0x30f0 <vfprintf+0x25a>
    30d2:	ad c0       	rjmp	.+346    	; 0x322e <vfprintf+0x398>
    30d4:	80 37       	cpi	r24, 0x70	; 112
    30d6:	19 f0       	breq	.+6      	; 0x30de <vfprintf+0x248>
    30d8:	88 37       	cpi	r24, 0x78	; 120
    30da:	21 f0       	breq	.+8      	; 0x30e4 <vfprintf+0x24e>
    30dc:	a8 c0       	rjmp	.+336    	; 0x322e <vfprintf+0x398>
    30de:	2f 2f       	mov	r18, r31
    30e0:	20 61       	ori	r18, 0x10	; 16
    30e2:	b2 2e       	mov	r11, r18
    30e4:	b4 fe       	sbrs	r11, 4
    30e6:	0d c0       	rjmp	.+26     	; 0x3102 <vfprintf+0x26c>
    30e8:	8b 2d       	mov	r24, r11
    30ea:	84 60       	ori	r24, 0x04	; 4
    30ec:	b8 2e       	mov	r11, r24
    30ee:	09 c0       	rjmp	.+18     	; 0x3102 <vfprintf+0x26c>
    30f0:	24 ff       	sbrs	r18, 4
    30f2:	0a c0       	rjmp	.+20     	; 0x3108 <vfprintf+0x272>
    30f4:	9f 2f       	mov	r25, r31
    30f6:	96 60       	ori	r25, 0x06	; 6
    30f8:	b9 2e       	mov	r11, r25
    30fa:	06 c0       	rjmp	.+12     	; 0x3108 <vfprintf+0x272>
    30fc:	28 e0       	ldi	r18, 0x08	; 8
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	05 c0       	rjmp	.+10     	; 0x310c <vfprintf+0x276>
    3102:	20 e1       	ldi	r18, 0x10	; 16
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	02 c0       	rjmp	.+4      	; 0x310c <vfprintf+0x276>
    3108:	20 e1       	ldi	r18, 0x10	; 16
    310a:	32 e0       	ldi	r19, 0x02	; 2
    310c:	f8 01       	movw	r30, r16
    310e:	b7 fe       	sbrs	r11, 7
    3110:	07 c0       	rjmp	.+14     	; 0x3120 <vfprintf+0x28a>
    3112:	60 81       	ld	r22, Z
    3114:	71 81       	ldd	r23, Z+1	; 0x01
    3116:	82 81       	ldd	r24, Z+2	; 0x02
    3118:	93 81       	ldd	r25, Z+3	; 0x03
    311a:	0c 5f       	subi	r16, 0xFC	; 252
    311c:	1f 4f       	sbci	r17, 0xFF	; 255
    311e:	06 c0       	rjmp	.+12     	; 0x312c <vfprintf+0x296>
    3120:	60 81       	ld	r22, Z
    3122:	71 81       	ldd	r23, Z+1	; 0x01
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	0e 5f       	subi	r16, 0xFE	; 254
    312a:	1f 4f       	sbci	r17, 0xFF	; 255
    312c:	a4 01       	movw	r20, r8
    312e:	e9 d0       	rcall	.+466    	; 0x3302 <__ultoa_invert>
    3130:	a8 2e       	mov	r10, r24
    3132:	a8 18       	sub	r10, r8
    3134:	fb 2d       	mov	r31, r11
    3136:	ff 77       	andi	r31, 0x7F	; 127
    3138:	7f 2e       	mov	r7, r31
    313a:	76 fe       	sbrs	r7, 6
    313c:	0b c0       	rjmp	.+22     	; 0x3154 <vfprintf+0x2be>
    313e:	37 2d       	mov	r19, r7
    3140:	3e 7f       	andi	r19, 0xFE	; 254
    3142:	a5 14       	cp	r10, r5
    3144:	50 f4       	brcc	.+20     	; 0x315a <vfprintf+0x2c4>
    3146:	74 fe       	sbrs	r7, 4
    3148:	0a c0       	rjmp	.+20     	; 0x315e <vfprintf+0x2c8>
    314a:	72 fc       	sbrc	r7, 2
    314c:	08 c0       	rjmp	.+16     	; 0x315e <vfprintf+0x2c8>
    314e:	37 2d       	mov	r19, r7
    3150:	3e 7e       	andi	r19, 0xEE	; 238
    3152:	05 c0       	rjmp	.+10     	; 0x315e <vfprintf+0x2c8>
    3154:	ba 2c       	mov	r11, r10
    3156:	37 2d       	mov	r19, r7
    3158:	03 c0       	rjmp	.+6      	; 0x3160 <vfprintf+0x2ca>
    315a:	ba 2c       	mov	r11, r10
    315c:	01 c0       	rjmp	.+2      	; 0x3160 <vfprintf+0x2ca>
    315e:	b5 2c       	mov	r11, r5
    3160:	34 ff       	sbrs	r19, 4
    3162:	0d c0       	rjmp	.+26     	; 0x317e <vfprintf+0x2e8>
    3164:	fe 01       	movw	r30, r28
    3166:	ea 0d       	add	r30, r10
    3168:	f1 1d       	adc	r31, r1
    316a:	80 81       	ld	r24, Z
    316c:	80 33       	cpi	r24, 0x30	; 48
    316e:	11 f4       	brne	.+4      	; 0x3174 <vfprintf+0x2de>
    3170:	39 7e       	andi	r19, 0xE9	; 233
    3172:	09 c0       	rjmp	.+18     	; 0x3186 <vfprintf+0x2f0>
    3174:	32 ff       	sbrs	r19, 2
    3176:	06 c0       	rjmp	.+12     	; 0x3184 <vfprintf+0x2ee>
    3178:	b3 94       	inc	r11
    317a:	b3 94       	inc	r11
    317c:	04 c0       	rjmp	.+8      	; 0x3186 <vfprintf+0x2f0>
    317e:	83 2f       	mov	r24, r19
    3180:	86 78       	andi	r24, 0x86	; 134
    3182:	09 f0       	breq	.+2      	; 0x3186 <vfprintf+0x2f0>
    3184:	b3 94       	inc	r11
    3186:	33 fd       	sbrc	r19, 3
    3188:	12 c0       	rjmp	.+36     	; 0x31ae <vfprintf+0x318>
    318a:	30 ff       	sbrs	r19, 0
    318c:	06 c0       	rjmp	.+12     	; 0x319a <vfprintf+0x304>
    318e:	5a 2c       	mov	r5, r10
    3190:	b3 14       	cp	r11, r3
    3192:	18 f4       	brcc	.+6      	; 0x319a <vfprintf+0x304>
    3194:	53 0c       	add	r5, r3
    3196:	5b 18       	sub	r5, r11
    3198:	b3 2c       	mov	r11, r3
    319a:	b3 14       	cp	r11, r3
    319c:	60 f4       	brcc	.+24     	; 0x31b6 <vfprintf+0x320>
    319e:	b7 01       	movw	r22, r14
    31a0:	80 e2       	ldi	r24, 0x20	; 32
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	3c 87       	std	Y+12, r19	; 0x0c
    31a6:	75 d0       	rcall	.+234    	; 0x3292 <fputc>
    31a8:	b3 94       	inc	r11
    31aa:	3c 85       	ldd	r19, Y+12	; 0x0c
    31ac:	f6 cf       	rjmp	.-20     	; 0x319a <vfprintf+0x304>
    31ae:	b3 14       	cp	r11, r3
    31b0:	10 f4       	brcc	.+4      	; 0x31b6 <vfprintf+0x320>
    31b2:	3b 18       	sub	r3, r11
    31b4:	01 c0       	rjmp	.+2      	; 0x31b8 <vfprintf+0x322>
    31b6:	31 2c       	mov	r3, r1
    31b8:	34 ff       	sbrs	r19, 4
    31ba:	11 c0       	rjmp	.+34     	; 0x31de <vfprintf+0x348>
    31bc:	b7 01       	movw	r22, r14
    31be:	80 e3       	ldi	r24, 0x30	; 48
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	3c 87       	std	Y+12, r19	; 0x0c
    31c4:	66 d0       	rcall	.+204    	; 0x3292 <fputc>
    31c6:	3c 85       	ldd	r19, Y+12	; 0x0c
    31c8:	32 ff       	sbrs	r19, 2
    31ca:	16 c0       	rjmp	.+44     	; 0x31f8 <vfprintf+0x362>
    31cc:	31 fd       	sbrc	r19, 1
    31ce:	03 c0       	rjmp	.+6      	; 0x31d6 <vfprintf+0x340>
    31d0:	88 e7       	ldi	r24, 0x78	; 120
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	02 c0       	rjmp	.+4      	; 0x31da <vfprintf+0x344>
    31d6:	88 e5       	ldi	r24, 0x58	; 88
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	b7 01       	movw	r22, r14
    31dc:	0c c0       	rjmp	.+24     	; 0x31f6 <vfprintf+0x360>
    31de:	83 2f       	mov	r24, r19
    31e0:	86 78       	andi	r24, 0x86	; 134
    31e2:	51 f0       	breq	.+20     	; 0x31f8 <vfprintf+0x362>
    31e4:	31 ff       	sbrs	r19, 1
    31e6:	02 c0       	rjmp	.+4      	; 0x31ec <vfprintf+0x356>
    31e8:	8b e2       	ldi	r24, 0x2B	; 43
    31ea:	01 c0       	rjmp	.+2      	; 0x31ee <vfprintf+0x358>
    31ec:	80 e2       	ldi	r24, 0x20	; 32
    31ee:	37 fd       	sbrc	r19, 7
    31f0:	8d e2       	ldi	r24, 0x2D	; 45
    31f2:	b7 01       	movw	r22, r14
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	4d d0       	rcall	.+154    	; 0x3292 <fputc>
    31f8:	a5 14       	cp	r10, r5
    31fa:	30 f4       	brcc	.+12     	; 0x3208 <vfprintf+0x372>
    31fc:	b7 01       	movw	r22, r14
    31fe:	80 e3       	ldi	r24, 0x30	; 48
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	47 d0       	rcall	.+142    	; 0x3292 <fputc>
    3204:	5a 94       	dec	r5
    3206:	f8 cf       	rjmp	.-16     	; 0x31f8 <vfprintf+0x362>
    3208:	aa 94       	dec	r10
    320a:	f4 01       	movw	r30, r8
    320c:	ea 0d       	add	r30, r10
    320e:	f1 1d       	adc	r31, r1
    3210:	80 81       	ld	r24, Z
    3212:	b7 01       	movw	r22, r14
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	3d d0       	rcall	.+122    	; 0x3292 <fputc>
    3218:	a1 10       	cpse	r10, r1
    321a:	f6 cf       	rjmp	.-20     	; 0x3208 <vfprintf+0x372>
    321c:	33 20       	and	r3, r3
    321e:	09 f4       	brne	.+2      	; 0x3222 <vfprintf+0x38c>
    3220:	5d ce       	rjmp	.-838    	; 0x2edc <vfprintf+0x46>
    3222:	b7 01       	movw	r22, r14
    3224:	80 e2       	ldi	r24, 0x20	; 32
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	34 d0       	rcall	.+104    	; 0x3292 <fputc>
    322a:	3a 94       	dec	r3
    322c:	f7 cf       	rjmp	.-18     	; 0x321c <vfprintf+0x386>
    322e:	f7 01       	movw	r30, r14
    3230:	86 81       	ldd	r24, Z+6	; 0x06
    3232:	97 81       	ldd	r25, Z+7	; 0x07
    3234:	02 c0       	rjmp	.+4      	; 0x323a <vfprintf+0x3a4>
    3236:	8f ef       	ldi	r24, 0xFF	; 255
    3238:	9f ef       	ldi	r25, 0xFF	; 255
    323a:	2c 96       	adiw	r28, 0x0c	; 12
    323c:	cd bf       	out	0x3d, r28	; 61
    323e:	de bf       	out	0x3e, r29	; 62
    3240:	df 91       	pop	r29
    3242:	cf 91       	pop	r28
    3244:	1f 91       	pop	r17
    3246:	0f 91       	pop	r16
    3248:	ff 90       	pop	r15
    324a:	ef 90       	pop	r14
    324c:	df 90       	pop	r13
    324e:	cf 90       	pop	r12
    3250:	bf 90       	pop	r11
    3252:	af 90       	pop	r10
    3254:	9f 90       	pop	r9
    3256:	8f 90       	pop	r8
    3258:	7f 90       	pop	r7
    325a:	6f 90       	pop	r6
    325c:	5f 90       	pop	r5
    325e:	4f 90       	pop	r4
    3260:	3f 90       	pop	r3
    3262:	2f 90       	pop	r2
    3264:	08 95       	ret

00003266 <strnlen_P>:
    3266:	fc 01       	movw	r30, r24
    3268:	05 90       	lpm	r0, Z+
    326a:	61 50       	subi	r22, 0x01	; 1
    326c:	70 40       	sbci	r23, 0x00	; 0
    326e:	01 10       	cpse	r0, r1
    3270:	d8 f7       	brcc	.-10     	; 0x3268 <strnlen_P+0x2>
    3272:	80 95       	com	r24
    3274:	90 95       	com	r25
    3276:	8e 0f       	add	r24, r30
    3278:	9f 1f       	adc	r25, r31
    327a:	08 95       	ret

0000327c <strnlen>:
    327c:	fc 01       	movw	r30, r24
    327e:	61 50       	subi	r22, 0x01	; 1
    3280:	70 40       	sbci	r23, 0x00	; 0
    3282:	01 90       	ld	r0, Z+
    3284:	01 10       	cpse	r0, r1
    3286:	d8 f7       	brcc	.-10     	; 0x327e <strnlen+0x2>
    3288:	80 95       	com	r24
    328a:	90 95       	com	r25
    328c:	8e 0f       	add	r24, r30
    328e:	9f 1f       	adc	r25, r31
    3290:	08 95       	ret

00003292 <fputc>:
    3292:	0f 93       	push	r16
    3294:	1f 93       	push	r17
    3296:	cf 93       	push	r28
    3298:	df 93       	push	r29
    329a:	fb 01       	movw	r30, r22
    329c:	23 81       	ldd	r18, Z+3	; 0x03
    329e:	21 fd       	sbrc	r18, 1
    32a0:	03 c0       	rjmp	.+6      	; 0x32a8 <fputc+0x16>
    32a2:	8f ef       	ldi	r24, 0xFF	; 255
    32a4:	9f ef       	ldi	r25, 0xFF	; 255
    32a6:	28 c0       	rjmp	.+80     	; 0x32f8 <fputc+0x66>
    32a8:	22 ff       	sbrs	r18, 2
    32aa:	16 c0       	rjmp	.+44     	; 0x32d8 <fputc+0x46>
    32ac:	46 81       	ldd	r20, Z+6	; 0x06
    32ae:	57 81       	ldd	r21, Z+7	; 0x07
    32b0:	24 81       	ldd	r18, Z+4	; 0x04
    32b2:	35 81       	ldd	r19, Z+5	; 0x05
    32b4:	42 17       	cp	r20, r18
    32b6:	53 07       	cpc	r21, r19
    32b8:	44 f4       	brge	.+16     	; 0x32ca <fputc+0x38>
    32ba:	a0 81       	ld	r26, Z
    32bc:	b1 81       	ldd	r27, Z+1	; 0x01
    32be:	9d 01       	movw	r18, r26
    32c0:	2f 5f       	subi	r18, 0xFF	; 255
    32c2:	3f 4f       	sbci	r19, 0xFF	; 255
    32c4:	20 83       	st	Z, r18
    32c6:	31 83       	std	Z+1, r19	; 0x01
    32c8:	8c 93       	st	X, r24
    32ca:	26 81       	ldd	r18, Z+6	; 0x06
    32cc:	37 81       	ldd	r19, Z+7	; 0x07
    32ce:	2f 5f       	subi	r18, 0xFF	; 255
    32d0:	3f 4f       	sbci	r19, 0xFF	; 255
    32d2:	26 83       	std	Z+6, r18	; 0x06
    32d4:	37 83       	std	Z+7, r19	; 0x07
    32d6:	10 c0       	rjmp	.+32     	; 0x32f8 <fputc+0x66>
    32d8:	eb 01       	movw	r28, r22
    32da:	09 2f       	mov	r16, r25
    32dc:	18 2f       	mov	r17, r24
    32de:	00 84       	ldd	r0, Z+8	; 0x08
    32e0:	f1 85       	ldd	r31, Z+9	; 0x09
    32e2:	e0 2d       	mov	r30, r0
    32e4:	19 95       	eicall
    32e6:	89 2b       	or	r24, r25
    32e8:	e1 f6       	brne	.-72     	; 0x32a2 <fputc+0x10>
    32ea:	8e 81       	ldd	r24, Y+6	; 0x06
    32ec:	9f 81       	ldd	r25, Y+7	; 0x07
    32ee:	01 96       	adiw	r24, 0x01	; 1
    32f0:	8e 83       	std	Y+6, r24	; 0x06
    32f2:	9f 83       	std	Y+7, r25	; 0x07
    32f4:	81 2f       	mov	r24, r17
    32f6:	90 2f       	mov	r25, r16
    32f8:	df 91       	pop	r29
    32fa:	cf 91       	pop	r28
    32fc:	1f 91       	pop	r17
    32fe:	0f 91       	pop	r16
    3300:	08 95       	ret

00003302 <__ultoa_invert>:
    3302:	fa 01       	movw	r30, r20
    3304:	aa 27       	eor	r26, r26
    3306:	28 30       	cpi	r18, 0x08	; 8
    3308:	51 f1       	breq	.+84     	; 0x335e <__ultoa_invert+0x5c>
    330a:	20 31       	cpi	r18, 0x10	; 16
    330c:	81 f1       	breq	.+96     	; 0x336e <__ultoa_invert+0x6c>
    330e:	e8 94       	clt
    3310:	6f 93       	push	r22
    3312:	6e 7f       	andi	r22, 0xFE	; 254
    3314:	6e 5f       	subi	r22, 0xFE	; 254
    3316:	7f 4f       	sbci	r23, 0xFF	; 255
    3318:	8f 4f       	sbci	r24, 0xFF	; 255
    331a:	9f 4f       	sbci	r25, 0xFF	; 255
    331c:	af 4f       	sbci	r26, 0xFF	; 255
    331e:	b1 e0       	ldi	r27, 0x01	; 1
    3320:	3e d0       	rcall	.+124    	; 0x339e <__ultoa_invert+0x9c>
    3322:	b4 e0       	ldi	r27, 0x04	; 4
    3324:	3c d0       	rcall	.+120    	; 0x339e <__ultoa_invert+0x9c>
    3326:	67 0f       	add	r22, r23
    3328:	78 1f       	adc	r23, r24
    332a:	89 1f       	adc	r24, r25
    332c:	9a 1f       	adc	r25, r26
    332e:	a1 1d       	adc	r26, r1
    3330:	68 0f       	add	r22, r24
    3332:	79 1f       	adc	r23, r25
    3334:	8a 1f       	adc	r24, r26
    3336:	91 1d       	adc	r25, r1
    3338:	a1 1d       	adc	r26, r1
    333a:	6a 0f       	add	r22, r26
    333c:	71 1d       	adc	r23, r1
    333e:	81 1d       	adc	r24, r1
    3340:	91 1d       	adc	r25, r1
    3342:	a1 1d       	adc	r26, r1
    3344:	20 d0       	rcall	.+64     	; 0x3386 <__ultoa_invert+0x84>
    3346:	09 f4       	brne	.+2      	; 0x334a <__ultoa_invert+0x48>
    3348:	68 94       	set
    334a:	3f 91       	pop	r19
    334c:	2a e0       	ldi	r18, 0x0A	; 10
    334e:	26 9f       	mul	r18, r22
    3350:	11 24       	eor	r1, r1
    3352:	30 19       	sub	r19, r0
    3354:	30 5d       	subi	r19, 0xD0	; 208
    3356:	31 93       	st	Z+, r19
    3358:	de f6       	brtc	.-74     	; 0x3310 <__ultoa_invert+0xe>
    335a:	cf 01       	movw	r24, r30
    335c:	08 95       	ret
    335e:	46 2f       	mov	r20, r22
    3360:	47 70       	andi	r20, 0x07	; 7
    3362:	40 5d       	subi	r20, 0xD0	; 208
    3364:	41 93       	st	Z+, r20
    3366:	b3 e0       	ldi	r27, 0x03	; 3
    3368:	0f d0       	rcall	.+30     	; 0x3388 <__ultoa_invert+0x86>
    336a:	c9 f7       	brne	.-14     	; 0x335e <__ultoa_invert+0x5c>
    336c:	f6 cf       	rjmp	.-20     	; 0x335a <__ultoa_invert+0x58>
    336e:	46 2f       	mov	r20, r22
    3370:	4f 70       	andi	r20, 0x0F	; 15
    3372:	40 5d       	subi	r20, 0xD0	; 208
    3374:	4a 33       	cpi	r20, 0x3A	; 58
    3376:	18 f0       	brcs	.+6      	; 0x337e <__ultoa_invert+0x7c>
    3378:	49 5d       	subi	r20, 0xD9	; 217
    337a:	31 fd       	sbrc	r19, 1
    337c:	40 52       	subi	r20, 0x20	; 32
    337e:	41 93       	st	Z+, r20
    3380:	02 d0       	rcall	.+4      	; 0x3386 <__ultoa_invert+0x84>
    3382:	a9 f7       	brne	.-22     	; 0x336e <__ultoa_invert+0x6c>
    3384:	ea cf       	rjmp	.-44     	; 0x335a <__ultoa_invert+0x58>
    3386:	b4 e0       	ldi	r27, 0x04	; 4
    3388:	a6 95       	lsr	r26
    338a:	97 95       	ror	r25
    338c:	87 95       	ror	r24
    338e:	77 95       	ror	r23
    3390:	67 95       	ror	r22
    3392:	ba 95       	dec	r27
    3394:	c9 f7       	brne	.-14     	; 0x3388 <__ultoa_invert+0x86>
    3396:	00 97       	sbiw	r24, 0x00	; 0
    3398:	61 05       	cpc	r22, r1
    339a:	71 05       	cpc	r23, r1
    339c:	08 95       	ret
    339e:	9b 01       	movw	r18, r22
    33a0:	ac 01       	movw	r20, r24
    33a2:	0a 2e       	mov	r0, r26
    33a4:	06 94       	lsr	r0
    33a6:	57 95       	ror	r21
    33a8:	47 95       	ror	r20
    33aa:	37 95       	ror	r19
    33ac:	27 95       	ror	r18
    33ae:	ba 95       	dec	r27
    33b0:	c9 f7       	brne	.-14     	; 0x33a4 <__ultoa_invert+0xa2>
    33b2:	62 0f       	add	r22, r18
    33b4:	73 1f       	adc	r23, r19
    33b6:	84 1f       	adc	r24, r20
    33b8:	95 1f       	adc	r25, r21
    33ba:	a0 1d       	adc	r26, r0
    33bc:	08 95       	ret

000033be <_exit>:
    33be:	f8 94       	cli

000033c0 <__stop_program>:
    33c0:	ff cf       	rjmp	.-2      	; 0x33c0 <__stop_program>
